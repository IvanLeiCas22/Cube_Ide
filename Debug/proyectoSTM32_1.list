
proyectoSTM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a20  08009a20  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009a20  08009a20  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a20  08009a20  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d0  2000017c  08009ba4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000144c  08009ba4  0002144c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015618  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003688  00000000  00000000  00035800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00038e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e85  00000000  00000000  0003a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a636  00000000  00000000  0003afed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176d1  00000000  00000000  00055623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f58c  00000000  00000000  0006ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e4c  00000000  00000000  000fc280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001010cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009994 	.word	0x08009994

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08009994 	.word	0x08009994

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a13      	ldr	r2, [pc, #76]	; (80001a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d11e      	bne.n	800019c <HAL_TIM_PeriodElapsedCallback+0x50>
		if (time100ms)
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000160:	881b      	ldrh	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d005      	beq.n	8000172 <HAL_TIM_PeriodElapsedCallback+0x26>
			time100ms--;
 8000166:	4b11      	ldr	r3, [pc, #68]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000168:	881b      	ldrh	r3, [r3, #0]
 800016a:	3b01      	subs	r3, #1
 800016c:	b29a      	uxth	r2, r3
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000170:	801a      	strh	r2, [r3, #0]
		if (time20ms)
 8000172:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d005      	beq.n	8000186 <HAL_TIM_PeriodElapsedCallback+0x3a>
			time20ms--;
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	3b01      	subs	r3, #1
 8000180:	b2da      	uxtb	r2, r3
 8000182:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000184:	701a      	strb	r2, [r3, #0]
		if (myButtons[0].timePush < EQ5000MS)
 8000186:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800018e:	4293      	cmp	r3, r2
 8000190:	d804      	bhi.n	800019c <HAL_TIM_PeriodElapsedCallback+0x50>
			myButtons[0].timePush++;
 8000192:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800019a:	6053      	str	r3, [r2, #4]
	}
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	40012c00 	.word	0x40012c00
 80001ac:	2000022a 	.word	0x2000022a
 80001b0:	2000022c 	.word	0x2000022c
 80001b4:	20000854 	.word	0x20000854

080001b8 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	memcpy(&datosComUSB.bufferRx[datosComUSB.indexWriteRx], buf, len);
 80001c4:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <USBReceive+0x3c>)
 80001c6:	789b      	ldrb	r3, [r3, #2]
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <USBReceive+0x3c>)
 80001cc:	4413      	add	r3, r2
 80001ce:	3306      	adds	r3, #6
 80001d0:	887a      	ldrh	r2, [r7, #2]
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f009 fbcf 	bl	8009978 <memcpy>
	datosComUSB.indexWriteRx += len;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <USBReceive+0x3c>)
 80001dc:	789a      	ldrb	r2, [r3, #2]
 80001de:	887b      	ldrh	r3, [r7, #2]
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	4413      	add	r3, r2
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <USBReceive+0x3c>)
 80001e8:	709a      	strb	r2, [r3, #2]
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000648 	.word	0x20000648

080001f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <HAL_UART_RxCpltCallback+0x3c>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d110      	bne.n	800022c <HAL_UART_RxCpltCallback+0x34>
		datosComSerie.indexWriteRx++;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <HAL_UART_RxCpltCallback+0x40>)
 800020c:	789b      	ldrb	r3, [r3, #2]
 800020e:	3301      	adds	r3, #1
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <HAL_UART_RxCpltCallback+0x40>)
 8000214:	709a      	strb	r2, [r3, #2]
		HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8000216:	4b08      	ldr	r3, [pc, #32]	; (8000238 <HAL_UART_RxCpltCallback+0x40>)
 8000218:	789b      	ldrb	r3, [r3, #2]
 800021a:	461a      	mov	r2, r3
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <HAL_UART_RxCpltCallback+0x40>)
 800021e:	4413      	add	r3, r2
 8000220:	3306      	adds	r3, #6
 8000222:	2201      	movs	r2, #1
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_UART_RxCpltCallback+0x44>)
 8000228:	f004 fa3e 	bl	80046a8 <HAL_UART_Receive_IT>
	}
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40013800 	.word	0x40013800
 8000238:	20000238 	.word	0x20000238
 800023c:	200001e0 	.word	0x200001e0

08000240 <heartBeat>:

void heartBeat() {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	static uint8_t move=0;	//Ultima modificacion
	if ((~mask) & (1<<move)) {
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <heartBeat+0x58>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	43db      	mvns	r3, r3
 800024a:	4a14      	ldr	r2, [pc, #80]	; (800029c <heartBeat+0x5c>)
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	2201      	movs	r2, #1
 8000252:	408a      	lsls	r2, r1
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d006      	beq.n	8000268 <heartBeat+0x28>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800025a:	2201      	movs	r2, #1
 800025c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000260:	480f      	ldr	r0, [pc, #60]	; (80002a0 <heartBeat+0x60>)
 8000262:	f001 fb86 	bl	8001972 <HAL_GPIO_WritePin>
 8000266:	e005      	b.n	8000274 <heartBeat+0x34>
	} else {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	//Prende el led
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <heartBeat+0x60>)
 8000270:	f001 fb7f 	bl	8001972 <HAL_GPIO_WritePin>
	}
	move++;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <heartBeat+0x5c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	b2da      	uxtb	r2, r3
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <heartBeat+0x5c>)
 800027e:	701a      	strb	r2, [r3, #0]
	if (move > HBintervalWidth)
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <heartBeat+0x5c>)
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <heartBeat+0x64>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d902      	bls.n	8000292 <heartBeat+0x52>
		move = 0;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <heartBeat+0x5c>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000230 	.word	0x20000230
 800029c:	20000860 	.word	0x20000860
 80002a0:	40011000 	.word	0x40011000
 80002a4:	20000229 	.word	0x20000229

080002a8 <ledStatus>:

void ledStatus() {
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
    switch (mode) {
 80002ac:	4b43      	ldr	r3, [pc, #268]	; (80003bc <ledStatus+0x114>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d87e      	bhi.n	80003b2 <ledStatus+0x10a>
 80002b4:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <ledStatus+0x14>)
 80002b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ba:	bf00      	nop
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002dd 	.word	0x080002dd
 80002c4:	08000323 	.word	0x08000323
 80002c8:	0800036b 	.word	0x0800036b
        case 0:
            HBintervalWidth = THREESECONDSINTERVAL;
 80002cc:	4b3c      	ldr	r3, [pc, #240]	; (80003c0 <ledStatus+0x118>)
 80002ce:	221d      	movs	r2, #29
 80002d0:	701a      	strb	r2, [r3, #0]
            mask = 0x55555555;
 80002d2:	4b3c      	ldr	r3, [pc, #240]	; (80003c4 <ledStatus+0x11c>)
 80002d4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80002d8:	601a      	str	r2, [r3, #0]
            break;
 80002da:	e06a      	b.n	80003b2 <ledStatus+0x10a>
        case 1:
            if (LEDMODE == THREESECONDS) {
 80002dc:	4b3a      	ldr	r3, [pc, #232]	; (80003c8 <ledStatus+0x120>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d014      	beq.n	8000314 <ledStatus+0x6c>
                if (CARSTATUS) {
 80002ea:	4b37      	ldr	r3, [pc, #220]	; (80003c8 <ledStatus+0x120>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d006      	beq.n	8000306 <ledStatus+0x5e>
                    HBintervalWidth = THREESECONDSINTERVAL;
 80002f8:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <ledStatus+0x118>)
 80002fa:	221d      	movs	r2, #29
 80002fc:	701a      	strb	r2, [r3, #0]
                    mask = 0x5F;
 80002fe:	4b31      	ldr	r3, [pc, #196]	; (80003c4 <ledStatus+0x11c>)
 8000300:	225f      	movs	r2, #95	; 0x5f
 8000302:	601a      	str	r2, [r3, #0]
                }
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 1;
            }
            break;
 8000304:	e055      	b.n	80003b2 <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000306:	4b2e      	ldr	r3, [pc, #184]	; (80003c0 <ledStatus+0x118>)
 8000308:	221d      	movs	r2, #29
 800030a:	701a      	strb	r2, [r3, #0]
                    mask = 1;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <ledStatus+0x11c>)
 800030e:	2201      	movs	r2, #1
 8000310:	601a      	str	r2, [r3, #0]
            break;
 8000312:	e04e      	b.n	80003b2 <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 8000314:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <ledStatus+0x118>)
 8000316:	2209      	movs	r2, #9
 8000318:	701a      	strb	r2, [r3, #0]
                mask = 1;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <ledStatus+0x11c>)
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
            break;
 8000320:	e047      	b.n	80003b2 <ledStatus+0x10a>
        case 2:
            if (LEDMODE == THREESECONDS) {
 8000322:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <ledStatus+0x120>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d015      	beq.n	800035c <ledStatus+0xb4>
                if (CARSTATUS) {
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <ledStatus+0x120>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	f003 0302 	and.w	r3, r3, #2
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <ledStatus+0xa6>
                    HBintervalWidth = THREESECONDSINTERVAL;
 800033e:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <ledStatus+0x118>)
 8000340:	221d      	movs	r2, #29
 8000342:	701a      	strb	r2, [r3, #0]
                    mask = 0x15F;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <ledStatus+0x11c>)
 8000346:	f240 125f 	movw	r2, #351	; 0x15f
 800034a:	601a      	str	r2, [r3, #0]
                }
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 5;
            }
            break;
 800034c:	e031      	b.n	80003b2 <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 800034e:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <ledStatus+0x118>)
 8000350:	221d      	movs	r2, #29
 8000352:	701a      	strb	r2, [r3, #0]
                    mask = 5;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <ledStatus+0x11c>)
 8000356:	2205      	movs	r2, #5
 8000358:	601a      	str	r2, [r3, #0]
            break;
 800035a:	e02a      	b.n	80003b2 <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <ledStatus+0x118>)
 800035e:	2209      	movs	r2, #9
 8000360:	701a      	strb	r2, [r3, #0]
                mask = 5;
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <ledStatus+0x11c>)
 8000364:	2205      	movs	r2, #5
 8000366:	601a      	str	r2, [r3, #0]
            break;
 8000368:	e023      	b.n	80003b2 <ledStatus+0x10a>
        case 3:
            if (LEDMODE == THREESECONDS) {
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <ledStatus+0x120>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d015      	beq.n	80003a4 <ledStatus+0xfc>
                if (CARSTATUS) {
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <ledStatus+0x120>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	f003 0302 	and.w	r3, r3, #2
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2b00      	cmp	r3, #0
 8000384:	d007      	beq.n	8000396 <ledStatus+0xee>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <ledStatus+0x118>)
 8000388:	221d      	movs	r2, #29
 800038a:	701a      	strb	r2, [r3, #0]
                    mask = 0x55F;
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <ledStatus+0x11c>)
 800038e:	f240 525f 	movw	r2, #1375	; 0x55f
 8000392:	601a      	str	r2, [r3, #0]
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 21;
            }
    }
}
 8000394:	e00d      	b.n	80003b2 <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000396:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <ledStatus+0x118>)
 8000398:	221d      	movs	r2, #29
 800039a:	701a      	strb	r2, [r3, #0]
                    mask = 21;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <ledStatus+0x11c>)
 800039e:	2215      	movs	r2, #21
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	e006      	b.n	80003b2 <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <ledStatus+0x118>)
 80003a6:	2209      	movs	r2, #9
 80003a8:	701a      	strb	r2, [r3, #0]
                mask = 21;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <ledStatus+0x11c>)
 80003ac:	2215      	movs	r2, #21
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	e7ff      	b.n	80003b2 <ledStatus+0x10a>
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	20000228 	.word	0x20000228
 80003c0:	20000229 	.word	0x20000229
 80003c4:	20000230 	.word	0x20000230
 80003c8:	20000850 	.word	0x20000850

080003cc <imAlive>:

void imAlive() {
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	//decodeData(&datosComSerie, GETALIVE);
	//decodeData(&datosComUSB, GETALIVE);
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <buttonsStatus>:

void buttonsStatus(_sButton *buttons, uint8_t index) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70fb      	strb	r3, [r7, #3]
    switch(buttons->estado){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	f200 80bd 	bhi.w	8000568 <buttonsStatus+0x190>
 80003ee:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <buttonsStatus+0x1c>)
 80003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f4:	08000405 	.word	0x08000405
 80003f8:	08000417 	.word	0x08000417
 80003fc:	08000491 	.word	0x08000491
 8000400:	080004af 	.word	0x080004af
        case UP:
            if (buttons->event == EV_PRESSED) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	785b      	ldrb	r3, [r3, #1]
 8000408:	2b00      	cmp	r3, #0
 800040a:	f040 80a8 	bne.w	800055e <buttonsStatus+0x186>
                buttons->estado = FALLING;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2202      	movs	r2, #2
 8000412:	701a      	strb	r2, [r3, #0]
            }
        break;
 8000414:	e0a3      	b.n	800055e <buttonsStatus+0x186>
        case DOWN:
            if (buttons->event == EV_NOT_PRESSED) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	785b      	ldrb	r3, [r3, #1]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d103      	bne.n	8000426 <buttonsStatus+0x4e>
                buttons->estado = RISING;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2203      	movs	r2, #3
 8000422:	701a      	strb	r2, [r3, #0]
							ledStatus();
						}
					}
				}
            }
        break;
 8000424:	e09d      	b.n	8000562 <buttonsStatus+0x18a>
				if ((CARSTATUS == WORKING) && (buttons->timePush > EQ3000MS)) { // SE DETIENE EL MODO, LED EN PERIODO DE 3 SEGUNDOS. MAS DE 3000ms
 8000426:	4b52      	ldr	r3, [pc, #328]	; (8000570 <buttonsStatus+0x198>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b00      	cmp	r3, #0
 8000432:	d012      	beq.n	800045a <buttonsStatus+0x82>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800043c:	4293      	cmp	r3, r2
 800043e:	d90c      	bls.n	800045a <buttonsStatus+0x82>
					LEDMODE = THREESECONDS;
 8000440:	4a4b      	ldr	r2, [pc, #300]	; (8000570 <buttonsStatus+0x198>)
 8000442:	7813      	ldrb	r3, [r2, #0]
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	7013      	strb	r3, [r2, #0]
					CARSTATUS = RESTING;
 800044a:	4a49      	ldr	r2, [pc, #292]	; (8000570 <buttonsStatus+0x198>)
 800044c:	7813      	ldrb	r3, [r2, #0]
 800044e:	f36f 0341 	bfc	r3, #1, #1
 8000452:	7013      	strb	r3, [r2, #0]
					ledStatus();
 8000454:	f7ff ff28 	bl	80002a8 <ledStatus>
        break;
 8000458:	e083      	b.n	8000562 <buttonsStatus+0x18a>
					if (buttons->timePush >= EQ5000MS) { // SE VUELVE AL PERIODO DE 3 SEGUNDOS Y SE CANCELA EL INICIO. MAS DE 5000ms
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000462:	4293      	cmp	r3, r2
 8000464:	d907      	bls.n	8000476 <buttonsStatus+0x9e>
						LEDMODE = THREESECONDS;
 8000466:	4a42      	ldr	r2, [pc, #264]	; (8000570 <buttonsStatus+0x198>)
 8000468:	7813      	ldrb	r3, [r2, #0]
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	7013      	strb	r3, [r2, #0]
						ledStatus();
 8000470:	f7ff ff1a 	bl	80002a8 <ledStatus>
        break;
 8000474:	e075      	b.n	8000562 <buttonsStatus+0x18a>
						if (buttons->timePush > EQ1000MS) { // SE MANTIENE PRESIONADO EL BOTON POR MAS DE UN SEGUNDO, EMPIEZA SECUENCIA DE 1 SEG. MAS DE 1000ms
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800047e:	d970      	bls.n	8000562 <buttonsStatus+0x18a>
							LEDMODE = ONESECOND;
 8000480:	4a3b      	ldr	r2, [pc, #236]	; (8000570 <buttonsStatus+0x198>)
 8000482:	7813      	ldrb	r3, [r2, #0]
 8000484:	f36f 0300 	bfc	r3, #0, #1
 8000488:	7013      	strb	r3, [r2, #0]
							ledStatus();
 800048a:	f7ff ff0d 	bl	80002a8 <ledStatus>
        break;
 800048e:	e068      	b.n	8000562 <buttonsStatus+0x18a>
        case FALLING:
            if (buttons->event == EV_PRESSED) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	785b      	ldrb	r3, [r3, #1]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d106      	bne.n	80004a6 <buttonsStatus+0xce>
                buttons->estado = DOWN;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
                buttons->timePush = 0; // SE INICIA EL CRONOMETRO DE PULSADO
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	605a      	str	r2, [r3, #4]
            } else {
                buttons->estado = UP;
            }
        break;
 80004a4:	e060      	b.n	8000568 <buttonsStatus+0x190>
                buttons->estado = UP;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
        break;
 80004ac:	e05c      	b.n	8000568 <buttonsStatus+0x190>
        case RISING:
            if (buttons->event == EV_NOT_PRESSED) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	785b      	ldrb	r3, [r3, #1]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d14d      	bne.n	8000552 <buttonsStatus+0x17a>
                buttons->estado = UP;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
                if ((CARSTATUS == RESTING) && (buttons->timePush >= EQ100MS)) { // HACE ALGO SOLO SI SE SUELTA EL BOTON PRESIONANDOLO POR MAS DE 100 MS
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <buttonsStatus+0x198>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	f003 0302 	and.w	r3, r3, #2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d135      	bne.n	8000536 <buttonsStatus+0x15e>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80004d2:	d330      	bcc.n	8000536 <buttonsStatus+0x15e>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80004dc:	d814      	bhi.n	8000508 <buttonsStatus+0x130>
                        mode++;
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <buttonsStatus+0x19c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b23      	ldr	r3, [pc, #140]	; (8000574 <buttonsStatus+0x19c>)
 80004e8:	701a      	strb	r2, [r3, #0]
                        if (mode == MODE3+1) {
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <buttonsStatus+0x19c>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d102      	bne.n	80004f8 <buttonsStatus+0x120>
                            mode = IDLE;
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <buttonsStatus+0x19c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
                        }
                        LEDMODE = THREESECONDS;
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <buttonsStatus+0x198>)
 80004fa:	7813      	ldrb	r3, [r2, #0]
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	7013      	strb	r3, [r2, #0]
                        ledStatus();
 8000502:	f7ff fed1 	bl	80002a8 <ledStatus>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 8000506:	e028      	b.n	800055a <buttonsStatus+0x182>
                    } else {
                        if ((buttons->timePush < EQ5000MS) && (mode != IDLE)) { // SI EL MODO DEL AUTO NO ES IDLE SE INICIA EL MODO SELECCIONADO Y SE PONE EL LED EN MODO ON. MENOS DE 5000ms
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000510:	4293      	cmp	r3, r2
 8000512:	d822      	bhi.n	800055a <buttonsStatus+0x182>
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <buttonsStatus+0x19c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d01e      	beq.n	800055a <buttonsStatus+0x182>
                            LEDMODE = THREESECONDS;
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <buttonsStatus+0x198>)
 800051e:	7813      	ldrb	r3, [r2, #0]
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	7013      	strb	r3, [r2, #0]
                            CARSTATUS = WORKING;
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <buttonsStatus+0x198>)
 8000528:	7813      	ldrb	r3, [r2, #0]
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	7013      	strb	r3, [r2, #0]
                            ledStatus();
 8000530:	f7ff feba 	bl	80002a8 <ledStatus>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 8000534:	e011      	b.n	800055a <buttonsStatus+0x182>
                        }
                    }
                } else {
                    if (buttons->timePush <= EQ3000MS) { // SI NO SE SUELTA DESPUES DE LOS 3000 MS SE VUELVE A TRABAJAR
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800053e:	4293      	cmp	r3, r2
 8000540:	d811      	bhi.n	8000566 <buttonsStatus+0x18e>
                        LEDMODE = THREESECONDS;
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <buttonsStatus+0x198>)
 8000544:	7813      	ldrb	r3, [r2, #0]
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	7013      	strb	r3, [r2, #0]
                        ledStatus();
 800054c:	f7ff feac 	bl	80002a8 <ledStatus>
                    }
                }
            } else {
                buttons->estado = DOWN;
            }
        break;
 8000550:	e009      	b.n	8000566 <buttonsStatus+0x18e>
                buttons->estado = DOWN;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
        break;
 8000558:	e005      	b.n	8000566 <buttonsStatus+0x18e>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 800055a:	bf00      	nop
        break;
 800055c:	e003      	b.n	8000566 <buttonsStatus+0x18e>
        break;
 800055e:	bf00      	nop
 8000560:	e002      	b.n	8000568 <buttonsStatus+0x190>
        break;
 8000562:	bf00      	nop
 8000564:	e000      	b.n	8000568 <buttonsStatus+0x190>
        break;
 8000566:	bf00      	nop
    }
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000850 	.word	0x20000850
 8000574:	20000228 	.word	0x20000228

08000578 <inicializaButtons>:

void inicializaButtons(_sButton *buttons) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    buttons->estado = UP;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
    buttons->timePush = EQ5000MS;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f644 6220 	movw	r2, #20000	; 0x4e20
 800058c:	605a      	str	r2, [r3, #4]
    buttons->event = EV_NONE;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2202      	movs	r2, #2
 8000592:	705a      	strb	r2, [r3, #1]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <debounceTask>:

void debounceTask() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < NUMBUTTONS; index++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	e031      	b.n	8000610 <debounceTask+0x70>
        if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) & (1 << index)){
 80005ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <debounceTask+0x80>)
 80005b2:	f001 f9c7 	bl	8001944 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	fa42 f303 	asr.w	r3, r2, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00a      	beq.n	80005de <debounceTask+0x3e>
            myButtons[index].event = EV_NOT_PRESSED;
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	4916      	ldr	r1, [pc, #88]	; (8000624 <debounceTask+0x84>)
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	3301      	adds	r3, #1
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e009      	b.n	80005f2 <debounceTask+0x52>
        } else {
            myButtons[index].event = EV_PRESSED;
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	4910      	ldr	r1, [pc, #64]	; (8000624 <debounceTask+0x84>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	440b      	add	r3, r1
 80005ec:	3301      	adds	r3, #1
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
        }
        buttonsStatus(&myButtons[index], index);
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4a09      	ldr	r2, [pc, #36]	; (8000624 <debounceTask+0x84>)
 80005fe:	4413      	add	r3, r2
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fee7 	bl	80003d8 <buttonsStatus>
    for (uint8_t index = 0; index < NUMBUTTONS; index++){
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	3301      	adds	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0ca      	beq.n	80005ac <debounceTask+0xc>
    }
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40010c00 	.word	0x40010c00
 8000624:	20000854 	.word	0x20000854

08000628 <decodeProtocol>:

void decodeProtocol(_sDato *datosCom) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    static uint8_t nBytes=0;
    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy) {
 8000636:	e0ec      	b.n	8000812 <decodeProtocol+0x1ea>
        switch (protocolStatus) {
 8000638:	4b7b      	ldr	r3, [pc, #492]	; (8000828 <decodeProtocol+0x200>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b06      	cmp	r3, #6
 800063e:	f200 80e4 	bhi.w	800080a <decodeProtocol+0x1e2>
 8000642:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <decodeProtocol+0x20>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	08000665 	.word	0x08000665
 800064c:	0800068d 	.word	0x0800068d
 8000650:	080006c1 	.word	0x080006c1
 8000654:	080006f5 	.word	0x080006f5
 8000658:	08000729 	.word	0x08000729
 800065c:	0800075d 	.word	0x0800075d
 8000660:	0800079f 	.word	0x0800079f
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	b2d1      	uxtb	r1, r2
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	70d1      	strb	r1, [r2, #3]
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	799b      	ldrb	r3, [r3, #6]
 8000678:	2b55      	cmp	r3, #85	; 0x55
 800067a:	f040 80ca 	bne.w	8000812 <decodeProtocol+0x1ea>
                    protocolStatus=HEADER_1;
 800067e:	4b6a      	ldr	r3, [pc, #424]	; (8000828 <decodeProtocol+0x200>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	705a      	strb	r2, [r3, #1]
                }
                break;
 800068a:	e0c2      	b.n	8000812 <decodeProtocol+0x1ea>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	b2d1      	uxtb	r1, r2
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	70d1      	strb	r1, [r2, #3]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	799b      	ldrb	r3, [r3, #6]
 80006a0:	2b4e      	cmp	r3, #78	; 0x4e
 80006a2:	d103      	bne.n	80006ac <decodeProtocol+0x84>
                    protocolStatus=HEADER_2;
 80006a4:	4b60      	ldr	r3, [pc, #384]	; (8000828 <decodeProtocol+0x200>)
 80006a6:	2202      	movs	r2, #2
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e0b2      	b.n	8000812 <decodeProtocol+0x1ea>
                else{
                    datosCom->indexReadRx--;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	78db      	ldrb	r3, [r3, #3]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	70da      	strb	r2, [r3, #3]
                    protocolStatus=START;
 80006b8:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <decodeProtocol+0x200>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006be:	e0a8      	b.n	8000812 <decodeProtocol+0x1ea>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	b2d1      	uxtb	r1, r2
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	70d1      	strb	r1, [r2, #3]
 80006cc:	461a      	mov	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	799b      	ldrb	r3, [r3, #6]
 80006d4:	2b45      	cmp	r3, #69	; 0x45
 80006d6:	d103      	bne.n	80006e0 <decodeProtocol+0xb8>
                    protocolStatus=HEADER_3;
 80006d8:	4b53      	ldr	r3, [pc, #332]	; (8000828 <decodeProtocol+0x200>)
 80006da:	2203      	movs	r2, #3
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e098      	b.n	8000812 <decodeProtocol+0x1ea>
                else{
                    datosCom->indexReadRx--;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	70da      	strb	r2, [r3, #3]
                    protocolStatus=START;
 80006ec:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <decodeProtocol+0x200>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006f2:	e08e      	b.n	8000812 <decodeProtocol+0x1ea>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	b2d1      	uxtb	r1, r2
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	70d1      	strb	r1, [r2, #3]
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	799b      	ldrb	r3, [r3, #6]
 8000708:	2b52      	cmp	r3, #82	; 0x52
 800070a:	d103      	bne.n	8000714 <decodeProtocol+0xec>
					protocolStatus=NBYTES;
 800070c:	4b46      	ldr	r3, [pc, #280]	; (8000828 <decodeProtocol+0x200>)
 800070e:	2204      	movs	r2, #4
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e07e      	b.n	8000812 <decodeProtocol+0x1ea>
				else{
					datosCom->indexReadRx--;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	3b01      	subs	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	70da      	strb	r2, [r3, #3]
					protocolStatus=START;
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <decodeProtocol+0x200>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000726:	e074      	b.n	8000812 <decodeProtocol+0x1ea>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx; // 4 posiciones mas adelante tenes el ID en nuestro caso, por los datos del numero de auto y uno mas
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	78da      	ldrb	r2, [r3, #3]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	701a      	strb	r2, [r3, #0]
                posicionComand = datosCom->indexStart + POSID;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <decodeProtocol+0x204>)
 800073a:	701a      	strb	r2, [r3, #0]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	b2d1      	uxtb	r1, r2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	70d1      	strb	r1, [r2, #3]
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	799a      	ldrb	r2, [r3, #6]
 8000750:	4b37      	ldr	r3, [pc, #220]	; (8000830 <decodeProtocol+0x208>)
 8000752:	701a      	strb	r2, [r3, #0]
                protocolStatus=TOKEN;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <decodeProtocol+0x200>)
 8000756:	2205      	movs	r2, #5
 8000758:	701a      	strb	r2, [r3, #0]
                break;
 800075a:	e05a      	b.n	8000812 <decodeProtocol+0x1ea>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	78db      	ldrb	r3, [r3, #3]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	b2d1      	uxtb	r1, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	70d1      	strb	r1, [r2, #3]
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	799b      	ldrb	r3, [r3, #6]
 8000770:	2b3a      	cmp	r3, #58	; 0x3a
 8000772:	d10a      	bne.n	800078a <decodeProtocol+0x162>
                    protocolStatus=PAYLOAD;
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <decodeProtocol+0x200>)
 8000776:	2206      	movs	r2, #6
 8000778:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^nBytes^':';
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <decodeProtocol+0x208>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000782:	b2da      	uxtb	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	705a      	strb	r2, [r3, #1]
 8000788:	e043      	b.n	8000812 <decodeProtocol+0x1ea>
                }
                else{
                    datosCom->indexReadRx--;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	78db      	ldrb	r3, [r3, #3]
 800078e:	3b01      	subs	r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	70da      	strb	r2, [r3, #3]
                    protocolStatus=START;
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <decodeProtocol+0x200>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800079c:	e039      	b.n	8000812 <decodeProtocol+0x1ea>
            case PAYLOAD:
                if (nBytes>1){
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <decodeProtocol+0x208>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d90f      	bls.n	80007c6 <decodeProtocol+0x19e>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	78db      	ldrb	r3, [r3, #3]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	b2d1      	uxtb	r1, r2
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	70d1      	strb	r1, [r2, #3]
 80007b2:	461a      	mov	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	799a      	ldrb	r2, [r3, #6]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	4053      	eors	r3, r2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	705a      	strb	r2, [r3, #1]
                }
                nBytes--;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <decodeProtocol+0x208>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <decodeProtocol+0x208>)
 80007d0:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <decodeProtocol+0x208>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d11b      	bne.n	8000812 <decodeProtocol+0x1ea>
                    protocolStatus=START;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <decodeProtocol+0x200>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78db      	ldrb	r3, [r3, #3]
 80007e8:	4619      	mov	r1, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	440b      	add	r3, r1
 80007ee:	799b      	ldrb	r3, [r3, #6]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d10e      	bne.n	8000812 <decodeProtocol+0x1ea>
                        decodeData(datosCom, datosCom->bufferRx[posicionComand]); //!< PASO LA ESTRUCTURA DATOSCOM Y PASO EL COMANDO
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <decodeProtocol+0x204>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	799b      	ldrb	r3, [r3, #6]
 8000800:	4619      	mov	r1, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f816 	bl	8000834 <decodeData>
                    }
                }
                break;
 8000808:	e003      	b.n	8000812 <decodeProtocol+0x1ea>
            default:
                protocolStatus = START;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <decodeProtocol+0x200>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
                break;
 8000810:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	78db      	ldrb	r3, [r3, #3]
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	429a      	cmp	r2, r3
 800081a:	f47f af0d 	bne.w	8000638 <decodeProtocol+0x10>
        }
    }
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000235 	.word	0x20000235
 800082c:	20000234 	.word	0x20000234
 8000830:	20000861 	.word	0x20000861

08000834 <decodeData>:

void decodeData(_sDato *datosCom, uint8_t COMAND) {
 8000834:	b480      	push	{r7}
 8000836:	b093      	sub	sp, #76	; 0x4c
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
    //wifiData *wifidataPtr;
    //uint8_t *ptr;
    uint8_t auxBuffTx[50], indiceAux=0, cheksum, sizeWifiData, indexBytesToCopy=0, numBytesToCopy=0;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000846:	2300      	movs	r3, #0
 8000848:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t QtAngle = 0, configModo = 0;  //i = 0
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    _work w;

    auxBuffTx[indiceAux++]='U';
 800085e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000868:	3348      	adds	r3, #72	; 0x48
 800086a:	443b      	add	r3, r7
 800086c:	2255      	movs	r2, #85	; 0x55
 800086e:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='N';
 8000872:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800087c:	3348      	adds	r3, #72	; 0x48
 800087e:	443b      	add	r3, r7
 8000880:	224e      	movs	r2, #78	; 0x4e
 8000882:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='E';
 8000886:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000890:	3348      	adds	r3, #72	; 0x48
 8000892:	443b      	add	r3, r7
 8000894:	2245      	movs	r2, #69	; 0x45
 8000896:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='R';
 800089a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008a4:	3348      	adds	r3, #72	; 0x48
 80008a6:	443b      	add	r3, r7
 80008a8:	2252      	movs	r2, #82	; 0x52
 80008aa:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0;
 80008ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008b8:	3348      	adds	r3, #72	; 0x48
 80008ba:	443b      	add	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=':';
 80008c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008cc:	3348      	adds	r3, #72	; 0x48
 80008ce:	443b      	add	r3, r7
 80008d0:	223a      	movs	r2, #58	; 0x3a
 80008d2:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0x0C;    //!< NUMERO DE AUTO
 80008d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008e0:	3348      	adds	r3, #72	; 0x48
 80008e2:	443b      	add	r3, r7
 80008e4:	220c      	movs	r2, #12
 80008e6:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0x00;    //!< PARA COMPLETAR EL UINT16
 80008ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008f4:	3348      	adds	r3, #72	; 0x48
 80008f6:	443b      	add	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	f803 2c3c 	strb.w	r2, [r3, #-60]

    switch (COMAND) { // NO BORRAR EL _sDato *datosCom de la funcion ya que se usa en el startconfig, agregar el comand solamente
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2bf1      	cmp	r3, #241	; 0xf1
 8000902:	f300 80e6 	bgt.w	8000ad2 <decodeData+0x29e>
 8000906:	2ba0      	cmp	r3, #160	; 0xa0
 8000908:	da06      	bge.n	8000918 <decodeData+0xe4>
 800090a:	2b10      	cmp	r3, #16
 800090c:	f000 80ee 	beq.w	8000aec <decodeData+0x2b8>
 8000910:	2b12      	cmp	r3, #18
 8000912:	f000 80c4 	beq.w	8000a9e <decodeData+0x26a>
 8000916:	e0dc      	b.n	8000ad2 <decodeData+0x29e>
 8000918:	3ba0      	subs	r3, #160	; 0xa0
 800091a:	2b51      	cmp	r3, #81	; 0x51
 800091c:	f200 80d9 	bhi.w	8000ad2 <decodeData+0x29e>
 8000920:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <decodeData+0xf4>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000af1 	.word	0x08000af1
 800092c:	08000af1 	.word	0x08000af1
 8000930:	08000af1 	.word	0x08000af1
 8000934:	08000af1 	.word	0x08000af1
 8000938:	08000af1 	.word	0x08000af1
 800093c:	08000af1 	.word	0x08000af1
 8000940:	08000af1 	.word	0x08000af1
 8000944:	08000af1 	.word	0x08000af1
 8000948:	08000af1 	.word	0x08000af1
 800094c:	08000ad3 	.word	0x08000ad3
 8000950:	08000ad3 	.word	0x08000ad3
 8000954:	08000ad3 	.word	0x08000ad3
 8000958:	08000ad3 	.word	0x08000ad3
 800095c:	08000ad3 	.word	0x08000ad3
 8000960:	08000ad3 	.word	0x08000ad3
 8000964:	08000ad3 	.word	0x08000ad3
 8000968:	08000ad3 	.word	0x08000ad3
 800096c:	08000ad3 	.word	0x08000ad3
 8000970:	08000ad3 	.word	0x08000ad3
 8000974:	08000ad3 	.word	0x08000ad3
 8000978:	08000ad3 	.word	0x08000ad3
 800097c:	08000ad3 	.word	0x08000ad3
 8000980:	08000ad3 	.word	0x08000ad3
 8000984:	08000ad3 	.word	0x08000ad3
 8000988:	08000ad3 	.word	0x08000ad3
 800098c:	08000ad3 	.word	0x08000ad3
 8000990:	08000ad3 	.word	0x08000ad3
 8000994:	08000ad3 	.word	0x08000ad3
 8000998:	08000ad3 	.word	0x08000ad3
 800099c:	08000ad3 	.word	0x08000ad3
 80009a0:	08000ad3 	.word	0x08000ad3
 80009a4:	08000ad3 	.word	0x08000ad3
 80009a8:	08000ad3 	.word	0x08000ad3
 80009ac:	08000ad3 	.word	0x08000ad3
 80009b0:	08000ad3 	.word	0x08000ad3
 80009b4:	08000ad3 	.word	0x08000ad3
 80009b8:	08000ad3 	.word	0x08000ad3
 80009bc:	08000ad3 	.word	0x08000ad3
 80009c0:	08000ad3 	.word	0x08000ad3
 80009c4:	08000ad3 	.word	0x08000ad3
 80009c8:	08000ad3 	.word	0x08000ad3
 80009cc:	08000ad3 	.word	0x08000ad3
 80009d0:	08000ad3 	.word	0x08000ad3
 80009d4:	08000ad3 	.word	0x08000ad3
 80009d8:	08000ad3 	.word	0x08000ad3
 80009dc:	08000ad3 	.word	0x08000ad3
 80009e0:	08000ad3 	.word	0x08000ad3
 80009e4:	08000ad3 	.word	0x08000ad3
 80009e8:	08000ad3 	.word	0x08000ad3
 80009ec:	08000ad3 	.word	0x08000ad3
 80009f0:	08000ad3 	.word	0x08000ad3
 80009f4:	08000ad3 	.word	0x08000ad3
 80009f8:	08000ad3 	.word	0x08000ad3
 80009fc:	08000ad3 	.word	0x08000ad3
 8000a00:	08000ad3 	.word	0x08000ad3
 8000a04:	08000ad3 	.word	0x08000ad3
 8000a08:	08000ad3 	.word	0x08000ad3
 8000a0c:	08000ad3 	.word	0x08000ad3
 8000a10:	08000ad3 	.word	0x08000ad3
 8000a14:	08000ad3 	.word	0x08000ad3
 8000a18:	08000ad3 	.word	0x08000ad3
 8000a1c:	08000ad3 	.word	0x08000ad3
 8000a20:	08000ad3 	.word	0x08000ad3
 8000a24:	08000ad3 	.word	0x08000ad3
 8000a28:	08000ad3 	.word	0x08000ad3
 8000a2c:	08000ad3 	.word	0x08000ad3
 8000a30:	08000ad3 	.word	0x08000ad3
 8000a34:	08000ad3 	.word	0x08000ad3
 8000a38:	08000ad3 	.word	0x08000ad3
 8000a3c:	08000ad3 	.word	0x08000ad3
 8000a40:	08000ad3 	.word	0x08000ad3
 8000a44:	08000ad3 	.word	0x08000ad3
 8000a48:	08000ad3 	.word	0x08000ad3
 8000a4c:	08000ad3 	.word	0x08000ad3
 8000a50:	08000ad3 	.word	0x08000ad3
 8000a54:	08000ad3 	.word	0x08000ad3
 8000a58:	08000ad3 	.word	0x08000ad3
 8000a5c:	08000ad3 	.word	0x08000ad3
 8000a60:	08000af1 	.word	0x08000af1
 8000a64:	08000ad3 	.word	0x08000ad3
 8000a68:	08000a71 	.word	0x08000a71
 8000a6c:	08000af1 	.word	0x08000af1
        case GETALIVE:
            auxBuffTx[indiceAux++]=GETALIVE;
 8000a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a7a:	3348      	adds	r3, #72	; 0x48
 8000a7c:	443b      	add	r3, r7
 8000a7e:	22f0      	movs	r2, #240	; 0xf0
 8000a80:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[indiceAux++]=ACK;
 8000a84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a8e:	3348      	adds	r3, #72	; 0x48
 8000a90:	443b      	add	r3, r7
 8000a92:	220d      	movs	r2, #13
 8000a94:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x05;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	743b      	strb	r3, [r7, #16]
            break;
 8000a9c:	e029      	b.n	8000af2 <decodeData+0x2be>
            break;
        case LEDS:

            break;
        case PULSADORES:
            auxBuffTx[indiceAux++]=PULSADORES;
 8000a9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000aa8:	3348      	adds	r3, #72	; 0x48
 8000aaa:	443b      	add	r3, r7
 8000aac:	2212      	movs	r2, #18
 8000aae:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[indiceAux++]=myButtons[0].event;
 8000ab2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000abc:	4619      	mov	r1, r3
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <decodeData+0x340>)
 8000ac0:	785a      	ldrb	r2, [r3, #1]
 8000ac2:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8000ac6:	443b      	add	r3, r7
 8000ac8:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x05;
 8000acc:	2305      	movs	r3, #5
 8000ace:	743b      	strb	r3, [r7, #16]
            break;
 8000ad0:	e00f      	b.n	8000af2 <decodeData+0x2be>
//            }
//            auxBuffTx[NBYTES] = 0x0C;
            break;

        default:
            auxBuffTx[indiceAux++]=0xFF;
 8000ad2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000adc:	3348      	adds	r3, #72	; 0x48
 8000ade:	443b      	add	r3, r7
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x04;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	743b      	strb	r3, [r7, #16]
            break;
 8000aea:	e002      	b.n	8000af2 <decodeData+0x2be>
            break;
 8000aec:	bf00      	nop
 8000aee:	e000      	b.n	8000af2 <decodeData+0x2be>
            break;
 8000af0:	bf00      	nop
    }
    cheksum=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    for(uint8_t a=0 ; a<indiceAux ;a++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000afe:	e021      	b.n	8000b44 <decodeData+0x310>
        cheksum ^= auxBuffTx[a];
 8000b00:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b04:	3348      	adds	r3, #72	; 0x48
 8000b06:	443b      	add	r3, r7
 8000b08:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8000b0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000b10:	4053      	eors	r3, r2
 8000b12:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        datosCom->bufferTx[datosCom->indexWriteTx++] = auxBuffTx[a];
 8000b16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	1c59      	adds	r1, r3, #1
 8000b20:	b2c8      	uxtb	r0, r1
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	7108      	strb	r0, [r1, #4]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	440b      	add	r3, r1
 8000b36:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    for(uint8_t a=0 ; a<indiceAux ;a++) {
 8000b3a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b3e:	3301      	adds	r3, #1
 8000b40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000b44:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3d7      	bcc.n	8000b00 <decodeData+0x2cc>
    }
        datosCom->bufferTx[datosCom->indexWriteTx++] = cheksum;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	791b      	ldrb	r3, [r3, #4]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	b2d1      	uxtb	r1, r2
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	7111      	strb	r1, [r2, #4]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000b66:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8000b6a:	bf00      	nop
 8000b6c:	374c      	adds	r7, #76	; 0x4c
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000854 	.word	0x20000854

08000b78 <communicationTask>:

void communicationTask(_sDato *datosCom, uint8_t source){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
    if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	78da      	ldrb	r2, [r3, #3]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	789b      	ldrb	r3, [r3, #2]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d002      	beq.n	8000b96 <communicationTask+0x1e>
        decodeProtocol(datosCom);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fd49 	bl	8000628 <decodeProtocol>
    }
    if(datosCom->indexReadTx!=datosCom->indexWriteTx){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	795a      	ldrb	r2, [r3, #5]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d03a      	beq.n	8000c18 <communicationTask+0xa0>
    	switch (source) {
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d01b      	beq.n	8000be0 <communicationTask+0x68>
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	dc2e      	bgt.n	8000c0a <communicationTask+0x92>
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <communicationTask+0x3e>
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d02c      	beq.n	8000c0e <communicationTask+0x96>
				//CDC_Transmit_FS(&rxUSBData, 1);
				if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], 1) == USBD_OK)
					datosCom->indexReadTx++;
				break;
			default:
				break;
 8000bb4:	e029      	b.n	8000c0a <communicationTask+0x92>
				if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <communicationTask+0xa8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc0:	2b80      	cmp	r3, #128	; 0x80
 8000bc2:	d126      	bne.n	8000c12 <communicationTask+0x9a>
					USART1->DR = datosCom->bufferTx[datosCom->indexReadTx++];
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	795b      	ldrb	r3, [r3, #5]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	b2d1      	uxtb	r1, r2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	7151      	strb	r1, [r2, #5]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <communicationTask+0xac>)
 8000bdc:	605a      	str	r2, [r3, #4]
				break;
 8000bde:	e018      	b.n	8000c12 <communicationTask+0x9a>
				if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], 1) == USBD_OK)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	795b      	ldrb	r3, [r3, #5]
 8000be4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	3306      	adds	r3, #6
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f008 faa9 	bl	8009148 <CDC_Transmit_FS>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10c      	bne.n	8000c16 <communicationTask+0x9e>
					datosCom->indexReadTx++;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	715a      	strb	r2, [r3, #5]
				break;
 8000c08:	e005      	b.n	8000c16 <communicationTask+0x9e>
				break;
 8000c0a:	bf00      	nop
 8000c0c:	e004      	b.n	8000c18 <communicationTask+0xa0>
				break;
 8000c0e:	bf00      	nop
 8000c10:	e002      	b.n	8000c18 <communicationTask+0xa0>
				break;
 8000c12:	bf00      	nop
 8000c14:	e000      	b.n	8000c18 <communicationTask+0xa0>
				break;
 8000c16:	bf00      	nop
		}
    }
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200001e0 	.word	0x200001e0
 8000c24:	40013800 	.word	0x40013800

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fae3 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f883 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f000 f955 	bl	8000ee4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c3a:	f000 f8d9 	bl	8000df0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000c3e:	f000 f927 	bl	8000e90 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000c42:	f008 f975 	bl	8008f30 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachRxData(USBReceive); // Se hace un attach a la funcion USBReceive
 8000c46:	4830      	ldr	r0, [pc, #192]	; (8000d08 <main+0xe0>)
 8000c48:	f008 faa4 	bl	8009194 <CDC_AttachRxData>
  HAL_TIM_Base_Start_IT(&htim1);
 8000c4c:	482f      	ldr	r0, [pc, #188]	; (8000d0c <main+0xe4>)
 8000c4e:	f003 f92d 	bl	8003eac <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <main+0xe8>)
 8000c54:	789b      	ldrb	r3, [r3, #2]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <main+0xe8>)
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3306      	adds	r3, #6
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	482c      	ldr	r0, [pc, #176]	; (8000d14 <main+0xec>)
 8000c64:	f003 fd20 	bl	80046a8 <HAL_UART_Receive_IT>
  //USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &datosComUSB.bufferRx[datosComSerie.indexWriteRx], 0);
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &datosComUSB.bufferTx[datosComSerie.indexWriteRx]);

  time100ms = EQ100MS;
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <main+0xf0>)
 8000c6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c6e:	801a      	strh	r2, [r3, #0]
  time20ms = EQ20MS;
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <main+0xf4>)
 8000c72:	2250      	movs	r2, #80	; 0x50
 8000c74:	701a      	strb	r2, [r3, #0]
  LEDMODE = THREESECONDS;
 8000c76:	4a2a      	ldr	r2, [pc, #168]	; (8000d20 <main+0xf8>)
 8000c78:	7813      	ldrb	r3, [r2, #0]
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	7013      	strb	r3, [r2, #0]
  mask = 0x55555555;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <main+0xfc>)
 8000c82:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000c86:	601a      	str	r2, [r3, #0]
  HBintervalWidth = THREESECONDSINTERVAL;
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <main+0x100>)
 8000c8a:	221d      	movs	r2, #29
 8000c8c:	701a      	strb	r2, [r3, #0]

  mode=IDLE;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <main+0x104>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
  CARSTATUS=RESTING;
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <main+0xf8>)
 8000c96:	7813      	ldrb	r3, [r2, #0]
 8000c98:	f36f 0341 	bfc	r3, #1, #1
 8000c9c:	7013      	strb	r3, [r2, #0]

  for (uint8_t index = 0; index < NUMBUTTONS; index++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e00c      	b.n	8000cbe <main+0x96>
	  inicializaButtons(&myButtons[index]);
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <main+0x108>)
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc60 	bl	8000578 <inicializaButtons>
  for (uint8_t index = 0; index < NUMBUTTONS; index++) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0ef      	beq.n	8000ca4 <main+0x7c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (!time100ms) {
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <main+0xf0>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d107      	bne.n	8000cdc <main+0xb4>
		heartBeat();
 8000ccc:	f7ff fab8 	bl	8000240 <heartBeat>
		imAlive();
 8000cd0:	f7ff fb7c 	bl	80003cc <imAlive>
		time100ms = EQ100MS;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <main+0xf0>)
 8000cd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cda:	801a      	strh	r2, [r3, #0]
	}
	if (!time20ms) {
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <main+0xf4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d104      	bne.n	8000cee <main+0xc6>
		debounceTask();
 8000ce4:	f7ff fc5c 	bl	80005a0 <debounceTask>
		time20ms = EQ20MS;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <main+0xf4>)
 8000cea:	2250      	movs	r2, #80	; 0x50
 8000cec:	701a      	strb	r2, [r3, #0]
	}
	//myWifi.taskWifi();
	communicationTask(&datosComSerie, USART);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <main+0xe8>)
 8000cf2:	f7ff ff41 	bl	8000b78 <communicationTask>
	communicationTask(&datosComWifi, WIFI);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	480e      	ldr	r0, [pc, #56]	; (8000d34 <main+0x10c>)
 8000cfa:	f7ff ff3d 	bl	8000b78 <communicationTask>
	communicationTask(&datosComUSB, USB_MICRO);
 8000cfe:	2102      	movs	r1, #2
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <main+0x110>)
 8000d02:	f7ff ff39 	bl	8000b78 <communicationTask>
	if (!time100ms) {
 8000d06:	e7dd      	b.n	8000cc4 <main+0x9c>
 8000d08:	080001b9 	.word	0x080001b9
 8000d0c:	20000198 	.word	0x20000198
 8000d10:	20000238 	.word	0x20000238
 8000d14:	200001e0 	.word	0x200001e0
 8000d18:	2000022a 	.word	0x2000022a
 8000d1c:	2000022c 	.word	0x2000022c
 8000d20:	20000850 	.word	0x20000850
 8000d24:	20000230 	.word	0x20000230
 8000d28:	20000229 	.word	0x20000229
 8000d2c:	20000228 	.word	0x20000228
 8000d30:	20000854 	.word	0x20000854
 8000d34:	20000440 	.word	0x20000440
 8000d38:	20000648 	.word	0x20000648

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f008 fde8 	bl	8009920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fb74 	bl	8003480 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d9e:	f000 f907 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fde0 	bl	8003984 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dca:	f000 f8f1 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dce:	2310      	movs	r3, #16
 8000dd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 ff61 	bl	8003ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000de4:	f000 f8e4 	bl	8000fb0 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3750      	adds	r7, #80	; 0x50
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <MX_TIM1_Init+0x9c>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e14:	2247      	movs	r2, #71	; 0x47
 8000e16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e20:	22fa      	movs	r2, #250	; 0xfa
 8000e22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e36:	4814      	ldr	r0, [pc, #80]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e38:	f002 ffe8 	bl	8003e0c <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000e42:	f000 f8b5 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e54:	f003 f984 	bl	8004160 <HAL_TIM_ConfigClockSource>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000e5e:	f000 f8a7 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM1_Init+0x98>)
 8000e70:	f003 fb5a 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000e7a:	f000 f899 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000198 	.word	0x20000198
 8000e8c:	40012c00 	.word	0x40012c00

08000e90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_USART1_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ec8:	f003 fb9e 	bl	8004608 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f000 f86d 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001e0 	.word	0x200001e0
 8000ee0:	40013800 	.word	0x40013800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f60:	f000 fd07 	bl	8001972 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f7e:	f000 fb5d 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_GPIO_Init+0xc8>)
 8000f98:	f000 fb50 	bl	800163c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x60>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_MspInit+0x60>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_TIM_Base_MspInit+0x44>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2019      	movs	r0, #25
 8001050:	f000 fa0b 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001054:	2019      	movs	r0, #25
 8001056:	f000 fa24 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40012c00 	.word	0x40012c00
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_UART_MspInit+0x9c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d139      	bne.n	8001100 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_UART_MspInit+0xa0>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_UART_MspInit+0xa0>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_UART_MspInit+0xa0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_UART_MspInit+0xa0>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_UART_MspInit+0xa0>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_UART_MspInit+0xa0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <HAL_UART_MspInit+0xa4>)
 80010d2:	f000 fab3 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <HAL_UART_MspInit+0xa4>)
 80010ec:	f000 faa6 	bl	800163c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2025      	movs	r0, #37	; 0x25
 80010f6:	f000 f9b8 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010fa:	2025      	movs	r0, #37	; 0x25
 80010fc:	f000 f9d1 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013800 	.word	0x40013800
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115a:	f000 f893 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800116a:	f000 fd3f 	bl	8001bec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000f3c 	.word	0x20000f3c

08001178 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM1_UP_IRQHandler+0x10>)
 800117e:	f002 fee7 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000198 	.word	0x20000198

0800118c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <USART1_IRQHandler+0x10>)
 8001192:	f003 faaf 	bl	80046f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001e0 	.word	0x200001e0

080011a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff fff8 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b2:	490c      	ldr	r1, [pc, #48]	; (80011e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c8:	4c09      	ldr	r4, [pc, #36]	; (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f008 fbab 	bl	8009930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fd25 	bl	8000c28 <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80011e8:	08009a28 	.word	0x08009a28
  ldr r2, =_sbss
 80011ec:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80011f0:	2000144c 	.word	0x2000144c

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f923 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fed2 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f93b 	bl	80014be <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f903 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000864 	.word	0x20000864

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000864 	.word	0x20000864

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4906      	ldr	r1, [pc, #24]	; (8001354 <__NVIC_EnableIRQ+0x34>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff90 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff2d 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff42 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff35 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e020      	b.n	8001542 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020e 	bic.w	r2, r2, #14
 800150e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d005      	beq.n	8001570 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2204      	movs	r2, #4
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e051      	b.n	8001614 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020e 	bic.w	r2, r2, #14
 800157e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a22      	ldr	r2, [pc, #136]	; (8001620 <HAL_DMA_Abort_IT+0xd4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d029      	beq.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a21      	ldr	r2, [pc, #132]	; (8001624 <HAL_DMA_Abort_IT+0xd8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d022      	beq.n	80015ea <HAL_DMA_Abort_IT+0x9e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_DMA_Abort_IT+0xdc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01a      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x98>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <HAL_DMA_Abort_IT+0xe0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d012      	beq.n	80015de <HAL_DMA_Abort_IT+0x92>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_DMA_Abort_IT+0xe4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00a      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x8c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_DMA_Abort_IT+0xe8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d102      	bne.n	80015d2 <HAL_DMA_Abort_IT+0x86>
 80015cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015d0:	e00e      	b.n	80015f0 <HAL_DMA_Abort_IT+0xa4>
 80015d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d6:	e00b      	b.n	80015f0 <HAL_DMA_Abort_IT+0xa4>
 80015d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015dc:	e008      	b.n	80015f0 <HAL_DMA_Abort_IT+0xa4>
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	e005      	b.n	80015f0 <HAL_DMA_Abort_IT+0xa4>
 80015e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e8:	e002      	b.n	80015f0 <HAL_DMA_Abort_IT+0xa4>
 80015ea:	2310      	movs	r3, #16
 80015ec:	e000      	b.n	80015f0 <HAL_DMA_Abort_IT+0xa4>
 80015ee:	2301      	movs	r3, #1
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_DMA_Abort_IT+0xec>)
 80015f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
    } 
  }
  return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40020008 	.word	0x40020008
 8001624:	4002001c 	.word	0x4002001c
 8001628:	40020030 	.word	0x40020030
 800162c:	40020044 	.word	0x40020044
 8001630:	40020058 	.word	0x40020058
 8001634:	4002006c 	.word	0x4002006c
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e169      	b.n	8001924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001650:	2201      	movs	r2, #1
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8158 	bne.w	800191e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a9a      	ldr	r2, [pc, #616]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d05e      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001678:	4a98      	ldr	r2, [pc, #608]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d875      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800167e:	4a98      	ldr	r2, [pc, #608]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d058      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001684:	4a96      	ldr	r2, [pc, #600]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d86f      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800168a:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <HAL_GPIO_Init+0x2a8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d052      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001690:	4a94      	ldr	r2, [pc, #592]	; (80018e4 <HAL_GPIO_Init+0x2a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d869      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 8001696:	4a94      	ldr	r2, [pc, #592]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d04c      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 800169c:	4a92      	ldr	r2, [pc, #584]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d863      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016a2:	4a92      	ldr	r2, [pc, #584]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d046      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 80016a8:	4a90      	ldr	r2, [pc, #576]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d85d      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d82a      	bhi.n	8001708 <HAL_GPIO_Init+0xcc>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d859      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_GPIO_Init+0x80>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001711 	.word	0x08001711
 80016c4:	08001723 	.word	0x08001723
 80016c8:	08001765 	.word	0x08001765
 80016cc:	0800176b 	.word	0x0800176b
 80016d0:	0800176b 	.word	0x0800176b
 80016d4:	0800176b 	.word	0x0800176b
 80016d8:	0800176b 	.word	0x0800176b
 80016dc:	0800176b 	.word	0x0800176b
 80016e0:	0800176b 	.word	0x0800176b
 80016e4:	0800176b 	.word	0x0800176b
 80016e8:	0800176b 	.word	0x0800176b
 80016ec:	0800176b 	.word	0x0800176b
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	0800176b 	.word	0x0800176b
 80016f8:	0800176b 	.word	0x0800176b
 80016fc:	0800176b 	.word	0x0800176b
 8001700:	08001719 	.word	0x08001719
 8001704:	0800172d 	.word	0x0800172d
 8001708:	4a79      	ldr	r2, [pc, #484]	; (80018f0 <HAL_GPIO_Init+0x2b4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800170e:	e02c      	b.n	800176a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e029      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e024      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	3308      	adds	r3, #8
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e01f      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	330c      	adds	r3, #12
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e01a      	b.n	800176c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173e:	2304      	movs	r3, #4
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e013      	b.n	800176c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	611a      	str	r2, [r3, #16]
          break;
 8001756:	e009      	b.n	800176c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	615a      	str	r2, [r3, #20]
          break;
 8001762:	e003      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x130>
          break;
 800176a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d801      	bhi.n	8001776 <HAL_GPIO_Init+0x13a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e001      	b.n	800177a <HAL_GPIO_Init+0x13e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d802      	bhi.n	8001788 <HAL_GPIO_Init+0x14c>
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x152>
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3b08      	subs	r3, #8
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	210f      	movs	r1, #15
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	6a39      	ldr	r1, [r7, #32]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80b1 	beq.w	800191e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d4:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_GPIO_Init+0x2bc>)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_GPIO_Init+0x1ec>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3f      	ldr	r2, [pc, #252]	; (8001900 <HAL_GPIO_Init+0x2c4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_Init+0x1e8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a3e      	ldr	r2, [pc, #248]	; (8001904 <HAL_GPIO_Init+0x2c8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x1e4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_GPIO_Init+0x2cc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_Init+0x1e0>
 8001818:	2303      	movs	r3, #3
 800181a:	e006      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 800181c:	2304      	movs	r3, #4
 800181e:	e004      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 8001820:	2302      	movs	r3, #2
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 8001828:	2300      	movs	r3, #0
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4093      	lsls	r3, r2
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183a:	492f      	ldr	r1, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x2bc>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	492c      	ldr	r1, [pc, #176]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4928      	ldr	r1, [pc, #160]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800186c:	4013      	ands	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4922      	ldr	r1, [pc, #136]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	491e      	ldr	r1, [pc, #120]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4918      	ldr	r1, [pc, #96]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4914      	ldr	r1, [pc, #80]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d021      	beq.n	8001910 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e021      	b.n	800191e <HAL_GPIO_Init+0x2e2>
 80018da:	bf00      	nop
 80018dc:	10320000 	.word	0x10320000
 80018e0:	10310000 	.word	0x10310000
 80018e4:	10220000 	.word	0x10220000
 80018e8:	10210000 	.word	0x10210000
 80018ec:	10120000 	.word	0x10120000
 80018f0:	10110000 	.word	0x10110000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00
 8001904:	40011000 	.word	0x40011000
 8001908:	40011400 	.word	0x40011400
 800190c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_GPIO_Init+0x304>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	43db      	mvns	r3, r3
 8001918:	4909      	ldr	r1, [pc, #36]	; (8001940 <HAL_GPIO_Init+0x304>)
 800191a:	4013      	ands	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	3301      	adds	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	f47f ae8e 	bne.w	8001650 <HAL_GPIO_Init+0x14>
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	372c      	adds	r7, #44	; 0x2c
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001982:	787b      	ldrb	r3, [r7, #1]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800198e:	e003      	b.n	8001998 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	041a      	lsls	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a4:	b08b      	sub	sp, #44	; 0x2c
 80019a6:	af06      	add	r7, sp, #24
 80019a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0f1      	b.n	8001b98 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d106      	bne.n	80019ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f007 fcff 	bl	80093cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2203      	movs	r2, #3
 80019d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fbc2 	bl	8005164 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	687e      	ldr	r6, [r7, #4]
 80019e8:	466d      	mov	r5, sp
 80019ea:	f106 0410 	add.w	r4, r6, #16
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	602b      	str	r3, [r5, #0]
 80019f6:	1d33      	adds	r3, r6, #4
 80019f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f003 fb8c 	bl	8005118 <USB_CoreInit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0c2      	b.n	8001b98 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fbbd 	bl	8005198 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e040      	b.n	8001aa6 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3301      	adds	r3, #1
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3303      	adds	r3, #3
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3338      	adds	r3, #56	; 0x38
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	333c      	adds	r3, #60	; 0x3c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3340      	adds	r3, #64	; 0x40
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3b9      	bcc.n	8001a24 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e044      	b.n	8001b40 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3b5      	bcc.n	8001ab6 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	687e      	ldr	r6, [r7, #4]
 8001b52:	466d      	mov	r5, sp
 8001b54:	f106 0410 	add.w	r4, r6, #16
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	602b      	str	r3, [r5, #0]
 8001b60:	1d33      	adds	r3, r6, #4
 8001b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f003 fb23 	bl	80051b0 <USB_DevInit>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e00d      	b.n	8001b98 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f005 fda4 	bl	80076de <USB_DevDisconnect>

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_Start+0x16>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e016      	b.n	8001be4 <HAL_PCD_Start+0x44>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fab8 	bl	8005138 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f007 fe71 	bl	80098b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f005 fd78 	bl	80076ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f005 fd7a 	bl	80076f2 <USB_ReadInterrupts>
 8001bfe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fb1b 	bl	8002246 <PCD_EP_ISR_Handler>

    return;
 8001c10:	e119      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f007 fc44 	bl	80094c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f905 	bl	8001e4c <HAL_PCD_SetAddress>

    return;
 8001c42:	e100      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c60:	b292      	uxth	r2, r2
 8001c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c66:	e0ee      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c8a:	e0dc      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d027      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0204 	bic.w	r2, r2, #4
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	b292      	uxth	r2, r2
 8001cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f007 fc34 	bl	8009534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ce4:	e0af      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8083 	beq.w	8001df8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	77fb      	strb	r3, [r7, #31]
 8001cf6:	e010      	b.n	8001d1a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	441a      	add	r2, r3
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	443b      	add	r3, r7
 8001d10:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
 8001d16:	3301      	adds	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]
 8001d1a:	7ffb      	ldrb	r3, [r7, #31]
 8001d1c:	2b07      	cmp	r3, #7
 8001d1e:	d9eb      	bls.n	8001cf8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d50:	bf00      	nop
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f6      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d76:	b292      	uxth	r2, r2
 8001d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	77fb      	strb	r3, [r7, #31]
 8001d80:	e00f      	b.n	8001da2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	7ffa      	ldrb	r2, [r7, #31]
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	440a      	add	r2, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	3320      	adds	r3, #32
 8001d94:	443b      	add	r3, r7
 8001d96:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d9a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	77fb      	strb	r3, [r7, #31]
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	2b07      	cmp	r3, #7
 8001da6:	d9ec      	bls.n	8001d82 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0208 	orr.w	r2, r2, #8
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0204 	orr.w	r2, r2, #4
 8001dea:	b292      	uxth	r2, r2
 8001dec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f007 fb85 	bl	8009500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001df6:	e026      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00f      	beq.n	8001e22 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e14:	b292      	uxth	r2, r2
 8001e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f007 fb43 	bl	80094a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e20:	e011      	b.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00c      	beq.n	8001e46 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e44:	bf00      	nop
  }
}
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_PCD_SetAddress+0x1a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e013      	b.n	8001e8e <HAL_PCD_SetAddress+0x42>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f005 fc10 	bl	80076a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	70fb      	strb	r3, [r7, #3]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	803b      	strh	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0e      	bge.n	8001eda <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 0207 	and.w	r2, r3, #7
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f04:	883a      	ldrh	r2, [r7, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	78ba      	ldrb	r2, [r7, #2]
 8001f0e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d102      	bne.n	8001f1c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_EP_Open+0x94>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e00e      	b.n	8001f48 <HAL_PCD_EP_Open+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 f959 	bl	80051f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f46:	7afb      	ldrb	r3, [r7, #11]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da0e      	bge.n	8001f82 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	705a      	strb	r2, [r3, #1]
 8001f80:	e00e      	b.n	8001fa0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 0207 	and.w	r2, r3, #7
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_PCD_EP_Close+0x6a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e00e      	b.n	8001fd8 <HAL_PCD_EP_Close+0x88>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fcd1 	bl	8005970 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	b2da      	uxtb	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6979      	ldr	r1, [r7, #20]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fe88 	bl	8005d48 <USB_EPStartXfer>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0207 	and.w	r2, r3, #7
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002064:	681b      	ldr	r3, [r3, #0]
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	460b      	mov	r3, r1
 800207e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2201      	movs	r2, #1
 80020ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6979      	ldr	r1, [r7, #20]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fe3a 	bl	8005d48 <USB_EPStartXfer>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 0207 	and.w	r2, r3, #7
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d901      	bls.n	80020fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04c      	b.n	8002196 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da0e      	bge.n	8002122 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	705a      	strb	r2, [r3, #1]
 8002120:	e00c      	b.n	800213c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_PCD_EP_SetStall+0x7e>
 8002158:	2302      	movs	r3, #2
 800215a:	e01c      	b.n	8002196 <HAL_PCD_EP_SetStall+0xb8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	4618      	mov	r0, r3
 800216c:	f005 f99d 	bl	80074aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f005 fac2 	bl	8007710 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d901      	bls.n	80021bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e040      	b.n	800223e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da0e      	bge.n	80021e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	705a      	strb	r2, [r3, #1]
 80021e0:	e00e      	b.n	8002200 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 0207 	and.w	r2, r3, #7
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_EP_ClrStall+0x82>
 800221c:	2302      	movs	r3, #2
 800221e:	e00e      	b.n	800223e <HAL_PCD_EP_ClrStall+0xa0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	4618      	mov	r0, r3
 8002230:	f005 f98b 	bl	800754a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b096      	sub	sp, #88	; 0x58
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800224e:	e3bf      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800225c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800226a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8179 	bne.w	8002566 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002274:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d152      	bne.n	8002326 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800228c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002290:	81fb      	strh	r3, [r7, #14]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800229c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3328      	adds	r3, #40	; 0x28
 80022a8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	3302      	adds	r3, #2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	441a      	add	r2, r3
 80022e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022e4:	2100      	movs	r1, #0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f007 f8c3 	bl	8009472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 836b 	beq.w	80029d0 <PCD_EP_ISR_Handler+0x78a>
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8366 	bne.w	80029d0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002310:	b2da      	uxtb	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002324:	e354      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800232c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002338:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800233c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002340:	2b00      	cmp	r3, #0
 8002342:	d034      	beq.n	80023ae <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	3306      	adds	r3, #6
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800237e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002380:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002382:	b29b      	uxth	r3, r3
 8002384:	f005 fa14 	bl	80077b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002394:	4013      	ands	r3, r2
 8002396:	823b      	strh	r3, [r7, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	8a3a      	ldrh	r2, [r7, #16]
 800239e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a2:	b292      	uxth	r2, r2
 80023a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f007 f836 	bl	8009418 <HAL_PCD_SetupStageCallback>
 80023ac:	e310      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f280 830c 	bge.w	80029d0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023c4:	4013      	ands	r3, r2
 80023c6:	83fb      	strh	r3, [r7, #30]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	8bfa      	ldrh	r2, [r7, #30]
 80023ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d2:	b292      	uxth	r2, r2
 80023d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	3306      	adds	r3, #6
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002400:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d019      	beq.n	800243e <PCD_EP_ISR_Handler+0x1f8>
 800240a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	6959      	ldr	r1, [r3, #20]
 800241a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002422:	b29b      	uxth	r3, r3
 8002424:	f005 f9c4 	bl	80077b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	441a      	add	r2, r3
 8002432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002434:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002436:	2100      	movs	r1, #0
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f006 ffff 	bl	800943c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002448:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 82bd 	bne.w	80029d0 <PCD_EP_ISR_Handler+0x78a>
 8002456:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800245a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800245e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002462:	f000 82b5 	beq.w	80029d0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4413      	add	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002490:	b29a      	uxth	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b3e      	cmp	r3, #62	; 0x3e
 800249c:	d91d      	bls.n	80024da <PCD_EP_ISR_Handler+0x294>
 800249e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <PCD_EP_ISR_Handler+0x272>
 80024b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b4:	3b01      	subs	r3, #1
 80024b6:	647b      	str	r3, [r7, #68]	; 0x44
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	e026      	b.n	8002528 <PCD_EP_ISR_Handler+0x2e2>
 80024da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <PCD_EP_ISR_Handler+0x2b2>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e017      	b.n	8002528 <PCD_EP_ISR_Handler+0x2e2>
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <PCD_EP_ISR_Handler+0x2cc>
 800250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250e:	3301      	adds	r3, #1
 8002510:	647b      	str	r3, [r7, #68]	; 0x44
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29a      	uxth	r2, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251a:	b29b      	uxth	r3, r3
 800251c:	029b      	lsls	r3, r3, #10
 800251e:	b29b      	uxth	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	b29a      	uxth	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002538:	827b      	strh	r3, [r7, #18]
 800253a:	8a7b      	ldrh	r3, [r7, #18]
 800253c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002540:	827b      	strh	r3, [r7, #18]
 8002542:	8a7b      	ldrh	r3, [r7, #18]
 8002544:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002548:	827b      	strh	r3, [r7, #18]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	8a7b      	ldrh	r3, [r7, #18]
 8002550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	b29b      	uxth	r3, r3
 8002562:	8013      	strh	r3, [r2, #0]
 8002564:	e234      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800257a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800257e:	2b00      	cmp	r3, #0
 8002580:	f280 80fc 	bge.w	800277c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29a      	uxth	r2, r3
 8002596:	f640 738f 	movw	r3, #3983	; 0xf8f
 800259a:	4013      	ands	r3, r2
 800259c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80025b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b6:	b292      	uxth	r2, r2
 80025b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025ba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d2:	7b1b      	ldrb	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d125      	bne.n	8002624 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	3306      	adds	r3, #6
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002600:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002604:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8092 	beq.w	8002732 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002614:	6959      	ldr	r1, [r3, #20]
 8002616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002618:	88da      	ldrh	r2, [r3, #6]
 800261a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800261e:	f005 f8c7 	bl	80077b0 <USB_ReadPMA>
 8002622:	e086      	b.n	8002732 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d10a      	bne.n	8002642 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800262c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002630:	461a      	mov	r2, r3
 8002632:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f9d9 	bl	80029ec <HAL_PCD_EP_DB_Receive>
 800263a:	4603      	mov	r3, r0
 800263c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002640:	e077      	b.n	8002732 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800267a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002682:	b29b      	uxth	r3, r3
 8002684:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d024      	beq.n	80026ea <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	3302      	adds	r3, #2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80026cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02e      	beq.n	8002732 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	6959      	ldr	r1, [r3, #20]
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	891a      	ldrh	r2, [r3, #8]
 80026e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026e4:	f005 f864 	bl	80077b0 <USB_ReadPMA>
 80026e8:	e023      	b.n	8002732 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	3306      	adds	r3, #6
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002712:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002716:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	6959      	ldr	r1, [r3, #20]
 8002726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002728:	895a      	ldrh	r2, [r3, #10]
 800272a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800272e:	f005 f83f 	bl	80077b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800273a:	441a      	add	r2, r3
 800273c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002748:	441a      	add	r2, r3
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <PCD_EP_ISR_Handler+0x51c>
 8002756:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d206      	bcs.n	8002770 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f006 fe67 	bl	800943c <HAL_PCD_DataOutStageCallback>
 800276e:	e005      	b.n	800277c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fae6 	bl	8005d48 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800277c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8123 	beq.w	80029d0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800278a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80027ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	78db      	ldrb	r3, [r3, #3]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 80a2 	bne.w	8002928 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80027e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	7b1b      	ldrb	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8093 	beq.w	800291a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d046      	beq.n	800288e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d126      	bne.n	8002856 <PCD_EP_ISR_Handler+0x610>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	4413      	add	r3, r2
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	011a      	lsls	r2, r3, #4
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	4413      	add	r3, r2
 800282a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	b29a      	uxth	r2, r3
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800284a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284e:	b29a      	uxth	r2, r3
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	e061      	b.n	800291a <PCD_EP_ISR_Handler+0x6d4>
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d15d      	bne.n	800291a <PCD_EP_ISR_Handler+0x6d4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	4413      	add	r3, r2
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	011a      	lsls	r2, r3, #4
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	4413      	add	r3, r2
 8002880:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	2200      	movs	r2, #0
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e045      	b.n	800291a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d126      	bne.n	80028ea <PCD_EP_ISR_Handler+0x6a4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	4413      	add	r3, r2
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	011a      	lsls	r2, r3, #4
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	4413      	add	r3, r2
 80028be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	801a      	strh	r2, [r3, #0]
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	e017      	b.n	800291a <PCD_EP_ISR_Handler+0x6d4>
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	785b      	ldrb	r3, [r3, #1]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d113      	bne.n	800291a <PCD_EP_ISR_Handler+0x6d4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002900:	4413      	add	r3, r2
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	011a      	lsls	r2, r3, #4
 800290a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290c:	4413      	add	r3, r2
 800290e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800291a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f006 fda6 	bl	8009472 <HAL_PCD_DataInStageCallback>
 8002926:	e053      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002928:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d146      	bne.n	80029c2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293c:	b29b      	uxth	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	3302      	adds	r3, #2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002968:	429a      	cmp	r2, r3
 800296a:	d907      	bls.n	800297c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	e002      	b.n	8002982 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f006 fd6e 	bl	8009472 <HAL_PCD_DataInStageCallback>
 8002996:	e01b      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029a0:	441a      	add	r2, r3
 80029a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80029a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029ae:	441a      	add	r2, r3
 80029b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f9c4 	bl	8005d48 <USB_EPStartXfer>
 80029c0:	e006      	b.n	80029d0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029c6:	461a      	mov	r2, r3
 80029c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f91b 	bl	8002c06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b21b      	sxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f6ff ac37 	blt.w	8002250 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3758      	adds	r7, #88	; 0x58
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d07e      	beq.n	8002b02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	8b7b      	ldrh	r3, [r7, #26]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d306      	bcc.n	8002a46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	8b7b      	ldrh	r3, [r7, #26]
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	619a      	str	r2, [r3, #24]
 8002a44:	e002      	b.n	8002a4c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d123      	bne.n	8002a9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	833b      	strh	r3, [r7, #24]
 8002a70:	8b3b      	ldrh	r3, [r7, #24]
 8002a72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a76:	833b      	strh	r3, [r7, #24]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	8b3b      	ldrh	r3, [r7, #24]
 8002a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01f      	beq.n	8002ae6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac0:	82fb      	strh	r3, [r7, #22]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	441a      	add	r2, r3
 8002ad0:	8afb      	ldrh	r3, [r7, #22]
 8002ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ade:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ae6:	8b7b      	ldrh	r3, [r7, #26]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8087 	beq.w	8002bfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6959      	ldr	r1, [r3, #20]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	891a      	ldrh	r2, [r3, #8]
 8002afa:	8b7b      	ldrh	r3, [r7, #26]
 8002afc:	f004 fe58 	bl	80077b0 <USB_ReadPMA>
 8002b00:	e07c      	b.n	8002bfc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	3306      	adds	r3, #6
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	8b7b      	ldrh	r3, [r7, #26]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d306      	bcc.n	8002b44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	8b7b      	ldrh	r3, [r7, #26]
 8002b3c:	1ad2      	subs	r2, r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	619a      	str	r2, [r3, #24]
 8002b42:	e002      	b.n	8002b4a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d123      	bne.n	8002b9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	83fb      	strh	r3, [r7, #30]
 8002b6e:	8bfb      	ldrh	r3, [r7, #30]
 8002b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b74:	83fb      	strh	r3, [r7, #30]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	441a      	add	r2, r3
 8002b84:	8bfb      	ldrh	r3, [r7, #30]
 8002b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d11f      	bne.n	8002be4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	83bb      	strh	r3, [r7, #28]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	8bbb      	ldrh	r3, [r7, #28]
 8002bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002be4:	8b7b      	ldrh	r3, [r7, #26]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	895a      	ldrh	r2, [r3, #10]
 8002bf6:	8b7b      	ldrh	r3, [r7, #26]
 8002bf8:	f004 fdda 	bl	80077b0 <USB_ReadPMA>
    }
  }

  return count;
 8002bfc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b0a4      	sub	sp, #144	; 0x90
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81dd 	beq.w	8002fda <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	3302      	adds	r3, #2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c48:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d907      	bls.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c60:	1ad2      	subs	r2, r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	619a      	str	r2, [r3, #24]
 8002c66:	e002      	b.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80b9 	bne.w	8002dea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d126      	bne.n	8002cce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	4413      	add	r3, r2
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	e01a      	b.n	8002d04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d116      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	4413      	add	r3, r2
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	011a      	lsls	r2, r3, #4
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2200      	movs	r2, #0
 8002d02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d126      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	011a      	lsls	r2, r3, #4
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	e017      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d113      	bne.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	4413      	add	r3, r2
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	011a      	lsls	r2, r3, #4
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	4413      	add	r3, r2
 8002d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f006 fb6b 	bl	8009472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 82fc 	beq.w	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	82fb      	strh	r3, [r7, #22]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	8afb      	ldrh	r3, [r7, #22]
 8002dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	8013      	strh	r3, [r2, #0]
 8002de8:	e2da      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d021      	beq.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	f040 82ae 	bne.w	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e4c:	441a      	add	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6a1a      	ldr	r2, [r3, #32]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d30b      	bcc.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e7c:	1ad2      	subs	r2, r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	621a      	str	r2, [r3, #32]
 8002e82:	e017      	b.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d108      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002e8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e9c:	e00a      	b.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d165      	bne.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x382>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed0:	4413      	add	r3, r2
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	011a      	lsls	r2, r3, #4
 8002eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002edc:	4413      	add	r3, r2
 8002ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8002efa:	d91d      	bls.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x332>
 8002efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <HAL_PCD_EP_DB_Transmit+0x310>
 8002f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f12:	3b01      	subs	r3, #1
 8002f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	029b      	lsls	r3, r3, #10
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	e044      	b.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x350>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	e035      	b.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	801a      	strh	r2, [r3, #0]
 8002f86:	e01c      	b.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d118      	bne.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa4:	4413      	add	r3, r2
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	011a      	lsls	r2, r3, #4
 8002fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6959      	ldr	r1, [r3, #20]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	891a      	ldrh	r2, [r3, #8]
 8002fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f004 fba7 	bl	8007726 <USB_WritePMA>
 8002fd8:	e1e2      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	3306      	adds	r3, #6
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003002:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800300e:	429a      	cmp	r2, r3
 8003010:	d307      	bcc.n	8003022 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800301a:	1ad2      	subs	r2, r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	619a      	str	r2, [r3, #24]
 8003020:	e002      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 80c0 	bne.w	80031b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d126      	bne.n	8003088 <HAL_PCD_EP_DB_Transmit+0x482>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800304e:	4413      	add	r3, r2
 8003050:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	011a      	lsls	r2, r3, #4
 8003058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800305a:	4413      	add	r3, r2
 800305c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003060:	67bb      	str	r3, [r7, #120]	; 0x78
 8003062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306c:	b29a      	uxth	r2, r3
 800306e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003080:	b29a      	uxth	r2, r3
 8003082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	e01a      	b.n	80030be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d116      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	667b      	str	r3, [r7, #100]	; 0x64
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a4:	4413      	add	r3, r2
 80030a6:	667b      	str	r3, [r7, #100]	; 0x64
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	011a      	lsls	r2, r3, #4
 80030ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b0:	4413      	add	r3, r2
 80030b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
 80030b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ba:	2200      	movs	r2, #0
 80030bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	677b      	str	r3, [r7, #116]	; 0x74
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d12b      	bne.n	8003124 <HAL_PCD_EP_DB_Transmit+0x51e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	4413      	add	r3, r2
 80030e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	011a      	lsls	r2, r3, #4
 80030ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003102:	b29a      	uxth	r2, r3
 8003104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311a:	b29a      	uxth	r2, r3
 800311c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e017      	b.n	8003154 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d113      	bne.n	8003154 <HAL_PCD_EP_DB_Transmit+0x54e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313a:	4413      	add	r3, r2
 800313c:	677b      	str	r3, [r7, #116]	; 0x74
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	011a      	lsls	r2, r3, #4
 8003144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003146:	4413      	add	r3, r2
 8003148:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800314c:	673b      	str	r3, [r7, #112]	; 0x70
 800314e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003150:	2200      	movs	r2, #0
 8003152:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f006 f989 	bl	8009472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 811a 	bne.w	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800319c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	8013      	strh	r3, [r2, #0]
 80031b0:	e0f6      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d121      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 80ca 	bne.w	80033a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003214:	441a      	add	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003222:	441a      	add	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d30b      	bcc.n	800324c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	621a      	str	r2, [r3, #32]
 800324a:	e017      	b.n	800327c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003254:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003264:	e00a      	b.n	800327c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	657b      	str	r3, [r7, #84]	; 0x54
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	785b      	ldrb	r3, [r3, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d165      	bne.n	8003356 <HAL_PCD_EP_DB_Transmit+0x750>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003298:	b29b      	uxth	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329e:	4413      	add	r3, r2
 80032a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	011a      	lsls	r2, r3, #4
 80032a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032aa:	4413      	add	r3, r2
 80032ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c6:	2b3e      	cmp	r3, #62	; 0x3e
 80032c8:	d91d      	bls.n	8003306 <HAL_PCD_EP_DB_Transmit+0x700>
 80032ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80032de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e0:	3b01      	subs	r3, #1
 80032e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	029b      	lsls	r3, r3, #10
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003302:	801a      	strh	r2, [r3, #0]
 8003304:	e041      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x784>
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <HAL_PCD_EP_DB_Transmit+0x71e>
 800330e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800331c:	b29a      	uxth	r2, r3
 800331e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	e032      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x784>
 8003324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	66bb      	str	r3, [r7, #104]	; 0x68
 800332c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_PCD_EP_DB_Transmit+0x738>
 8003338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800333a:	3301      	adds	r3, #1
 800333c:	66bb      	str	r3, [r7, #104]	; 0x68
 800333e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29a      	uxth	r2, r3
 8003344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003346:	b29b      	uxth	r3, r3
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	b29b      	uxth	r3, r3
 800334c:	4313      	orrs	r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	e019      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x784>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d115      	bne.n	800338a <HAL_PCD_EP_DB_Transmit+0x784>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800336c:	4413      	add	r3, r2
 800336e:	657b      	str	r3, [r7, #84]	; 0x54
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	011a      	lsls	r2, r3, #4
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	4413      	add	r3, r2
 800337a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800337e:	653b      	str	r3, [r7, #80]	; 0x50
 8003380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003384:	b29a      	uxth	r2, r3
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6959      	ldr	r1, [r3, #20]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	895a      	ldrh	r2, [r3, #10]
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	b29b      	uxth	r3, r3
 800339c:	f004 f9c3 	bl	8007726 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ba:	82bb      	strh	r3, [r7, #20]
 80033bc:	8abb      	ldrh	r3, [r7, #20]
 80033be:	f083 0310 	eor.w	r3, r3, #16
 80033c2:	82bb      	strh	r3, [r7, #20]
 80033c4:	8abb      	ldrh	r3, [r7, #20]
 80033c6:	f083 0320 	eor.w	r3, r3, #32
 80033ca:	82bb      	strh	r3, [r7, #20]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	8abb      	ldrh	r3, [r7, #20]
 80033dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3790      	adds	r7, #144	; 0x90
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b087      	sub	sp, #28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	817b      	strh	r3, [r7, #10]
 8003408:	4613      	mov	r3, r2
 800340a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800340c:	897b      	ldrh	r3, [r7, #10]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003418:	897b      	ldrh	r3, [r7, #10]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e009      	b.n	8003444 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003430:	897a      	ldrh	r2, [r7, #10]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4413      	add	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	b29a      	uxth	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	80da      	strh	r2, [r3, #6]
 8003458:	e00b      	b.n	8003472 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2201      	movs	r2, #1
 800345e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	b29a      	uxth	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	b29a      	uxth	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
	...

08003480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e272      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8087 	beq.w	80035ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a0:	4b92      	ldr	r3, [pc, #584]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d00c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034ac:	4b8f      	ldr	r3, [pc, #572]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d112      	bne.n	80034de <HAL_RCC_OscConfig+0x5e>
 80034b8:	4b8c      	ldr	r3, [pc, #560]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d10b      	bne.n	80034de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c6:	4b89      	ldr	r3, [pc, #548]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d06c      	beq.n	80035ac <HAL_RCC_OscConfig+0x12c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d168      	bne.n	80035ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e24c      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x76>
 80034e8:	4b80      	ldr	r3, [pc, #512]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7f      	ldr	r2, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e02e      	b.n	8003554 <HAL_RCC_OscConfig+0xd4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x98>
 80034fe:	4b7b      	ldr	r3, [pc, #492]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7a      	ldr	r2, [pc, #488]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b78      	ldr	r3, [pc, #480]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a77      	ldr	r2, [pc, #476]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e01d      	b.n	8003554 <HAL_RCC_OscConfig+0xd4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0xbc>
 8003522:	4b72      	ldr	r3, [pc, #456]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a71      	ldr	r2, [pc, #452]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a6e      	ldr	r2, [pc, #440]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0xd4>
 800353c:	4b6b      	ldr	r3, [pc, #428]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6a      	ldr	r2, [pc, #424]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a67      	ldr	r2, [pc, #412]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd fea4 	bl	80012a8 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fd fea0 	bl	80012a8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e200      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b5d      	ldr	r3, [pc, #372]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0xe4>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd fe90 	bl	80012a8 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fd fe8c 	bl	80012a8 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1ec      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x10c>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d063      	beq.n	8003682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ba:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035c6:	4b49      	ldr	r3, [pc, #292]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11c      	bne.n	800360c <HAL_RCC_OscConfig+0x18c>
 80035d2:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x176>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1c0      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4939      	ldr	r1, [pc, #228]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	e03a      	b.n	8003682 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fd fe45 	bl	80012a8 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003622:	f7fd fe41 	bl	80012a8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1a1      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4927      	ldr	r1, [pc, #156]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
 8003654:	e015      	b.n	8003682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fe24 	bl	80012a8 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003664:	f7fd fe20 	bl	80012a8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e180      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d03a      	beq.n	8003704 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d019      	beq.n	80036ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fd fe04 	bl	80012a8 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fd fe00 	bl	80012a8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e160      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_RCC_OscConfig+0x26c>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f000 face 	bl	8003c64 <RCC_Delay>
 80036c8:	e01c      	b.n	8003704 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fd fdea 	bl	80012a8 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d6:	e00f      	b.n	80036f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fd fde6 	bl	80012a8 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d908      	bls.n	80036f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e146      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	42420000 	.word	0x42420000
 80036f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f8:	4b92      	ldr	r3, [pc, #584]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e9      	bne.n	80036d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80a6 	beq.w	800385e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003716:	4b8b      	ldr	r3, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a87      	ldr	r2, [pc, #540]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	61d3      	str	r3, [r2, #28]
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCC_OscConfig+0x4c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374a:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x4c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7e      	ldr	r2, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0x4c8>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7fd fda7 	bl	80012a8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd fda3 	bl	80012a8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	; 0x64
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e103      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCC_OscConfig+0x4c8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x312>
 8003784:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a6e      	ldr	r2, [pc, #440]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6213      	str	r3, [r2, #32]
 8003790:	e02d      	b.n	80037ee <HAL_RCC_OscConfig+0x36e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x334>
 800379a:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6213      	str	r3, [r2, #32]
 80037a6:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4a66      	ldr	r2, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	6213      	str	r3, [r2, #32]
 80037b2:	e01c      	b.n	80037ee <HAL_RCC_OscConfig+0x36e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x356>
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a60      	ldr	r2, [pc, #384]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	4b5e      	ldr	r3, [pc, #376]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x36e>
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a5a      	ldr	r2, [pc, #360]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6213      	str	r3, [r2, #32]
 80037e2:	4b58      	ldr	r3, [pc, #352]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4a57      	ldr	r2, [pc, #348]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f6:	f7fd fd57 	bl	80012a8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fd53 	bl	80012a8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0b1      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCC_OscConfig+0x37e>
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fd fd41 	bl	80012a8 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fd3d 	bl	80012a8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e09b      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003840:	4b40      	ldr	r3, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b3c      	ldr	r3, [pc, #240]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8087 	beq.w	8003976 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d061      	beq.n	8003938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d146      	bne.n	800390a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_RCC_OscConfig+0x4cc>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fd fd11 	bl	80012a8 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388a:	f7fd fd0d 	bl	80012a8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e06d      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389c:	4b29      	ldr	r3, [pc, #164]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d108      	bne.n	80038c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4921      	ldr	r1, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c4:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a19      	ldr	r1, [r3, #32]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	430b      	orrs	r3, r1
 80038d6:	491b      	ldr	r1, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x4cc>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fd fce1 	bl	80012a8 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fd fcdd 	bl	80012a8 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x46a>
 8003908:	e035      	b.n	8003976 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_RCC_OscConfig+0x4cc>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd fcca 	bl	80012a8 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd fcc6 	bl	80012a8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e026      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x498>
 8003936:	e01e      	b.n	8003976 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e019      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
 800394c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x500>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	429a      	cmp	r2, r3
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0d0      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b6a      	ldr	r3, [pc, #424]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d910      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b67      	ldr	r3, [pc, #412]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	4965      	ldr	r1, [pc, #404]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d040      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d115      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e073      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a52:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06b      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4936      	ldr	r1, [pc, #216]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fd fc18 	bl	80012a8 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fd fc14 	bl	80012a8 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e053      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 020c 	and.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1eb      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d210      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 0207 	bic.w	r2, r3, #7
 8003aba:	4922      	ldr	r1, [pc, #136]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f821 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1cc>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1d0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd fb76 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40022000 	.word	0x40022000
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	080099f4 	.word	0x080099f4
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_GetSysClockFreq+0x94>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x30>
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x36>
 8003b86:	e027      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b8a:	613b      	str	r3, [r7, #16]
      break;
 8003b8c:	e027      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	0c9b      	lsrs	r3, r3, #18
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b98:	5cd3      	ldrb	r3, [r2, r3]
 8003b9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d010      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	0c5b      	lsrs	r3, r3, #17
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bb2:	5cd3      	ldrb	r3, [r2, r3]
 8003bb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bba:	fb03 f202 	mul.w	r2, r3, r2
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e004      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	613b      	str	r3, [r7, #16]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bda:	613b      	str	r3, [r7, #16]
      break;
 8003bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bde:	693b      	ldr	r3, [r7, #16]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	007a1200 	.word	0x007a1200
 8003bf4:	08009a0c 	.word	0x08009a0c
 8003bf8:	08009a1c 	.word	0x08009a1c
 8003bfc:	003d0900 	.word	0x003d0900

08003c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20000000 	.word	0x20000000

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c18:	f7ff fff2 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	08009a04 	.word	0x08009a04

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c40:	f7ff ffde 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	0adb      	lsrs	r3, r3, #11
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08009a04 	.word	0x08009a04

08003c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <RCC_Delay+0x34>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <RCC_Delay+0x38>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	0a5b      	lsrs	r3, r3, #9
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c80:	bf00      	nop
  }
  while (Delay --);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	60fa      	str	r2, [r7, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f9      	bne.n	8003c80 <RCC_Delay+0x1c>
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	10624dd3 	.word	0x10624dd3

08003ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d07d      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc0:	4b4f      	ldr	r3, [pc, #316]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10d      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	61d3      	str	r3, [r2, #28]
 8003cd8:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d118      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf4:	4b43      	ldr	r3, [pc, #268]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a42      	ldr	r2, [pc, #264]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d00:	f7fd fad2 	bl	80012a8 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	e008      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d08:	f7fd face 	bl	80012a8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e06d      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02e      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d027      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d44:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d54:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d5a:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fd fa9d 	bl	80012a8 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fd fa99 	bl	80012a8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e036      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ee      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4917      	ldr	r1, [pc, #92]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dac:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	490b      	ldr	r1, [pc, #44]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4904      	ldr	r1, [pc, #16]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42420440 	.word	0x42420440

08003e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e041      	b.n	8003ea2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd f8f4 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f000 fa74 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d001      	beq.n	8003ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e03a      	b.n	8003f3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_TIM_Base_Start_IT+0x98>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x58>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x58>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x58>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <HAL_TIM_Base_Start_IT+0xa0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d010      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e007      	b.n	8003f38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800

08003f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0202 	mvn.w	r2, #2
 8003f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f9b4 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f9a7 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f9b6 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0204 	mvn.w	r2, #4
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f98a 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f97d 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f98c 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b08      	cmp	r3, #8
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0208 	mvn.w	r2, #8
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2204      	movs	r2, #4
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f960 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f953 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f962 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b10      	cmp	r3, #16
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b10      	cmp	r3, #16
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0210 	mvn.w	r2, #16
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f936 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f929 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f938 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0201 	mvn.w	r2, #1
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc f83c 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa7b 	bl	80045f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8fc 	bl	8004324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b20      	cmp	r3, #32
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b20      	cmp	r3, #32
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0220 	mvn.w	r2, #32
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa46 	bl	80045e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIM_ConfigClockSource+0x1c>
 8004178:	2302      	movs	r3, #2
 800417a:	e0b4      	b.n	80042e6 <HAL_TIM_ConfigClockSource+0x186>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800419a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d03e      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0xd4>
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ba:	f200 8087 	bhi.w	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	f000 8086 	beq.w	80042d2 <HAL_TIM_ConfigClockSource+0x172>
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d87f      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041cc:	2b70      	cmp	r3, #112	; 0x70
 80041ce:	d01a      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0xa6>
 80041d0:	2b70      	cmp	r3, #112	; 0x70
 80041d2:	d87b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041d4:	2b60      	cmp	r3, #96	; 0x60
 80041d6:	d050      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x11a>
 80041d8:	2b60      	cmp	r3, #96	; 0x60
 80041da:	d877      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b50      	cmp	r3, #80	; 0x50
 80041de:	d03c      	beq.n	800425a <HAL_TIM_ConfigClockSource+0xfa>
 80041e0:	2b50      	cmp	r3, #80	; 0x50
 80041e2:	d873      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d058      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x13a>
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d86f      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b30      	cmp	r3, #48	; 0x30
 80041ee:	d064      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d86b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d060      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d867      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05c      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 8004200:	2b10      	cmp	r3, #16
 8004202:	d05a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	e062      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004216:	f000 f968 	bl	80044ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
      break;
 8004232:	e04f      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004244:	f000 f951 	bl	80044ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004256:	609a      	str	r2, [r3, #8]
      break;
 8004258:	e03c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	461a      	mov	r2, r3
 8004268:	f000 f8c8 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2150      	movs	r1, #80	; 0x50
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f91f 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8004278:	e02c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004286:	461a      	mov	r2, r3
 8004288:	f000 f8e6 	bl	8004458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2160      	movs	r1, #96	; 0x60
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f90f 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8004298:	e01c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 f8a8 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f8ff 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 80042b8:	e00c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f000 f8f6 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 80042ca:	e003      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e000      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
	...

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d007      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d108      	bne.n	80043ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800

080043fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 030a 	bic.w	r3, r3, #10
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	031b      	lsls	r3, r3, #12
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f043 0307 	orr.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	431a      	orrs	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	609a      	str	r2, [r3, #8]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e046      	b.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d009      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10c      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800

080045e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e042      	b.n	80046a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fd1c 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fcd5 	bl	8004ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d112      	bne.n	80046e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_UART_Receive_IT+0x26>
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e00b      	b.n	80046ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	461a      	mov	r2, r3
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fab7 	bl	8004c52 <UART_Start_Receive_IT>
 80046e4:	4603      	mov	r3, r0
 80046e6:	e000      	b.n	80046ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0ba      	sub	sp, #232	; 0xe8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_UART_IRQHandler+0x66>
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb93 	bl	8004e7e <UART_Receive_IT>
      return;
 8004758:	e25b      	b.n	8004c12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800475a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80de 	beq.w	8004920 <HAL_UART_IRQHandler+0x22c>
 8004764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80d1 	beq.w	8004920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_UART_IRQHandler+0xae>
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0201 	orr.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0xd2>
 80047ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f043 0202 	orr.w	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_UART_IRQHandler+0xf6>
 80047d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f043 0204 	orr.w	r2, r3, #4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <HAL_UART_IRQHandler+0x126>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f043 0208 	orr.w	r2, r3, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 81f2 	beq.w	8004c08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_UART_IRQHandler+0x14e>
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fb1e 	bl	8004e7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_UART_IRQHandler+0x17a>
 8004866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d04f      	beq.n	800490e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa28 	bl	8004cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d041      	beq.n	8004906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800489c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1d9      	bne.n	8004882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d013      	beq.n	80048fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	4a7e      	ldr	r2, [pc, #504]	; (8004ad4 <HAL_UART_IRQHandler+0x3e0>)
 80048dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fe32 	bl	800154c <HAL_DMA_Abort_IT>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d016      	beq.n	800491c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048f8:	4610      	mov	r0, r2
 80048fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	e00e      	b.n	800491c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f993 	bl	8004c2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	e00a      	b.n	800491c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f98f 	bl	8004c2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e006      	b.n	800491c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f98b 	bl	8004c2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800491a:	e175      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	bf00      	nop
    return;
 800491e:	e173      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	f040 814f 	bne.w	8004bc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8148 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8141 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80b6 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8145 	beq.w	8004c0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498a:	429a      	cmp	r2, r3
 800498c:	f080 813e 	bcs.w	8004c0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004996:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b20      	cmp	r3, #32
 80049a0:	f000 8088 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1d9      	bne.n	80049a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e1      	bne.n	80049f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3314      	adds	r3, #20
 8004a32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e3      	bne.n	8004a2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a84:	f023 0310 	bic.w	r3, r3, #16
 8004a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a96:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e3      	bne.n	8004a72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fd11 	bl	80014d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8b6 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ad0:	e09c      	b.n	8004c0c <HAL_UART_IRQHandler+0x518>
 8004ad2:	bf00      	nop
 8004ad4:	08004d89 	.word	0x08004d89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 808e 	beq.w	8004c10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8089 	beq.w	8004c10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b22:	647a      	str	r2, [r7, #68]	; 0x44
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e3      	bne.n	8004afe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	623b      	str	r3, [r7, #32]
   return(result);
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e3      	bne.n	8004b36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ba0:	61fa      	str	r2, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e3      	bne.n	8004b7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f83b 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc6:	e023      	b.n	8004c10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_UART_IRQHandler+0x4f4>
 8004bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8e5 	bl	8004db0 <UART_Transmit_IT>
    return;
 8004be6:	e014      	b.n	8004c12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <HAL_UART_IRQHandler+0x51e>
 8004bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f924 	bl	8004e4e <UART_EndTransmit_IT>
    return;
 8004c06:	e004      	b.n	8004c12 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c08:	bf00      	nop
 8004c0a:	e002      	b.n	8004c12 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c10:	bf00      	nop
  }
}
 8004c12:	37e8      	adds	r7, #232	; 0xe8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2222      	movs	r2, #34	; 0x22
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c96:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b095      	sub	sp, #84	; 0x54
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cec:	643a      	str	r2, [r7, #64]	; 0x40
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	647b      	str	r3, [r7, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d5c:	61ba      	str	r2, [r7, #24]
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6979      	ldr	r1, [r7, #20]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	; 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff ff41 	bl	8004c2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b21      	cmp	r3, #33	; 0x21
 8004dc2:	d13e      	bne.n	8004e42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d114      	bne.n	8004df8 <UART_Transmit_IT+0x48>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]
 8004df6:	e008      	b.n	8004e0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6211      	str	r1, [r2, #32]
 8004e02:	781a      	ldrb	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fed2 	bl	8004c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08c      	sub	sp, #48	; 0x30
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b22      	cmp	r3, #34	; 0x22
 8004e90:	f040 80ae 	bne.w	8004ff0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9c:	d117      	bne.n	8004ece <UART_Receive_IT+0x50>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d113      	bne.n	8004ece <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
 8004ecc:	e026      	b.n	8004f1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d007      	beq.n	8004ef2 <UART_Receive_IT+0x74>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <UART_Receive_IT+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e008      	b.n	8004f12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d15d      	bne.n	8004fec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0220 	bic.w	r2, r2, #32
 8004f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d135      	bne.n	8004fe2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f023 0310 	bic.w	r3, r3, #16
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	623a      	str	r2, [r7, #32]
 8004f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	69f9      	ldr	r1, [r7, #28]
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d10a      	bne.n	8004fd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fe2e 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
 8004fe0:	e002      	b.n	8004fe8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fb f908 	bl	80001f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e002      	b.n	8004ff2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3730      	adds	r7, #48	; 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005036:	f023 030c 	bic.w	r3, r3, #12
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	430b      	orrs	r3, r1
 8005042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <UART_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7fe fdea 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	e002      	b.n	8005072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fe fdd2 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8005070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009a      	lsls	r2, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <UART_SetConfig+0x118>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	0119      	lsls	r1, r3, #4
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <UART_SetConfig+0x118>)
 80050aa:	fba3 0302 	umull	r0, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2064      	movs	r0, #100	; 0x64
 80050b2:	fb00 f303 	mul.w	r3, r0, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	3332      	adds	r3, #50	; 0x32
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <UART_SetConfig+0x118>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c8:	4419      	add	r1, r3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009a      	lsls	r2, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <UART_SetConfig+0x118>)
 80050e2:	fba3 0302 	umull	r0, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2064      	movs	r0, #100	; 0x64
 80050ea:	fb00 f303 	mul.w	r3, r0, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	3332      	adds	r3, #50	; 0x32
 80050f4:	4a07      	ldr	r2, [pc, #28]	; (8005114 <UART_SetConfig+0x118>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	440a      	add	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40013800 	.word	0x40013800
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005118:	b084      	sub	sp, #16
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	f107 0014 	add.w	r0, r7, #20
 8005126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	b004      	add	sp, #16
 8005136:	4770      	bx	lr

08005138 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005148:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800514c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800516c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005170:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	b29b      	uxth	r3, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	b29b      	uxth	r3, r3
 8005182:	4013      	ands	r3, r2
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80051b0:	b084      	sub	sp, #16
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	f107 0014 	add.w	r0, r7, #20
 80051be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	b004      	add	sp, #16
 80051ee:	4770      	bx	lr

080051f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b09d      	sub	sp, #116	; 0x74
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d81f      	bhi.n	8005262 <USB_ActivateEndpoint+0x72>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <USB_ActivateEndpoint+0x38>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005239 	.word	0x08005239
 800522c:	08005255 	.word	0x08005255
 8005230:	0800526b 	.word	0x0800526b
 8005234:	08005247 	.word	0x08005247
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800523c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005240:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005244:	e012      	b.n	800526c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005246:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800524a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800524e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005252:	e00b      	b.n	800526c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005254:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800525c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005260:	e004      	b.n	800526c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005268:	e000      	b.n	800526c <USB_ActivateEndpoint+0x7c>
      break;
 800526a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	441a      	add	r2, r3
 80052bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80052c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	7b1b      	ldrb	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 8178 	bne.w	80055ce <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8084 	beq.w	80053f0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	011a      	lsls	r2, r3, #4
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	88db      	ldrh	r3, [r3, #6]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	827b      	strh	r3, [r7, #18]
 800532a:	8a7b      	ldrh	r3, [r7, #18]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <USB_ActivateEndpoint+0x17c>
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	823b      	strh	r3, [r7, #16]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	8a3b      	ldrh	r3, [r7, #16]
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	78db      	ldrb	r3, [r3, #3]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d020      	beq.n	80053b6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538a:	81bb      	strh	r3, [r7, #12]
 800538c:	89bb      	ldrh	r3, [r7, #12]
 800538e:	f083 0320 	eor.w	r3, r3, #32
 8005392:	81bb      	strh	r3, [r7, #12]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	89bb      	ldrh	r3, [r7, #12]
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
 80053b4:	e2d5      	b.n	8005962 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053cc:	81fb      	strh	r3, [r7, #14]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]
 80053ee:	e2b8      	b.n	8005962 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	4413      	add	r3, r2
 8005402:	633b      	str	r3, [r7, #48]	; 0x30
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	011a      	lsls	r2, r3, #4
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	4413      	add	r3, r2
 800540e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	88db      	ldrh	r3, [r3, #6]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	b29b      	uxth	r3, r3
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542e:	b29b      	uxth	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	4413      	add	r3, r2
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	011a      	lsls	r2, r3, #4
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	4413      	add	r3, r2
 8005442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005452:	b29a      	uxth	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b3e      	cmp	r3, #62	; 0x3e
 800545e:	d91d      	bls.n	800549c <USB_ActivateEndpoint+0x2ac>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	66bb      	str	r3, [r7, #104]	; 0x68
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <USB_ActivateEndpoint+0x28a>
 8005474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005476:	3b01      	subs	r3, #1
 8005478:	66bb      	str	r3, [r7, #104]	; 0x68
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29a      	uxth	r2, r3
 8005480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005482:	b29b      	uxth	r3, r3
 8005484:	029b      	lsls	r3, r3, #10
 8005486:	b29b      	uxth	r3, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	b29a      	uxth	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	e026      	b.n	80054ea <USB_ActivateEndpoint+0x2fa>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <USB_ActivateEndpoint+0x2ca>
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e017      	b.n	80054ea <USB_ActivateEndpoint+0x2fa>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <USB_ActivateEndpoint+0x2e4>
 80054ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d0:	3301      	adds	r3, #1
 80054d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80054f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01b      	beq.n	800553a <USB_ActivateEndpoint+0x34a>
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005518:	843b      	strh	r3, [r7, #32]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	8c3b      	ldrh	r3, [r7, #32]
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d124      	bne.n	800558c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	83bb      	strh	r3, [r7, #28]
 800555a:	8bbb      	ldrh	r3, [r7, #28]
 800555c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005560:	83bb      	strh	r3, [r7, #28]
 8005562:	8bbb      	ldrh	r3, [r7, #28]
 8005564:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005568:	83bb      	strh	r3, [r7, #28]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	8bbb      	ldrh	r3, [r7, #28]
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
 800558a:	e1ea      	b.n	8005962 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	83fb      	strh	r3, [r7, #30]
 80055a4:	8bfb      	ldrh	r3, [r7, #30]
 80055a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055aa:	83fb      	strh	r3, [r7, #30]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	8bfb      	ldrh	r3, [r7, #30]
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]
 80055cc:	e1c9      	b.n	8005962 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	78db      	ldrb	r3, [r3, #3]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d11e      	bne.n	8005614 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
 8005612:	e01d      	b.n	8005650 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800563c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564c:	b29b      	uxth	r3, r3
 800564e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005660:	4413      	add	r3, r2
 8005662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	4413      	add	r3, r2
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	65bb      	str	r3, [r7, #88]	; 0x58
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	891b      	ldrh	r3, [r3, #8]
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	b29b      	uxth	r3, r3
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	657b      	str	r3, [r7, #84]	; 0x54
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005694:	4413      	add	r3, r2
 8005696:	657b      	str	r3, [r7, #84]	; 0x54
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	011a      	lsls	r2, r3, #4
 800569e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056a6:	653b      	str	r3, [r7, #80]	; 0x50
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	895b      	ldrh	r3, [r3, #10]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8093 	bne.w	80057e8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80056d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01b      	beq.n	8005716 <USB_ActivateEndpoint+0x526>
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005724:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01b      	beq.n	8005766 <USB_ActivateEndpoint+0x576>
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577c:	873b      	strh	r3, [r7, #56]	; 0x38
 800577e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005780:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005784:	873b      	strh	r3, [r7, #56]	; 0x38
 8005786:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005788:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800578c:	873b      	strh	r3, [r7, #56]	; 0x38
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	441a      	add	r2, r3
 8005798:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800579a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]
 80057e6:	e0bc      	b.n	8005962 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80057f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01d      	beq.n	8005840 <USB_ActivateEndpoint+0x650>
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005850:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01d      	beq.n	8005898 <USB_ActivateEndpoint+0x6a8>
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	78db      	ldrb	r3, [r3, #3]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d024      	beq.n	80058ea <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80058ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80058be:	f083 0320 	eor.w	r3, r3, #32
 80058c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
 80058e8:	e01d      	b.n	8005926 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005900:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005922:	b29b      	uxth	r3, r3
 8005924:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	441a      	add	r2, r3
 800594a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005966:	4618      	mov	r0, r3
 8005968:	3774      	adds	r7, #116	; 0x74
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005970:	b480      	push	{r7}
 8005972:	b08d      	sub	sp, #52	; 0x34
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	7b1b      	ldrb	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 808e 	bne.w	8005aa0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d044      	beq.n	8005a16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	81bb      	strh	r3, [r7, #12]
 800599a:	89bb      	ldrh	r3, [r7, #12]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <USB_DeactivateEndpoint+0x6c>
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	817b      	strh	r3, [r7, #10]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f2:	813b      	strh	r3, [r7, #8]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	8013      	strh	r3, [r2, #0]
 8005a14:	e192      	b.n	8005d3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	827b      	strh	r3, [r7, #18]
 8005a24:	8a7b      	ldrh	r3, [r7, #18]
 8005a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01b      	beq.n	8005a66 <USB_DeactivateEndpoint+0xf6>
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	823b      	strh	r3, [r7, #16]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	8a3b      	ldrh	r3, [r7, #16]
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	81fb      	strh	r3, [r7, #14]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	441a      	add	r2, r3
 8005a88:	89fb      	ldrh	r3, [r7, #14]
 8005a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	8013      	strh	r3, [r2, #0]
 8005a9e:	e14d      	b.n	8005d3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 80a5 	bne.w	8005bf4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	843b      	strh	r3, [r7, #32]
 8005ab8:	8c3b      	ldrh	r3, [r7, #32]
 8005aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01b      	beq.n	8005afa <USB_DeactivateEndpoint+0x18a>
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad8:	83fb      	strh	r3, [r7, #30]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
 8005ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	83bb      	strh	r3, [r7, #28]
 8005b08:	8bbb      	ldrh	r3, [r7, #28]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01b      	beq.n	8005b4a <USB_DeactivateEndpoint+0x1da>
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	837b      	strh	r3, [r7, #26]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8b7b      	ldrh	r3, [r7, #26]
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b60:	833b      	strh	r3, [r7, #24]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	8b3b      	ldrh	r3, [r7, #24]
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b98:	82fb      	strh	r3, [r7, #22]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	8afb      	ldrh	r3, [r7, #22]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd0:	82bb      	strh	r3, [r7, #20]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	8abb      	ldrh	r3, [r7, #20]
 8005bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8013      	strh	r3, [r2, #0]
 8005bf2:	e0a3      	b.n	8005d3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005c02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <USB_DeactivateEndpoint+0x2d4>
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01b      	beq.n	8005c94 <USB_DeactivateEndpoint+0x324>
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	441a      	add	r2, r3
 8005cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	441a      	add	r2, r3
 8005d26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3734      	adds	r7, #52	; 0x34
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b0c2      	sub	sp, #264	; 0x108
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d56:	6018      	str	r0, [r3, #0]
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	f040 86b7 	bne.w	8006ae2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d908      	bls.n	8005da2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005da0:	e007      	b.n	8005db2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	7b1b      	ldrb	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d13a      	bne.n	8005e38 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6959      	ldr	r1, [r3, #20]
 8005dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	88da      	ldrh	r2, [r3, #6]
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005de4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f001 fc9c 	bl	8007726 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	011a      	lsls	r2, r3, #4
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	f000 be1f 	b.w	8006a76 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	78db      	ldrb	r3, [r3, #3]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	f040 8462 	bne.w	800670e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	f240 83df 	bls.w	8006626 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 81c7 	beq.w	8006298 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30
 8005f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d177      	bne.n	8006016 <USB_EPStartXfer+0x2ce>
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	4413      	add	r3, r2
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	011a      	lsls	r2, r3, #4
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	2b3e      	cmp	r3, #62	; 0x3e
 8005f78:	d921      	bls.n	8005fbe <USB_EPStartXfer+0x276>
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_EPStartXfer+0x252>
 8005f90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f94:	3b01      	subs	r3, #1
 8005f96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	029b      	lsls	r3, r3, #10
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e050      	b.n	8006060 <USB_EPStartXfer+0x318>
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <USB_EPStartXfer+0x294>
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e041      	b.n	8006060 <USB_EPStartXfer+0x318>
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <USB_EPStartXfer+0x2b4>
 8005ff2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006006:	b29b      	uxth	r3, r3
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	b29b      	uxth	r3, r3
 800600c:	4313      	orrs	r3, r2
 800600e:	b29a      	uxth	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e024      	b.n	8006060 <USB_EPStartXfer+0x318>
 8006016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d11c      	bne.n	8006060 <USB_EPStartXfer+0x318>
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006034:	b29b      	uxth	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	4413      	add	r3, r2
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	011a      	lsls	r2, r3, #4
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	4413      	add	r3, r2
 8006050:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	b29a      	uxth	r2, r3
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	895b      	ldrh	r3, [r3, #10]
 800606c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6959      	ldr	r1, [r3, #20]
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	b29b      	uxth	r3, r3
 8006082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006086:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800608a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800608e:	6800      	ldr	r0, [r0, #0]
 8006090:	f001 fb49 	bl	8007726 <USB_WritePMA>
            ep->xfer_buff += len;
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a4:	441a      	add	r2, r3
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90f      	bls.n	80060ee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	621a      	str	r2, [r3, #32]
 80060ec:	e00e      	b.n	800610c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2200      	movs	r2, #0
 800610a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800610c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d177      	bne.n	800620c <USB_EPStartXfer+0x4c4>
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	4413      	add	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	4413      	add	r3, r2
 8006152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006162:	b29a      	uxth	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	2b3e      	cmp	r3, #62	; 0x3e
 800616e:	d921      	bls.n	80061b4 <USB_EPStartXfer+0x46c>
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <USB_EPStartXfer+0x448>
 8006186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618a:	3b01      	subs	r3, #1
 800618c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	e056      	b.n	8006262 <USB_EPStartXfer+0x51a>
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <USB_EPStartXfer+0x48a>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e047      	b.n	8006262 <USB_EPStartXfer+0x51a>
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <USB_EPStartXfer+0x4aa>
 80061e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ec:	3301      	adds	r3, #1
 80061ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	029b      	lsls	r3, r3, #10
 8006200:	b29b      	uxth	r3, r3
 8006202:	4313      	orrs	r3, r2
 8006204:	b29a      	uxth	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	e02a      	b.n	8006262 <USB_EPStartXfer+0x51a>
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d122      	bne.n	8006262 <USB_EPStartXfer+0x51a>
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	4413      	add	r3, r2
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	4413      	add	r3, r2
 8006252:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	b29a      	uxth	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	891b      	ldrh	r3, [r3, #8]
 800626e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6959      	ldr	r1, [r3, #20]
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006282:	b29b      	uxth	r3, r3
 8006284:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006288:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800628c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006290:	6800      	ldr	r0, [r0, #0]
 8006292:	f001 fa48 	bl	8007726 <USB_WritePMA>
 8006296:	e3ee      	b.n	8006a76 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d177      	bne.n	8006398 <USB_EPStartXfer+0x650>
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c8:	4413      	add	r3, r2
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	011a      	lsls	r2, r3, #4
 80062da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062dc:	4413      	add	r3, r2
 80062de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062e2:	647b      	str	r3, [r7, #68]	; 0x44
 80062e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f8:	2b3e      	cmp	r3, #62	; 0x3e
 80062fa:	d921      	bls.n	8006340 <USB_EPStartXfer+0x5f8>
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <USB_EPStartXfer+0x5d4>
 8006312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006316:	3b01      	subs	r3, #1
 8006318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800631c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006326:	b29b      	uxth	r3, r3
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	b29b      	uxth	r3, r3
 800632c:	4313      	orrs	r3, r2
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29a      	uxth	r2, r3
 800633a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e056      	b.n	80063ee <USB_EPStartXfer+0x6a6>
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <USB_EPStartXfer+0x616>
 8006348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e047      	b.n	80063ee <USB_EPStartXfer+0x6a6>
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <USB_EPStartXfer+0x636>
 8006374:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006378:	3301      	adds	r3, #1
 800637a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800637e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29a      	uxth	r2, r3
 8006384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006388:	b29b      	uxth	r3, r3
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	b29b      	uxth	r3, r3
 800638e:	4313      	orrs	r3, r2
 8006390:	b29a      	uxth	r2, r3
 8006392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e02a      	b.n	80063ee <USB_EPStartXfer+0x6a6>
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d122      	bne.n	80063ee <USB_EPStartXfer+0x6a6>
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	653b      	str	r3, [r7, #80]	; 0x50
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c8:	4413      	add	r3, r2
 80063ca:	653b      	str	r3, [r7, #80]	; 0x50
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	011a      	lsls	r2, r3, #4
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	4413      	add	r3, r2
 80063de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	891b      	ldrh	r3, [r3, #8]
 80063fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6959      	ldr	r1, [r3, #20]
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	b29b      	uxth	r3, r3
 8006410:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006414:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006418:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f001 f982 	bl	8007726 <USB_WritePMA>
            ep->xfer_buff += len;
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006432:	441a      	add	r2, r3
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d90f      	bls.n	800647c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	621a      	str	r2, [r3, #32]
 800647a:	e00e      	b.n	800649a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
 80064a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d177      	bne.n	80065a6 <USB_EPStartXfer+0x85e>
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	4413      	add	r3, r2
 80064d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80064da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	011a      	lsls	r2, r3, #4
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	4413      	add	r3, r2
 80064ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006506:	2b3e      	cmp	r3, #62	; 0x3e
 8006508:	d921      	bls.n	800654e <USB_EPStartXfer+0x806>
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <USB_EPStartXfer+0x7e2>
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	3b01      	subs	r3, #1
 8006526:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29a      	uxth	r2, r3
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	b29b      	uxth	r3, r3
 8006536:	029b      	lsls	r3, r3, #10
 8006538:	b29b      	uxth	r3, r3
 800653a:	4313      	orrs	r3, r2
 800653c:	b29b      	uxth	r3, r3
 800653e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006546:	b29a      	uxth	r2, r3
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e050      	b.n	80065f0 <USB_EPStartXfer+0x8a8>
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <USB_EPStartXfer+0x824>
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006564:	b29a      	uxth	r2, r3
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e041      	b.n	80065f0 <USB_EPStartXfer+0x8a8>
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <USB_EPStartXfer+0x844>
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006586:	3301      	adds	r3, #1
 8006588:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	b29b      	uxth	r3, r3
 8006598:	029b      	lsls	r3, r3, #10
 800659a:	b29b      	uxth	r3, r3
 800659c:	4313      	orrs	r3, r2
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e024      	b.n	80065f0 <USB_EPStartXfer+0x8a8>
 80065a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d11c      	bne.n	80065f0 <USB_EPStartXfer+0x8a8>
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	4413      	add	r3, r2
 80065cc:	643b      	str	r3, [r7, #64]	; 0x40
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	011a      	lsls	r2, r3, #4
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	4413      	add	r3, r2
 80065e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	895b      	ldrh	r3, [r3, #10]
 80065fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6959      	ldr	r1, [r3, #20]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	b29b      	uxth	r3, r3
 8006612:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006616:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800661a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800661e:	6800      	ldr	r0, [r0, #0]
 8006620:	f001 f881 	bl	8007726 <USB_WritePMA>
 8006624:	e227      	b.n	8006a76 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800669e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b2:	4413      	add	r3, r2
 80066b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	011a      	lsls	r2, r3, #4
 80066c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c6:	4413      	add	r3, r2
 80066c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	891b      	ldrh	r3, [r3, #8]
 80066e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006702:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006706:	6800      	ldr	r0, [r0, #0]
 8006708:	f001 f80d 	bl	8007726 <USB_WritePMA>
 800670c:	e1b3      	b.n	8006a76 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800670e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6a1a      	ldr	r2, [r3, #32]
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80c6 	beq.w	80068e0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	673b      	str	r3, [r7, #112]	; 0x70
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d177      	bne.n	8006860 <USB_EPStartXfer+0xb18>
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	66bb      	str	r3, [r7, #104]	; 0x68
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006790:	4413      	add	r3, r2
 8006792:	66bb      	str	r3, [r7, #104]	; 0x68
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067aa:	667b      	str	r3, [r7, #100]	; 0x64
 80067ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c0:	2b3e      	cmp	r3, #62	; 0x3e
 80067c2:	d921      	bls.n	8006808 <USB_EPStartXfer+0xac0>
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <USB_EPStartXfer+0xa9c>
 80067da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067de:	3b01      	subs	r3, #1
 80067e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	4313      	orrs	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e050      	b.n	80068aa <USB_EPStartXfer+0xb62>
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <USB_EPStartXfer+0xade>
 8006810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29a      	uxth	r2, r3
 8006820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e041      	b.n	80068aa <USB_EPStartXfer+0xb62>
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <USB_EPStartXfer+0xafe>
 800683c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006840:	3301      	adds	r3, #1
 8006842:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006850:	b29b      	uxth	r3, r3
 8006852:	029b      	lsls	r3, r3, #10
 8006854:	b29b      	uxth	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	e024      	b.n	80068aa <USB_EPStartXfer+0xb62>
 8006860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d11c      	bne.n	80068aa <USB_EPStartXfer+0xb62>
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006884:	4413      	add	r3, r2
 8006886:	673b      	str	r3, [r7, #112]	; 0x70
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	011a      	lsls	r2, r3, #4
 8006896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006898:	4413      	add	r3, r2
 800689a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800689e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	895b      	ldrh	r3, [r3, #10]
 80068b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6959      	ldr	r1, [r3, #20]
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068d8:	6800      	ldr	r0, [r0, #0]
 80068da:	f000 ff24 	bl	8007726 <USB_WritePMA>
 80068de:	e0ca      	b.n	8006a76 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d177      	bne.n	80069e0 <USB_EPStartXfer+0xc98>
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006910:	4413      	add	r3, r2
 8006912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	011a      	lsls	r2, r3, #4
 8006922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006924:	4413      	add	r3, r2
 8006926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800692a:	67bb      	str	r3, [r7, #120]	; 0x78
 800692c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006936:	b29a      	uxth	r2, r3
 8006938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006940:	2b3e      	cmp	r3, #62	; 0x3e
 8006942:	d921      	bls.n	8006988 <USB_EPStartXfer+0xc40>
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <USB_EPStartXfer+0xc1c>
 800695a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800695e:	3b01      	subs	r3, #1
 8006960:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800696e:	b29b      	uxth	r3, r3
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	b29b      	uxth	r3, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	b29b      	uxth	r3, r3
 8006978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006980:	b29a      	uxth	r2, r3
 8006982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	e05c      	b.n	8006a42 <USB_EPStartXfer+0xcfa>
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <USB_EPStartXfer+0xc5e>
 8006990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e04d      	b.n	8006a42 <USB_EPStartXfer+0xcfa>
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <USB_EPStartXfer+0xc7e>
 80069bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069c0:	3301      	adds	r3, #1
 80069c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e030      	b.n	8006a42 <USB_EPStartXfer+0xcfa>
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d128      	bne.n	8006a42 <USB_EPStartXfer+0xcfa>
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a14:	4413      	add	r3, r2
 8006a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	011a      	lsls	r2, r3, #4
 8006a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	891b      	ldrh	r3, [r3, #8]
 8006a4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6959      	ldr	r1, [r3, #20]
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f000 fe58 	bl	8007726 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a9c:	817b      	strh	r3, [r7, #10]
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	f083 0310 	eor.w	r3, r3, #16
 8006aa4:	817b      	strh	r3, [r7, #10]
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	f083 0320 	eor.w	r3, r3, #32
 8006aac:	817b      	strh	r3, [r7, #10]
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	897b      	ldrh	r3, [r7, #10]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
 8006ade:	f000 bcde 	b.w	800749e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	7b1b      	ldrb	r3, [r3, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 80bb 	bne.w	8006c6a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d917      	bls.n	8006b40 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	619a      	str	r2, [r3, #24]
 8006b3e:	e00e      	b.n	8006b5e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b82:	4413      	add	r3, r2
 8006b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	011a      	lsls	r2, r3, #4
 8006b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bbe:	d924      	bls.n	8006c0a <USB_EPStartXfer+0xec2>
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <USB_EPStartXfer+0xe98>
 8006bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	029b      	lsls	r3, r3, #10
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	f000 bc10 	b.w	800742a <USB_EPStartXfer+0x16e2>
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10c      	bne.n	8006c2c <USB_EPStartXfer+0xee4>
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e3fe      	b.n	800742a <USB_EPStartXfer+0x16e2>
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <USB_EPStartXfer+0xf04>
 8006c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c46:	3301      	adds	r3, #1
 8006c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	029b      	lsls	r3, r3, #10
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e3df      	b.n	800742a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	78db      	ldrb	r3, [r3, #3]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	f040 8218 	bne.w	80070ac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f040 809d 	bne.w	8006dc8 <USB_EPStartXfer+0x1080>
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	011a      	lsls	r2, r3, #4
 8006cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cca:	4413      	add	r3, r2
 8006ccc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf6:	d92b      	bls.n	8006d50 <USB_EPStartXfer+0x1008>
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <USB_EPStartXfer+0xfe0>
 8006d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d22:	3b01      	subs	r3, #1
 8006d24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e070      	b.n	8006e32 <USB_EPStartXfer+0x10ea>
 8006d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10c      	bne.n	8006d7a <USB_EPStartXfer+0x1032>
 8006d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	e05b      	b.n	8006e32 <USB_EPStartXfer+0x10ea>
 8006d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <USB_EPStartXfer+0x1062>
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	3301      	adds	r3, #1
 8006da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	029b      	lsls	r3, r3, #10
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e034      	b.n	8006e32 <USB_EPStartXfer+0x10ea>
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d12c      	bne.n	8006e32 <USB_EPStartXfer+0x10ea>
 8006dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	011a      	lsls	r2, r3, #4
 8006e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 809d 	bne.w	8006f8c <USB_EPStartXfer+0x1244>
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e76:	4413      	add	r3, r2
 8006e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	011a      	lsls	r2, r3, #4
 8006e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eba:	d92b      	bls.n	8006f14 <USB_EPStartXfer+0x11cc>
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <USB_EPStartXfer+0x11a4>
 8006ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	029b      	lsls	r3, r3, #10
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	4313      	orrs	r3, r2
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e069      	b.n	8006fe8 <USB_EPStartXfer+0x12a0>
 8006f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <USB_EPStartXfer+0x11f6>
 8006f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e054      	b.n	8006fe8 <USB_EPStartXfer+0x12a0>
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <USB_EPStartXfer+0x1226>
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	e02d      	b.n	8006fe8 <USB_EPStartXfer+0x12a0>
 8006f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d125      	bne.n	8006fe8 <USB_EPStartXfer+0x12a0>
 8006f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	011a      	lsls	r2, r3, #4
 8006fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fca:	4413      	add	r3, r2
 8006fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fe6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8218 	beq.w	800742a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800701a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800701e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <USB_EPStartXfer+0x12ea>
 8007026:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10d      	bne.n	800704e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007032:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800703a:	2b00      	cmp	r3, #0
 800703c:	f040 81f5 	bne.w	800742a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007040:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 81ee 	bne.w	800742a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007074:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]
 80070aa:	e1be      	b.n	800742a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	78db      	ldrb	r3, [r3, #3]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	f040 81b4 	bne.w	8007426 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d917      	bls.n	800710a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80070da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	619a      	str	r2, [r3, #24]
 8007108:	e00e      	b.n	8007128 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 8085 	bne.w	8007244 <USB_EPStartXfer+0x14fc>
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800715e:	4413      	add	r3, r2
 8007160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	011a      	lsls	r2, r3, #4
 8007172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007176:	4413      	add	r3, r2
 8007178:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800717c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007198:	2b3e      	cmp	r3, #62	; 0x3e
 800719a:	d923      	bls.n	80071e4 <USB_EPStartXfer+0x149c>
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	f003 031f 	and.w	r3, r3, #31
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <USB_EPStartXfer+0x1474>
 80071b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b6:	3b01      	subs	r3, #1
 80071b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e060      	b.n	80072a6 <USB_EPStartXfer+0x155e>
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10c      	bne.n	8007206 <USB_EPStartXfer+0x14be>
 80071ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e04f      	b.n	80072a6 <USB_EPStartXfer+0x155e>
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720a:	085b      	lsrs	r3, r3, #1
 800720c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <USB_EPStartXfer+0x14de>
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007220:	3301      	adds	r3, #1
 8007222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007232:	b29b      	uxth	r3, r3
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	b29b      	uxth	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	b29a      	uxth	r2, r3
 800723c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e030      	b.n	80072a6 <USB_EPStartXfer+0x155e>
 8007244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d128      	bne.n	80072a6 <USB_EPStartXfer+0x155e>
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007270:	b29b      	uxth	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007278:	4413      	add	r3, r2
 800727a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	011a      	lsls	r2, r3, #4
 800728c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007290:	4413      	add	r3, r2
 8007292:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007296:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729e:	b29a      	uxth	r2, r3
 80072a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 8085 	bne.w	80073d0 <USB_EPStartXfer+0x1688>
 80072c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072ea:	4413      	add	r3, r2
 80072ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	011a      	lsls	r2, r3, #4
 80072fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007302:	4413      	add	r3, r2
 8007304:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800730c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007318:	b29a      	uxth	r2, r3
 800731a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007324:	2b3e      	cmp	r3, #62	; 0x3e
 8007326:	d923      	bls.n	8007370 <USB_EPStartXfer+0x1628>
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	095b      	lsrs	r3, r3, #5
 800732e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <USB_EPStartXfer+0x1600>
 800733e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007342:	3b01      	subs	r3, #1
 8007344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007354:	b29b      	uxth	r3, r3
 8007356:	029b      	lsls	r3, r3, #10
 8007358:	b29b      	uxth	r3, r3
 800735a:	4313      	orrs	r3, r2
 800735c:	b29b      	uxth	r3, r3
 800735e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007366:	b29a      	uxth	r2, r3
 8007368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e05c      	b.n	800742a <USB_EPStartXfer+0x16e2>
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10c      	bne.n	8007392 <USB_EPStartXfer+0x164a>
 8007378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007388:	b29a      	uxth	r2, r3
 800738a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	e04b      	b.n	800742a <USB_EPStartXfer+0x16e2>
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <USB_EPStartXfer+0x166a>
 80073a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ac:	3301      	adds	r3, #1
 80073ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073be:	b29b      	uxth	r3, r3
 80073c0:	029b      	lsls	r3, r3, #10
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	e02c      	b.n	800742a <USB_EPStartXfer+0x16e2>
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d124      	bne.n	800742a <USB_EPStartXfer+0x16e2>
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073f6:	4413      	add	r3, r2
 80073f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	011a      	lsls	r2, r3, #4
 800740a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800740e:	4413      	add	r3, r2
 8007410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e001      	b.n	800742a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e03a      	b.n	80074a0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007454:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800745c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007460:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007464:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007468:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800746c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d020      	beq.n	80074fe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d2:	81bb      	strh	r3, [r7, #12]
 80074d4:	89bb      	ldrh	r3, [r7, #12]
 80074d6:	f083 0310 	eor.w	r3, r3, #16
 80074da:	81bb      	strh	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	89bb      	ldrh	r3, [r7, #12]
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]
 80074fc:	e01f      	b.n	800753e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	81fb      	strh	r3, [r7, #14]
 8007516:	89fb      	ldrh	r3, [r7, #14]
 8007518:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800751c:	81fb      	strh	r3, [r7, #14]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753a:	b29b      	uxth	r3, r3
 800753c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr

0800754a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	7b1b      	ldrb	r3, [r3, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 809d 	bne.w	8007698 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d04c      	beq.n	8007600 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	823b      	strh	r3, [r7, #16]
 8007574:	8a3b      	ldrh	r3, [r7, #16]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01b      	beq.n	80075b6 <USB_EPClearStall+0x6c>
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007594:	81fb      	strh	r3, [r7, #14]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	441a      	add	r2, r3
 80075a0:	89fb      	ldrh	r3, [r7, #14]
 80075a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	78db      	ldrb	r3, [r3, #3]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d06c      	beq.n	8007698 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d4:	81bb      	strh	r3, [r7, #12]
 80075d6:	89bb      	ldrh	r3, [r7, #12]
 80075d8:	f083 0320 	eor.w	r3, r3, #32
 80075dc:	81bb      	strh	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	89bb      	ldrh	r3, [r7, #12]
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]
 80075fe:	e04b      	b.n	8007698 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	82fb      	strh	r3, [r7, #22]
 800760e:	8afb      	ldrh	r3, [r7, #22]
 8007610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01b      	beq.n	8007650 <USB_EPClearStall+0x106>
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	82bb      	strh	r3, [r7, #20]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	441a      	add	r2, r3
 800763a:	8abb      	ldrh	r3, [r7, #20]
 800763c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764c:	b29b      	uxth	r3, r3
 800764e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	827b      	strh	r3, [r7, #18]
 8007668:	8a7b      	ldrh	r3, [r7, #18]
 800766a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800766e:	827b      	strh	r3, [r7, #18]
 8007670:	8a7b      	ldrh	r3, [r7, #18]
 8007672:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007676:	827b      	strh	r3, [r7, #18]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	8a7b      	ldrh	r3, [r7, #18]
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2280      	movs	r2, #128	; 0x80
 80076ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr

080076ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr

080076de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr

080076f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007700:	b29b      	uxth	r3, r3
 8007702:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007726:	b480      	push	{r7}
 8007728:	b08b      	sub	sp, #44	; 0x2c
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	4611      	mov	r1, r2
 8007732:	461a      	mov	r2, r3
 8007734:	460b      	mov	r3, r1
 8007736:	80fb      	strh	r3, [r7, #6]
 8007738:	4613      	mov	r3, r2
 800773a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800773c:	88bb      	ldrh	r3, [r7, #4]
 800773e:	3301      	adds	r3, #1
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	005a      	lsls	r2, r3, #1
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007758:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
 800775e:	e01e      	b.n	800779e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	3301      	adds	r3, #1
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	b21a      	sxth	r2, r3
 8007770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007774:	4313      	orrs	r3, r2
 8007776:	b21b      	sxth	r3, r3
 8007778:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	8a7a      	ldrh	r2, [r7, #18]
 800777e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	3302      	adds	r3, #2
 8007784:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	3302      	adds	r3, #2
 800778a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3301      	adds	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	3b01      	subs	r3, #1
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1dd      	bne.n	8007760 <USB_WritePMA+0x3a>
  }
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	372c      	adds	r7, #44	; 0x2c
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b08b      	sub	sp, #44	; 0x2c
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4611      	mov	r1, r2
 80077bc:	461a      	mov	r2, r3
 80077be:	460b      	mov	r3, r1
 80077c0:	80fb      	strh	r3, [r7, #6]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	005a      	lsls	r2, r3, #1
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
 80077e8:	e01b      	b.n	8007822 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	3302      	adds	r3, #2
 80077f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	3301      	adds	r3, #1
 8007804:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	0a1b      	lsrs	r3, r3, #8
 800780a:	b2da      	uxtb	r2, r3
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3301      	adds	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	3302      	adds	r3, #2
 800781a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	3b01      	subs	r3, #1
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e0      	bne.n	80077ea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007828:	88bb      	ldrh	r3, [r7, #4]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	701a      	strb	r2, [r3, #0]
  }
}
 8007844:	bf00      	nop
 8007846:	372c      	adds	r7, #44	; 0x2c
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7c1b      	ldrb	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d115      	bne.n	8007892 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786a:	2202      	movs	r2, #2
 800786c:	2181      	movs	r1, #129	; 0x81
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fee3 	bl	800963a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800787a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787e:	2202      	movs	r2, #2
 8007880:	2101      	movs	r1, #1
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fed9 	bl	800963a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007890:	e012      	b.n	80078b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	2202      	movs	r2, #2
 8007896:	2181      	movs	r1, #129	; 0x81
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fece 	bl	800963a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078a4:	2340      	movs	r3, #64	; 0x40
 80078a6:	2202      	movs	r2, #2
 80078a8:	2101      	movs	r1, #1
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fec5 	bl	800963a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078b8:	2308      	movs	r3, #8
 80078ba:	2203      	movs	r2, #3
 80078bc:	2182      	movs	r1, #130	; 0x82
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 febb 	bl	800963a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078ce:	f001 ffdb 	bl	8009888 <USBD_static_malloc>
 80078d2:	4602      	mov	r2, r0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
 80078e8:	e026      	b.n	8007938 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1b      	ldrb	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800791a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791e:	2101      	movs	r1, #1
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 ff7b 	bl	800981c <USBD_LL_PrepareReceive>
 8007926:	e007      	b.n	8007938 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792e:	2340      	movs	r3, #64	; 0x40
 8007930:	2101      	movs	r1, #1
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 ff72 	bl	800981c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007952:	2181      	movs	r1, #129	; 0x81
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fe96 	bl	8009686 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007960:	2101      	movs	r1, #1
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 fe8f 	bl	8009686 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007970:	2182      	movs	r1, #130	; 0x82
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fe87 	bl	8009686 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00e      	beq.n	80079a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	4618      	mov	r0, r3
 800799a:	f001 ff81 	bl	80098a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d039      	beq.n	8007a4e <USBD_CDC_Setup+0x9e>
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d17f      	bne.n	8007ade <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d029      	beq.n	8007a3a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	b25b      	sxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	da11      	bge.n	8007a14 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	88d2      	ldrh	r2, [r2, #6]
 8007a02:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a04:	6939      	ldr	r1, [r7, #16]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88db      	ldrh	r3, [r3, #6]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fa0a 	bl	8008e26 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a12:	e06b      	b.n	8007aec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785a      	ldrb	r2, [r3, #1]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a2a:	6939      	ldr	r1, [r7, #16]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	88db      	ldrh	r3, [r3, #6]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 fa25 	bl	8008e82 <USBD_CtlPrepareRx>
      break;
 8007a38:	e058      	b.n	8007aec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	7850      	ldrb	r0, [r2, #1]
 8007a46:	2200      	movs	r2, #0
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	4798      	blx	r3
      break;
 8007a4c:	e04e      	b.n	8007aec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	2b0b      	cmp	r3, #11
 8007a54:	d02e      	beq.n	8007ab4 <USBD_CDC_Setup+0x104>
 8007a56:	2b0b      	cmp	r3, #11
 8007a58:	dc38      	bgt.n	8007acc <USBD_CDC_Setup+0x11c>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <USBD_CDC_Setup+0xb4>
 8007a5e:	2b0a      	cmp	r3, #10
 8007a60:	d014      	beq.n	8007a8c <USBD_CDC_Setup+0xdc>
 8007a62:	e033      	b.n	8007acc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d107      	bne.n	8007a7e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a6e:	f107 030c 	add.w	r3, r7, #12
 8007a72:	2202      	movs	r2, #2
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f9d5 	bl	8008e26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a7c:	e02e      	b.n	8007adc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f966 	bl	8008d52 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	75fb      	strb	r3, [r7, #23]
          break;
 8007a8a:	e027      	b.n	8007adc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d107      	bne.n	8007aa6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a96:	f107 030f 	add.w	r3, r7, #15
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f9c1 	bl	8008e26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007aa4:	e01a      	b.n	8007adc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 f952 	bl	8008d52 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ab2:	e013      	b.n	8007adc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d00d      	beq.n	8007ada <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f946 	bl	8008d52 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007aca:	e006      	b.n	8007ada <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 f93f 	bl	8008d52 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ad8:	e000      	b.n	8007adc <USBD_CDC_Setup+0x12c>
          break;
 8007ada:	bf00      	nop
      }
      break;
 8007adc:	e006      	b.n	8007aec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 f936 	bl	8008d52 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	bf00      	nop
  }

  return ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b08:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b10:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d03a      	beq.n	8007b92 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	331c      	adds	r3, #28
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d029      	beq.n	8007b86 <USBD_CDC_DataIn+0x90>
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	331c      	adds	r3, #28
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	78f9      	ldrb	r1, [r7, #3]
 8007b46:	68b8      	ldr	r0, [r7, #8]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	4403      	add	r3, r0
 8007b52:	3338      	adds	r3, #56	; 0x38
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d110      	bne.n	8007b86 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	331c      	adds	r3, #28
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b78:	78f9      	ldrb	r1, [r7, #3]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fe29 	bl	80097d6 <USBD_LL_Transmit>
 8007b84:	e003      	b.n	8007b8e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e000      	b.n	8007b94 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b92:	2302      	movs	r3, #2
  }
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fe54 	bl	8009862 <USBD_LL_GetRxDataSize>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00d      	beq.n	8007be8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007be0:	4611      	mov	r1, r2
 8007be2:	4798      	blx	r3

    return USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c00:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d015      	beq.n	8007c38 <USBD_CDC_EP0_RxReady+0x46>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c12:	2bff      	cmp	r3, #255	; 0xff
 8007c14:	d010      	beq.n	8007c38 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007c24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c2c:	b292      	uxth	r2, r2
 8007c2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	22ff      	movs	r2, #255	; 0xff
 8007c34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2243      	movs	r2, #67	; 0x43
 8007c50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c52:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20000094 	.word	0x20000094

08007c64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2243      	movs	r2, #67	; 0x43
 8007c70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000050 	.word	0x20000050

08007c84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2243      	movs	r2, #67	; 0x43
 8007c90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c92:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	200000d8 	.word	0x200000d8

08007ca4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	220a      	movs	r2, #10
 8007cb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007cb2:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	2000000c 	.word	0x2000000c

08007cc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007cce:	2302      	movs	r3, #2
 8007cd0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr

08007d22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01c      	beq.n	8007d9c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d115      	bne.n	8007d98 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2181      	movs	r1, #129	; 0x81
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fd21 	bl	80097d6 <USBD_LL_Transmit>

      return USBD_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e002      	b.n	8007d9e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e000      	b.n	8007d9e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d9c:	2302      	movs	r3, #2
  }
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7c1b      	ldrb	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fd21 	bl	800981c <USBD_LL_PrepareReceive>
 8007dda:	e007      	b.n	8007dec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	2101      	movs	r1, #1
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fd18 	bl	800981c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e000      	b.n	8007df2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	4613      	mov	r3, r2
 8007e06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e01a      	b.n	8007e48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	79fa      	ldrb	r2, [r7, #7]
 8007e3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f001 fb85 	bl	8009550 <USBD_LL_Init>

  return USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
 8007e70:	e001      	b.n	8007e76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e72:	2302      	movs	r3, #2
 8007e74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr

08007e82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fbba 	bl	8009604 <USBD_LL_Start>

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr

08007eae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00c      	beq.n	8007ee2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	4611      	mov	r1, r2
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fed8 	bl	8008cda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f38:	461a      	mov	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f46:	f003 031f 	and.w	r3, r3, #31
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d016      	beq.n	8007f7c <USBD_LL_SetupStage+0x6a>
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d81c      	bhi.n	8007f8c <USBD_LL_SetupStage+0x7a>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <USBD_LL_SetupStage+0x4a>
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d008      	beq.n	8007f6c <USBD_LL_SetupStage+0x5a>
 8007f5a:	e017      	b.n	8007f8c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f9cb 	bl	8008300 <USBD_StdDevReq>
      break;
 8007f6a:	e01a      	b.n	8007fa2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa2d 	bl	80083d4 <USBD_StdItfReq>
      break;
 8007f7a:	e012      	b.n	8007fa2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fa6d 	bl	8008464 <USBD_StdEPReq>
      break;
 8007f8a:	e00a      	b.n	8007fa2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fb92 	bl	80096c4 <USBD_LL_StallEP>
      break;
 8007fa0:	bf00      	nop
  }

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d14b      	bne.n	8008058 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fc6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d134      	bne.n	800803c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d919      	bls.n	8008012 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d203      	bcs.n	8008000 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	e002      	b.n	8008006 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008004:	b29b      	uxth	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 ff57 	bl	8008ebe <USBD_CtlContinueRx>
 8008010:	e038      	b.n	8008084 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008024:	2b03      	cmp	r3, #3
 8008026:	d105      	bne.n	8008034 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 ff54 	bl	8008ee2 <USBD_CtlSendStatus>
 800803a:	e023      	b.n	8008084 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008042:	2b05      	cmp	r3, #5
 8008044:	d11e      	bne.n	8008084 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800804e:	2100      	movs	r1, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 fb37 	bl	80096c4 <USBD_LL_StallEP>
 8008056:	e015      	b.n	8008084 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00d      	beq.n	8008080 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800806a:	2b03      	cmp	r3, #3
 800806c:	d108      	bne.n	8008080 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	7afa      	ldrb	r2, [r7, #11]
 8008078:	4611      	mov	r1, r2
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	4798      	blx	r3
 800807e:	e001      	b.n	8008084 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008080:	2302      	movs	r3, #2
 8008082:	e000      	b.n	8008086 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b086      	sub	sp, #24
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	460b      	mov	r3, r1
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d17f      	bne.n	80081a2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3314      	adds	r3, #20
 80080a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d15c      	bne.n	800816c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d915      	bls.n	80080ea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	461a      	mov	r2, r3
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fec1 	bl	8008e5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f001 fb9a 	bl	800981c <USBD_LL_PrepareReceive>
 80080e8:	e04e      	b.n	8008188 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	6912      	ldr	r2, [r2, #16]
 80080f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80080f6:	fb01 f202 	mul.w	r2, r1, r2
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11c      	bne.n	800813a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008108:	429a      	cmp	r2, r3
 800810a:	d316      	bcc.n	800813a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008116:	429a      	cmp	r2, r3
 8008118:	d20f      	bcs.n	800813a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fe9d 	bl	8008e5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800812c:	2300      	movs	r3, #0
 800812e:	2200      	movs	r2, #0
 8008130:	2100      	movs	r1, #0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f001 fb72 	bl	800981c <USBD_LL_PrepareReceive>
 8008138:	e026      	b.n	8008188 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800814c:	2b03      	cmp	r3, #3
 800814e:	d105      	bne.n	800815c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f001 fab0 	bl	80096c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fecf 	bl	8008f08 <USBD_CtlReceiveStatus>
 800816a:	e00d      	b.n	8008188 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008172:	2b04      	cmp	r3, #4
 8008174:	d004      	beq.n	8008180 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008180:	2180      	movs	r1, #128	; 0x80
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 fa9e 	bl	80096c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800818e:	2b01      	cmp	r3, #1
 8008190:	d11d      	bne.n	80081ce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f7ff fe81 	bl	8007e9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081a0:	e015      	b.n	80081ce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d108      	bne.n	80081ca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	7afa      	ldrb	r2, [r7, #11]
 80081c2:	4611      	mov	r1, r2
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	4798      	blx	r3
 80081c8:	e001      	b.n	80081ce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ca:	2302      	movs	r3, #2
 80081cc:	e000      	b.n	80081d0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 fa27 	bl	800963a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2240      	movs	r2, #64	; 0x40
 80081f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081fc:	2340      	movs	r3, #64	; 0x40
 80081fe:	2200      	movs	r2, #0
 8008200:	2180      	movs	r1, #128	; 0x80
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fa19 	bl	800963a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2240      	movs	r2, #64	; 0x40
 8008212:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6852      	ldr	r2, [r2, #4]
 8008248:	b2d2      	uxtb	r2, r2
 800824a:	4611      	mov	r1, r2
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
  }

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	78fa      	ldrb	r2, [r7, #3]
 800826a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr

08008278 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2204      	movs	r2, #4
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d105      	bne.n	80082be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d10b      	bne.n	80082f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d005      	beq.n	8008326 <USBD_StdDevReq+0x26>
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	d84f      	bhi.n	80083be <USBD_StdDevReq+0xbe>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <USBD_StdDevReq+0x36>
 8008322:	2b20      	cmp	r3, #32
 8008324:	d14b      	bne.n	80083be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
      break;
 8008334:	e048      	b.n	80083c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b09      	cmp	r3, #9
 800833c:	d839      	bhi.n	80083b2 <USBD_StdDevReq+0xb2>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <USBD_StdDevReq+0x44>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008395 	.word	0x08008395
 8008348:	080083a9 	.word	0x080083a9
 800834c:	080083b3 	.word	0x080083b3
 8008350:	0800839f 	.word	0x0800839f
 8008354:	080083b3 	.word	0x080083b3
 8008358:	08008377 	.word	0x08008377
 800835c:	0800836d 	.word	0x0800836d
 8008360:	080083b3 	.word	0x080083b3
 8008364:	0800838b 	.word	0x0800838b
 8008368:	08008381 	.word	0x08008381
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9dc 	bl	800872c <USBD_GetDescriptor>
          break;
 8008374:	e022      	b.n	80083bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fb3f 	bl	80089fc <USBD_SetAddress>
          break;
 800837e:	e01d      	b.n	80083bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb7e 	bl	8008a84 <USBD_SetConfig>
          break;
 8008388:	e018      	b.n	80083bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fc07 	bl	8008ba0 <USBD_GetConfig>
          break;
 8008392:	e013      	b.n	80083bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fc37 	bl	8008c0a <USBD_GetStatus>
          break;
 800839c:	e00e      	b.n	80083bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc65 	bl	8008c70 <USBD_SetFeature>
          break;
 80083a6:	e009      	b.n	80083bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fc74 	bl	8008c98 <USBD_ClrFeature>
          break;
 80083b0:	e004      	b.n	80083bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fccc 	bl	8008d52 <USBD_CtlError>
          break;
 80083ba:	bf00      	nop
      }
      break;
 80083bc:	e004      	b.n	80083c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fcc6 	bl	8008d52 <USBD_CtlError>
      break;
 80083c6:	bf00      	nop
  }

  return ret;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop

080083d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ea:	2b40      	cmp	r3, #64	; 0x40
 80083ec:	d005      	beq.n	80083fa <USBD_StdItfReq+0x26>
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	d82e      	bhi.n	8008450 <USBD_StdItfReq+0x7c>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <USBD_StdItfReq+0x26>
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d12a      	bne.n	8008450 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008400:	3b01      	subs	r3, #1
 8008402:	2b02      	cmp	r3, #2
 8008404:	d81d      	bhi.n	8008442 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	889b      	ldrh	r3, [r3, #4]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	d813      	bhi.n	8008438 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	88db      	ldrh	r3, [r3, #6]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d110      	bne.n	800844c <USBD_StdItfReq+0x78>
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10d      	bne.n	800844c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fd56 	bl	8008ee2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008436:	e009      	b.n	800844c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc89 	bl	8008d52 <USBD_CtlError>
          break;
 8008440:	e004      	b.n	800844c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fc84 	bl	8008d52 <USBD_CtlError>
          break;
 800844a:	e000      	b.n	800844e <USBD_StdItfReq+0x7a>
          break;
 800844c:	bf00      	nop
      }
      break;
 800844e:	e004      	b.n	800845a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fc7d 	bl	8008d52 <USBD_CtlError>
      break;
 8008458:	bf00      	nop
  }

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	889b      	ldrh	r3, [r3, #4]
 8008476:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d007      	beq.n	8008494 <USBD_StdEPReq+0x30>
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	f200 8146 	bhi.w	8008716 <USBD_StdEPReq+0x2b2>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <USBD_StdEPReq+0x40>
 800848e:	2b20      	cmp	r3, #32
 8008490:	f040 8141 	bne.w	8008716 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
      break;
 80084a2:	e13d      	b.n	8008720 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d10a      	bne.n	80084c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	4798      	blx	r3
 80084be:	4603      	mov	r3, r0
 80084c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	e12d      	b.n	8008722 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d007      	beq.n	80084de <USBD_StdEPReq+0x7a>
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f300 811b 	bgt.w	800870a <USBD_StdEPReq+0x2a6>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d072      	beq.n	80085be <USBD_StdEPReq+0x15a>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d03a      	beq.n	8008552 <USBD_StdEPReq+0xee>
 80084dc:	e115      	b.n	800870a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d002      	beq.n	80084ee <USBD_StdEPReq+0x8a>
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d015      	beq.n	8008518 <USBD_StdEPReq+0xb4>
 80084ec:	e02b      	b.n	8008546 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <USBD_StdEPReq+0xaa>
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d009      	beq.n	800850e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f8e0 	bl	80096c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008504:	2180      	movs	r1, #128	; 0x80
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f8dc 	bl	80096c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800850c:	e020      	b.n	8008550 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fc1e 	bl	8008d52 <USBD_CtlError>
              break;
 8008516:	e01b      	b.n	8008550 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	885b      	ldrh	r3, [r3, #2]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10e      	bne.n	800853e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <USBD_StdEPReq+0xda>
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b80      	cmp	r3, #128	; 0x80
 800852a:	d008      	beq.n	800853e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f8c3 	bl	80096c4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fccf 	bl	8008ee2 <USBD_CtlSendStatus>

              break;
 8008544:	e004      	b.n	8008550 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fc02 	bl	8008d52 <USBD_CtlError>
              break;
 800854e:	bf00      	nop
          }
          break;
 8008550:	e0e0      	b.n	8008714 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	2b02      	cmp	r3, #2
 800855a:	d002      	beq.n	8008562 <USBD_StdEPReq+0xfe>
 800855c:	2b03      	cmp	r3, #3
 800855e:	d015      	beq.n	800858c <USBD_StdEPReq+0x128>
 8008560:	e026      	b.n	80085b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00c      	beq.n	8008582 <USBD_StdEPReq+0x11e>
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b80      	cmp	r3, #128	; 0x80
 800856c:	d009      	beq.n	8008582 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 f8a6 	bl	80096c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008578:	2180      	movs	r1, #128	; 0x80
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 f8a2 	bl	80096c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008580:	e01c      	b.n	80085bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fbe4 	bl	8008d52 <USBD_CtlError>
              break;
 800858a:	e017      	b.n	80085bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	885b      	ldrh	r3, [r3, #2]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d112      	bne.n	80085ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 f8ad 	bl	8009702 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fc9a 	bl	8008ee2 <USBD_CtlSendStatus>
              }
              break;
 80085ae:	e004      	b.n	80085ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fbcd 	bl	8008d52 <USBD_CtlError>
              break;
 80085b8:	e000      	b.n	80085bc <USBD_StdEPReq+0x158>
              break;
 80085ba:	bf00      	nop
          }
          break;
 80085bc:	e0aa      	b.n	8008714 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d002      	beq.n	80085ce <USBD_StdEPReq+0x16a>
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d032      	beq.n	8008632 <USBD_StdEPReq+0x1ce>
 80085cc:	e097      	b.n	80086fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <USBD_StdEPReq+0x180>
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d004      	beq.n	80085e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fbb8 	bl	8008d52 <USBD_CtlError>
                break;
 80085e2:	e091      	b.n	8008708 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da0b      	bge.n	8008604 <USBD_StdEPReq+0x1a0>
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	3310      	adds	r3, #16
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4413      	add	r3, r2
 8008600:	3304      	adds	r3, #4
 8008602:	e00b      	b.n	800861c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	3304      	adds	r3, #4
 800861c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2202      	movs	r2, #2
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fbfb 	bl	8008e26 <USBD_CtlSendData>
              break;
 8008630:	e06a      	b.n	8008708 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da11      	bge.n	800865e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	3318      	adds	r3, #24
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d117      	bne.n	8008684 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fb7b 	bl	8008d52 <USBD_CtlError>
                  break;
 800865c:	e054      	b.n	8008708 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fb68 	bl	8008d52 <USBD_CtlError>
                  break;
 8008682:	e041      	b.n	8008708 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	da0b      	bge.n	80086a4 <USBD_StdEPReq+0x240>
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	3310      	adds	r3, #16
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4413      	add	r3, r2
 80086a0:	3304      	adds	r3, #4
 80086a2:	e00b      	b.n	80086bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	3304      	adds	r3, #4
 80086bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <USBD_StdEPReq+0x266>
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d103      	bne.n	80086d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e00e      	b.n	80086f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 f832 	bl	8009740 <USBD_LL_IsStallEP>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2201      	movs	r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e002      	b.n	80086f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2202      	movs	r2, #2
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fb95 	bl	8008e26 <USBD_CtlSendData>
              break;
 80086fc:	e004      	b.n	8008708 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fb26 	bl	8008d52 <USBD_CtlError>
              break;
 8008706:	bf00      	nop
          }
          break;
 8008708:	e004      	b.n	8008714 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb20 	bl	8008d52 <USBD_CtlError>
          break;
 8008712:	bf00      	nop
      }
      break;
 8008714:	e004      	b.n	8008720 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fb1a 	bl	8008d52 <USBD_CtlError>
      break;
 800871e:	bf00      	nop
  }

  return ret;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	b29b      	uxth	r3, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	2b06      	cmp	r3, #6
 800874e:	f200 8128 	bhi.w	80089a2 <USBD_GetDescriptor+0x276>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <USBD_GetDescriptor+0x2c>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	08008775 	.word	0x08008775
 800875c:	0800878d 	.word	0x0800878d
 8008760:	080087cd 	.word	0x080087cd
 8008764:	080089a3 	.word	0x080089a3
 8008768:	080089a3 	.word	0x080089a3
 800876c:	08008943 	.word	0x08008943
 8008770:	0800896f 	.word	0x0800896f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7c12      	ldrb	r2, [r2, #16]
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
 8008788:	60f8      	str	r0, [r7, #12]
      break;
 800878a:	e112      	b.n	80089b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7c1b      	ldrb	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10d      	bne.n	80087b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f107 0208 	add.w	r2, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	2202      	movs	r2, #2
 80087ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087ae:	e100      	b.n	80089b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	f107 0208 	add.w	r2, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	2202      	movs	r2, #2
 80087c8:	701a      	strb	r2, [r3, #0]
      break;
 80087ca:	e0f2      	b.n	80089b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	885b      	ldrh	r3, [r3, #2]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	f200 80ac 	bhi.w	8008930 <USBD_GetDescriptor+0x204>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <USBD_GetDescriptor+0xb4>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	080087f9 	.word	0x080087f9
 80087e4:	0800882d 	.word	0x0800882d
 80087e8:	08008861 	.word	0x08008861
 80087ec:	08008895 	.word	0x08008895
 80087f0:	080088c9 	.word	0x080088c9
 80087f4:	080088fd 	.word	0x080088fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	f107 0108 	add.w	r1, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881a:	e091      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa97 	bl	8008d52 <USBD_CtlError>
            err++;
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	3301      	adds	r3, #1
 8008828:	72fb      	strb	r3, [r7, #11]
          break;
 800882a:	e089      	b.n	8008940 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7c12      	ldrb	r2, [r2, #16]
 8008844:	f107 0108 	add.w	r1, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800884e:	e077      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa7d 	bl	8008d52 <USBD_CtlError>
            err++;
 8008858:	7afb      	ldrb	r3, [r7, #11]
 800885a:	3301      	adds	r3, #1
 800885c:	72fb      	strb	r3, [r7, #11]
          break;
 800885e:	e06f      	b.n	8008940 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	f107 0108 	add.w	r1, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008882:	e05d      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fa63 	bl	8008d52 <USBD_CtlError>
            err++;
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	3301      	adds	r3, #1
 8008890:	72fb      	strb	r3, [r7, #11]
          break;
 8008892:	e055      	b.n	8008940 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b6:	e043      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fa49 	bl	8008d52 <USBD_CtlError>
            err++;
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	3301      	adds	r3, #1
 80088c4:	72fb      	strb	r3, [r7, #11]
          break;
 80088c6:	e03b      	b.n	8008940 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7c12      	ldrb	r2, [r2, #16]
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ea:	e029      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa2f 	bl	8008d52 <USBD_CtlError>
            err++;
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	3301      	adds	r3, #1
 80088f8:	72fb      	strb	r3, [r7, #11]
          break;
 80088fa:	e021      	b.n	8008940 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891e:	e00f      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa15 	bl	8008d52 <USBD_CtlError>
            err++;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	3301      	adds	r3, #1
 800892c:	72fb      	strb	r3, [r7, #11]
          break;
 800892e:	e007      	b.n	8008940 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa0d 	bl	8008d52 <USBD_CtlError>
          err++;
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	3301      	adds	r3, #1
 800893c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800893e:	e038      	b.n	80089b2 <USBD_GetDescriptor+0x286>
 8008940:	e037      	b.n	80089b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7c1b      	ldrb	r3, [r3, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008952:	f107 0208 	add.w	r2, r7, #8
 8008956:	4610      	mov	r0, r2
 8008958:	4798      	blx	r3
 800895a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800895c:	e029      	b.n	80089b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9f6 	bl	8008d52 <USBD_CtlError>
        err++;
 8008966:	7afb      	ldrb	r3, [r7, #11]
 8008968:	3301      	adds	r3, #1
 800896a:	72fb      	strb	r3, [r7, #11]
      break;
 800896c:	e021      	b.n	80089b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7c1b      	ldrb	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10d      	bne.n	8008992 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	f107 0208 	add.w	r2, r7, #8
 8008982:	4610      	mov	r0, r2
 8008984:	4798      	blx	r3
 8008986:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
 800898c:	2207      	movs	r2, #7
 800898e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008990:	e00f      	b.n	80089b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f9dc 	bl	8008d52 <USBD_CtlError>
        err++;
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	3301      	adds	r3, #1
 800899e:	72fb      	strb	r3, [r7, #11]
      break;
 80089a0:	e007      	b.n	80089b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f9d4 	bl	8008d52 <USBD_CtlError>
      err++;
 80089aa:	7afb      	ldrb	r3, [r7, #11]
 80089ac:	3301      	adds	r3, #1
 80089ae:	72fb      	strb	r3, [r7, #11]
      break;
 80089b0:	bf00      	nop
  }

  if (err != 0U)
 80089b2:	7afb      	ldrb	r3, [r7, #11]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11c      	bne.n	80089f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80089b8:	893b      	ldrh	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d011      	beq.n	80089e2 <USBD_GetDescriptor+0x2b6>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	88db      	ldrh	r3, [r3, #6]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00d      	beq.n	80089e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	88da      	ldrh	r2, [r3, #6]
 80089ca:	893b      	ldrh	r3, [r7, #8]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	bf28      	it	cs
 80089d0:	4613      	movcs	r3, r2
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089d6:	893b      	ldrh	r3, [r7, #8]
 80089d8:	461a      	mov	r2, r3
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa22 	bl	8008e26 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	88db      	ldrh	r3, [r3, #6]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa79 	bl	8008ee2 <USBD_CtlSendStatus>
 80089f0:	e000      	b.n	80089f4 <USBD_GetDescriptor+0x2c8>
    return;
 80089f2:	bf00      	nop
    }
  }
}
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	889b      	ldrh	r3, [r3, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d130      	bne.n	8008a70 <USBD_SetAddress+0x74>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	88db      	ldrh	r3, [r3, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d12c      	bne.n	8008a70 <USBD_SetAddress+0x74>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a1c:	d828      	bhi.n	8008a70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	885b      	ldrh	r3, [r3, #2]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d104      	bne.n	8008a3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f98b 	bl	8008d52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3c:	e01d      	b.n	8008a7a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7bfa      	ldrb	r2, [r7, #15]
 8008a42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fea4 	bl	8009798 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fa46 	bl	8008ee2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a64:	e009      	b.n	8008a7a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6e:	e004      	b.n	8008a7a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f96d 	bl	8008d52 <USBD_CtlError>
  }
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	4b41      	ldr	r3, [pc, #260]	; (8008b9c <USBD_SetConfig+0x118>)
 8008a96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a98:	4b40      	ldr	r3, [pc, #256]	; (8008b9c <USBD_SetConfig+0x118>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d904      	bls.n	8008aaa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f955 	bl	8008d52 <USBD_CtlError>
 8008aa8:	e075      	b.n	8008b96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d002      	beq.n	8008aba <USBD_SetConfig+0x36>
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d023      	beq.n	8008b00 <USBD_SetConfig+0x7c>
 8008ab8:	e062      	b.n	8008b80 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008aba:	4b38      	ldr	r3, [pc, #224]	; (8008b9c <USBD_SetConfig+0x118>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01a      	beq.n	8008af8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ac2:	4b36      	ldr	r3, [pc, #216]	; (8008b9c <USBD_SetConfig+0x118>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2203      	movs	r2, #3
 8008ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ad4:	4b31      	ldr	r3, [pc, #196]	; (8008b9c <USBD_SetConfig+0x118>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7ff f9e7 	bl	8007eae <USBD_SetClassConfig>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d104      	bne.n	8008af0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f932 	bl	8008d52 <USBD_CtlError>
            return;
 8008aee:	e052      	b.n	8008b96 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f9f6 	bl	8008ee2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008af6:	e04e      	b.n	8008b96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9f2 	bl	8008ee2 <USBD_CtlSendStatus>
        break;
 8008afe:	e04a      	b.n	8008b96 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b00:	4b26      	ldr	r3, [pc, #152]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d112      	bne.n	8008b2e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b10:	4b22      	ldr	r3, [pc, #136]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b1a:	4b20      	ldr	r3, [pc, #128]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff f9e3 	bl	8007eec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f9db 	bl	8008ee2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b2c:	e033      	b.n	8008b96 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008b2e:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d01d      	beq.n	8008b78 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff f9d1 	bl	8007eec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b4a:	4b14      	ldr	r3, [pc, #80]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b54:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff f9a7 	bl	8007eae <USBD_SetClassConfig>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d104      	bne.n	8008b70 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f8f2 	bl	8008d52 <USBD_CtlError>
            return;
 8008b6e:	e012      	b.n	8008b96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9b6 	bl	8008ee2 <USBD_CtlSendStatus>
        break;
 8008b76:	e00e      	b.n	8008b96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f9b2 	bl	8008ee2 <USBD_CtlSendStatus>
        break;
 8008b7e:	e00a      	b.n	8008b96 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f8e5 	bl	8008d52 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <USBD_SetConfig+0x118>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff f9ac 	bl	8007eec <USBD_ClrClassConfig>
        break;
 8008b94:	bf00      	nop
    }
  }
}
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000868 	.word	0x20000868

08008ba0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	88db      	ldrh	r3, [r3, #6]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d004      	beq.n	8008bbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f8cc 	bl	8008d52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bba:	e022      	b.n	8008c02 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	dc02      	bgt.n	8008bcc <USBD_GetConfig+0x2c>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dc03      	bgt.n	8008bd2 <USBD_GetConfig+0x32>
 8008bca:	e015      	b.n	8008bf8 <USBD_GetConfig+0x58>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d00b      	beq.n	8008be8 <USBD_GetConfig+0x48>
 8008bd0:	e012      	b.n	8008bf8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	2201      	movs	r2, #1
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f920 	bl	8008e26 <USBD_CtlSendData>
        break;
 8008be6:	e00c      	b.n	8008c02 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3304      	adds	r3, #4
 8008bec:	2201      	movs	r2, #1
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f918 	bl	8008e26 <USBD_CtlSendData>
        break;
 8008bf6:	e004      	b.n	8008c02 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8a9 	bl	8008d52 <USBD_CtlError>
        break;
 8008c00:	bf00      	nop
}
 8008c02:	bf00      	nop
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d81e      	bhi.n	8008c5e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	88db      	ldrh	r3, [r3, #6]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d004      	beq.n	8008c32 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f891 	bl	8008d52 <USBD_CtlError>
        break;
 8008c30:	e01a      	b.n	8008c68 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f043 0202 	orr.w	r2, r3, #2
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	330c      	adds	r3, #12
 8008c52:	2202      	movs	r2, #2
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f8e5 	bl	8008e26 <USBD_CtlSendData>
      break;
 8008c5c:	e004      	b.n	8008c68 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f876 	bl	8008d52 <USBD_CtlError>
      break;
 8008c66:	bf00      	nop
  }
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	885b      	ldrh	r3, [r3, #2]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d106      	bne.n	8008c90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f929 	bl	8008ee2 <USBD_CtlSendStatus>
  }
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d80b      	bhi.n	8008cc6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	885b      	ldrh	r3, [r3, #2]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d10c      	bne.n	8008cd0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f90f 	bl	8008ee2 <USBD_CtlSendStatus>
      }
      break;
 8008cc4:	e004      	b.n	8008cd0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f842 	bl	8008d52 <USBD_CtlError>
      break;
 8008cce:	e000      	b.n	8008cd2 <USBD_ClrFeature+0x3a>
      break;
 8008cd0:	bf00      	nop
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	785a      	ldrb	r2, [r3, #1]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	3303      	adds	r3, #3
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4413      	add	r3, r2
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	3304      	adds	r3, #4
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	3305      	adds	r3, #5
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	3306      	adds	r3, #6
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	3307      	adds	r3, #7
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4413      	add	r3, r2
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	80da      	strh	r2, [r3, #6]

}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d5c:	2180      	movs	r1, #128	; 0x80
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fcb0 	bl	80096c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d64:	2100      	movs	r1, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fcac 	bl	80096c4 <USBD_LL_StallEP>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d032      	beq.n	8008df0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f834 	bl	8008df8 <USBD_GetLen>
 8008d90:	4603      	mov	r3, r0
 8008d92:	3301      	adds	r3, #1
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	75fa      	strb	r2, [r7, #23]
 8008da4:	461a      	mov	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	4413      	add	r3, r2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	75fa      	strb	r2, [r7, #23]
 8008db6:	461a      	mov	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4413      	add	r3, r2
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008dc0:	e012      	b.n	8008de8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	60fa      	str	r2, [r7, #12]
 8008dc8:	7dfa      	ldrb	r2, [r7, #23]
 8008dca:	1c51      	adds	r1, r2, #1
 8008dcc:	75f9      	strb	r1, [r7, #23]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	75fa      	strb	r2, [r7, #23]
 8008dde:	461a      	mov	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4413      	add	r3, r2
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e8      	bne.n	8008dc2 <USBD_GetString+0x4e>
    }
  }
}
 8008df0:	bf00      	nop
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e04:	e005      	b.n	8008e12 <USBD_GetLen+0x1a>
  {
    len++;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f5      	bne.n	8008e06 <USBD_GetLen+0xe>
  }

  return len;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr

08008e26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	4613      	mov	r3, r2
 8008e32:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e42:	88fa      	ldrh	r2, [r7, #6]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 fcc1 	bl	80097d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e6c:	88fb      	ldrh	r3, [r7, #6]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	2100      	movs	r1, #0
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fcaf 	bl	80097d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2203      	movs	r2, #3
 8008e94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e98:	88fa      	ldrh	r2, [r7, #6]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	2100      	movs	r1, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fcb4 	bl	800981c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ecc:	88fb      	ldrh	r3, [r7, #6]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fca2 	bl	800981c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2204      	movs	r2, #4
 8008eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fc6c 	bl	80097d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2205      	movs	r2, #5
 8008f14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f18:	2300      	movs	r3, #0
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fc7c 	bl	800981c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f34:	2200      	movs	r2, #0
 8008f36:	4912      	ldr	r1, [pc, #72]	; (8008f80 <MX_USB_DEVICE_Init+0x50>)
 8008f38:	4812      	ldr	r0, [pc, #72]	; (8008f84 <MX_USB_DEVICE_Init+0x54>)
 8008f3a:	f7fe ff5e 	bl	8007dfa <USBD_Init>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f44:	f7f8 f834 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f48:	490f      	ldr	r1, [pc, #60]	; (8008f88 <MX_USB_DEVICE_Init+0x58>)
 8008f4a:	480e      	ldr	r0, [pc, #56]	; (8008f84 <MX_USB_DEVICE_Init+0x54>)
 8008f4c:	f7fe ff80 	bl	8007e50 <USBD_RegisterClass>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f56:	f7f8 f82b 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f5a:	490c      	ldr	r1, [pc, #48]	; (8008f8c <MX_USB_DEVICE_Init+0x5c>)
 8008f5c:	4809      	ldr	r0, [pc, #36]	; (8008f84 <MX_USB_DEVICE_Init+0x54>)
 8008f5e:	f7fe feb1 	bl	8007cc4 <USBD_CDC_RegisterInterface>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f68:	f7f8 f822 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f6c:	4805      	ldr	r0, [pc, #20]	; (8008f84 <MX_USB_DEVICE_Init+0x54>)
 8008f6e:	f7fe ff88 	bl	8007e82 <USBD_Start>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f78:	f7f8 f81a 	bl	8000fb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f7c:	bf00      	nop
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	2000012c 	.word	0x2000012c
 8008f84:	2000086c 	.word	0x2000086c
 8008f88:	20000018 	.word	0x20000018
 8008f8c:	2000011c 	.word	0x2000011c

08008f90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
//	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &datosComUSB.bufferRx[datosComSerie.indexWriteRx], 0);
//	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &datosComUSB.bufferTx[datosComSerie.indexWriteRx]);
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f94:	2200      	movs	r2, #0
 8008f96:	4905      	ldr	r1, [pc, #20]	; (8008fac <CDC_Init_FS+0x1c>)
 8008f98:	4805      	ldr	r0, [pc, #20]	; (8008fb0 <CDC_Init_FS+0x20>)
 8008f9a:	f7fe fea9 	bl	8007cf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f9e:	4905      	ldr	r1, [pc, #20]	; (8008fb4 <CDC_Init_FS+0x24>)
 8008fa0:	4803      	ldr	r0, [pc, #12]	; (8008fb0 <CDC_Init_FS+0x20>)
 8008fa2:	f7fe febe 	bl	8007d22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008fa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000c30 	.word	0x20000c30
 8008fb0:	2000086c 	.word	0x2000086c
 8008fb4:	20000b30 	.word	0x20000b30

08008fb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr
	...

08008fc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	2b23      	cmp	r3, #35	; 0x23
 8008fdc:	f200 808c 	bhi.w	80090f8 <CDC_Control_FS+0x130>
 8008fe0:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <CDC_Control_FS+0x20>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	080090f9 	.word	0x080090f9
 8008fec:	080090f9 	.word	0x080090f9
 8008ff0:	080090f9 	.word	0x080090f9
 8008ff4:	080090f9 	.word	0x080090f9
 8008ff8:	080090f9 	.word	0x080090f9
 8008ffc:	080090f9 	.word	0x080090f9
 8009000:	080090f9 	.word	0x080090f9
 8009004:	080090f9 	.word	0x080090f9
 8009008:	080090f9 	.word	0x080090f9
 800900c:	080090f9 	.word	0x080090f9
 8009010:	080090f9 	.word	0x080090f9
 8009014:	080090f9 	.word	0x080090f9
 8009018:	080090f9 	.word	0x080090f9
 800901c:	080090f9 	.word	0x080090f9
 8009020:	080090f9 	.word	0x080090f9
 8009024:	080090f9 	.word	0x080090f9
 8009028:	080090f9 	.word	0x080090f9
 800902c:	080090f9 	.word	0x080090f9
 8009030:	080090f9 	.word	0x080090f9
 8009034:	080090f9 	.word	0x080090f9
 8009038:	080090f9 	.word	0x080090f9
 800903c:	080090f9 	.word	0x080090f9
 8009040:	080090f9 	.word	0x080090f9
 8009044:	080090f9 	.word	0x080090f9
 8009048:	080090f9 	.word	0x080090f9
 800904c:	080090f9 	.word	0x080090f9
 8009050:	080090f9 	.word	0x080090f9
 8009054:	080090f9 	.word	0x080090f9
 8009058:	080090f9 	.word	0x080090f9
 800905c:	080090f9 	.word	0x080090f9
 8009060:	080090f9 	.word	0x080090f9
 8009064:	080090f9 	.word	0x080090f9
 8009068:	08009079 	.word	0x08009079
 800906c:	080090b3 	.word	0x080090b3
 8009070:	080090f9 	.word	0x080090f9
 8009074:	080090f9 	.word	0x080090f9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	4b22      	ldr	r3, [pc, #136]	; (8009108 <CDC_Control_FS+0x140>)
 800907e:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	785a      	ldrb	r2, [r3, #1]
 8009084:	4b20      	ldr	r3, [pc, #128]	; (8009108 <CDC_Control_FS+0x140>)
 8009086:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	789a      	ldrb	r2, [r3, #2]
 800908c:	4b1e      	ldr	r3, [pc, #120]	; (8009108 <CDC_Control_FS+0x140>)
 800908e:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	78da      	ldrb	r2, [r3, #3]
 8009094:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <CDC_Control_FS+0x140>)
 8009096:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	791a      	ldrb	r2, [r3, #4]
 800909c:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <CDC_Control_FS+0x140>)
 800909e:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	795a      	ldrb	r2, [r3, #5]
 80090a4:	4b18      	ldr	r3, [pc, #96]	; (8009108 <CDC_Control_FS+0x140>)
 80090a6:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	799a      	ldrb	r2, [r3, #6]
 80090ac:	4b16      	ldr	r3, [pc, #88]	; (8009108 <CDC_Control_FS+0x140>)
 80090ae:	719a      	strb	r2, [r3, #6]
    break;
 80090b0:	e023      	b.n	80090fa <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <CDC_Control_FS+0x140>)
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	3301      	adds	r3, #1
 80090be:	4a12      	ldr	r2, [pc, #72]	; (8009108 <CDC_Control_FS+0x140>)
 80090c0:	7852      	ldrb	r2, [r2, #1]
 80090c2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	3302      	adds	r3, #2
 80090c8:	4a0f      	ldr	r2, [pc, #60]	; (8009108 <CDC_Control_FS+0x140>)
 80090ca:	7892      	ldrb	r2, [r2, #2]
 80090cc:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	3303      	adds	r3, #3
 80090d2:	4a0d      	ldr	r2, [pc, #52]	; (8009108 <CDC_Control_FS+0x140>)
 80090d4:	78d2      	ldrb	r2, [r2, #3]
 80090d6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	3304      	adds	r3, #4
 80090dc:	4a0a      	ldr	r2, [pc, #40]	; (8009108 <CDC_Control_FS+0x140>)
 80090de:	7912      	ldrb	r2, [r2, #4]
 80090e0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	3305      	adds	r3, #5
 80090e6:	4a08      	ldr	r2, [pc, #32]	; (8009108 <CDC_Control_FS+0x140>)
 80090e8:	7952      	ldrb	r2, [r2, #5]
 80090ea:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	3306      	adds	r3, #6
 80090f0:	4a05      	ldr	r2, [pc, #20]	; (8009108 <CDC_Control_FS+0x140>)
 80090f2:	7992      	ldrb	r2, [r2, #6]
 80090f4:	701a      	strb	r2, [r3, #0]
    break;
 80090f6:	e000      	b.n	80090fa <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090f8:	bf00      	nop
  }

  return (USBD_OK);
 80090fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	20000d30 	.word	0x20000d30

0800910c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(aPtrFunRx != NULL)
 8009116:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <CDC_Receive_FS+0x34>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800911e:	4b08      	ldr	r3, [pc, #32]	; (8009140 <CDC_Receive_FS+0x34>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	b292      	uxth	r2, r2
 8009128:	4611      	mov	r1, r2
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);		//Creado por el mismo programa, esta linea no es necesaria como lo uso yo
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800912e:	4805      	ldr	r0, [pc, #20]	; (8009144 <CDC_Receive_FS+0x38>)
 8009130:	f7fe fe39 	bl	8007da6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009134:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20000d38 	.word	0x20000d38
 8009144:	2000086c 	.word	0x2000086c

08009148 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009158:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <CDC_Transmit_FS+0x48>)
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800916a:	2301      	movs	r3, #1
 800916c:	e00b      	b.n	8009186 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800916e:	887b      	ldrh	r3, [r7, #2]
 8009170:	461a      	mov	r2, r3
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4806      	ldr	r0, [pc, #24]	; (8009190 <CDC_Transmit_FS+0x48>)
 8009176:	f7fe fdbb 	bl	8007cf0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800917a:	4805      	ldr	r0, [pc, #20]	; (8009190 <CDC_Transmit_FS+0x48>)
 800917c:	f7fe fde4 	bl	8007d48 <USBD_CDC_TransmitPacket>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	2000086c 	.word	0x2000086c

08009194 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachRxData(void(*ptrRxAttach)(uint8_t *buf, uint16_t len)) { //Sirve para que siempre se utilice aPtrFunRx para la transmision
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;											//En lugar de la funcion que mandas desde el main
 800919c:	4a03      	ldr	r2, [pc, #12]	; (80091ac <CDC_AttachRxData+0x18>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6013      	str	r3, [r2, #0]
}																		//Modularizando el codigo
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr
 80091ac:	20000d38 	.word	0x20000d38

080091b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2212      	movs	r2, #18
 80091c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	20000148 	.word	0x20000148

080091d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2204      	movs	r2, #4
 80091e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000015c 	.word	0x2000015c

080091f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4907      	ldr	r1, [pc, #28]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
 800920e:	4808      	ldr	r0, [pc, #32]	; (8009230 <USBD_FS_ProductStrDescriptor+0x38>)
 8009210:	f7ff fdb0 	bl	8008d74 <USBD_GetString>
 8009214:	e004      	b.n	8009220 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
 800921a:	4805      	ldr	r0, [pc, #20]	; (8009230 <USBD_FS_ProductStrDescriptor+0x38>)
 800921c:	f7ff fdaa 	bl	8008d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009220:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000d3c 	.word	0x20000d3c
 8009230:	080099ac 	.word	0x080099ac

08009234 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	4904      	ldr	r1, [pc, #16]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009244:	4804      	ldr	r0, [pc, #16]	; (8009258 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009246:	f7ff fd95 	bl	8008d74 <USBD_GetString>
  return USBD_StrDesc;
 800924a:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000d3c 	.word	0x20000d3c
 8009258:	080099c4 	.word	0x080099c4

0800925c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	221a      	movs	r2, #26
 800926c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800926e:	f000 f843 	bl	80092f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009272:	4b02      	ldr	r3, [pc, #8]	; (800927c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20000160 	.word	0x20000160

08009280 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	6039      	str	r1, [r7, #0]
 800928a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	4907      	ldr	r1, [pc, #28]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009296:	4808      	ldr	r0, [pc, #32]	; (80092b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009298:	f7ff fd6c 	bl	8008d74 <USBD_GetString>
 800929c:	e004      	b.n	80092a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4904      	ldr	r1, [pc, #16]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092a2:	4805      	ldr	r0, [pc, #20]	; (80092b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a4:	f7ff fd66 	bl	8008d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a8:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000d3c 	.word	0x20000d3c
 80092b8:	080099d8 	.word	0x080099d8

080092bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4907      	ldr	r1, [pc, #28]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092d2:	4808      	ldr	r0, [pc, #32]	; (80092f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092d4:	f7ff fd4e 	bl	8008d74 <USBD_GetString>
 80092d8:	e004      	b.n	80092e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4904      	ldr	r1, [pc, #16]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092de:	4805      	ldr	r0, [pc, #20]	; (80092f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092e0:	f7ff fd48 	bl	8008d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000d3c 	.word	0x20000d3c
 80092f4:	080099e4 	.word	0x080099e4

080092f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092fe:	4b0f      	ldr	r3, [pc, #60]	; (800933c <Get_SerialNum+0x44>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <Get_SerialNum+0x48>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <Get_SerialNum+0x4c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4413      	add	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800931e:	2208      	movs	r2, #8
 8009320:	4909      	ldr	r1, [pc, #36]	; (8009348 <Get_SerialNum+0x50>)
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 f814 	bl	8009350 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009328:	2204      	movs	r2, #4
 800932a:	4908      	ldr	r1, [pc, #32]	; (800934c <Get_SerialNum+0x54>)
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f000 f80f 	bl	8009350 <IntToUnicode>
  }
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	1ffff7e8 	.word	0x1ffff7e8
 8009340:	1ffff7ec 	.word	0x1ffff7ec
 8009344:	1ffff7f0 	.word	0x1ffff7f0
 8009348:	20000162 	.word	0x20000162
 800934c:	20000172 	.word	0x20000172

08009350 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009362:	2300      	movs	r3, #0
 8009364:	75fb      	strb	r3, [r7, #23]
 8009366:	e027      	b.n	80093b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	0f1b      	lsrs	r3, r3, #28
 800936c:	2b09      	cmp	r3, #9
 800936e:	d80b      	bhi.n	8009388 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	0f1b      	lsrs	r3, r3, #28
 8009374:	b2da      	uxtb	r2, r3
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	4619      	mov	r1, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	440b      	add	r3, r1
 8009380:	3230      	adds	r2, #48	; 0x30
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e00a      	b.n	800939e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	0f1b      	lsrs	r3, r3, #28
 800938c:	b2da      	uxtb	r2, r3
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	4619      	mov	r1, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	440b      	add	r3, r1
 8009398:	3237      	adds	r2, #55	; 0x37
 800939a:	b2d2      	uxtb	r2, r2
 800939c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	011b      	lsls	r3, r3, #4
 80093a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	3301      	adds	r3, #1
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	4413      	add	r3, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	3301      	adds	r3, #1
 80093b6:	75fb      	strb	r3, [r7, #23]
 80093b8:	7dfa      	ldrb	r2, [r7, #23]
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d3d3      	bcc.n	8009368 <IntToUnicode+0x18>
  }
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr

080093cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a0d      	ldr	r2, [pc, #52]	; (8009410 <HAL_PCD_MspInit+0x44>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d113      	bne.n	8009406 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80093de:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <HAL_PCD_MspInit+0x48>)
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	4a0c      	ldr	r2, [pc, #48]	; (8009414 <HAL_PCD_MspInit+0x48>)
 80093e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093e8:	61d3      	str	r3, [r2, #28]
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <HAL_PCD_MspInit+0x48>)
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	2014      	movs	r0, #20
 80093fc:	f7f8 f835 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009400:	2014      	movs	r0, #20
 8009402:	f7f8 f84e 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	40005c00 	.word	0x40005c00
 8009414:	40021000 	.word	0x40021000

08009418 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7fe fd6f 	bl	8007f12 <USBD_LL_SetupStage>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	440b      	add	r3, r1
 800945c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	4619      	mov	r1, r3
 8009466:	f7fe fda1 	bl	8007fac <USBD_LL_DataOutStage>
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009484:	78fa      	ldrb	r2, [r7, #3]
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	440b      	add	r3, r1
 8009492:	333c      	adds	r3, #60	; 0x3c
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	78fb      	ldrb	r3, [r7, #3]
 8009498:	4619      	mov	r1, r3
 800949a:	f7fe fdf8 	bl	800808e <USBD_LL_DataInStage>
}
 800949e:	bf00      	nop
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe ff08 	bl	80082ca <USBD_LL_SOF>
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094ca:	2301      	movs	r3, #1
 80094cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d001      	beq.n	80094da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094d6:	f7f7 fd6b 	bl	8000fb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094e0:	7bfa      	ldrb	r2, [r7, #15]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe feb8 	bl	800825a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fe71 	bl	80081d8 <USBD_LL_Reset>
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe feb2 	bl	8008278 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800951c:	4b04      	ldr	r3, [pc, #16]	; (8009530 <HAL_PCD_SuspendCallback+0x30>)
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	4a03      	ldr	r2, [pc, #12]	; (8009530 <HAL_PCD_SuspendCallback+0x30>)
 8009522:	f043 0306 	orr.w	r3, r3, #6
 8009526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	e000ed00 	.word	0xe000ed00

08009534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe feac 	bl	80082a0 <USBD_LL_Resume>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009558:	4a28      	ldr	r2, [pc, #160]	; (80095fc <USBD_LL_Init+0xac>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a26      	ldr	r2, [pc, #152]	; (80095fc <USBD_LL_Init+0xac>)
 8009564:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009568:	4b24      	ldr	r3, [pc, #144]	; (80095fc <USBD_LL_Init+0xac>)
 800956a:	4a25      	ldr	r2, [pc, #148]	; (8009600 <USBD_LL_Init+0xb0>)
 800956c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800956e:	4b23      	ldr	r3, [pc, #140]	; (80095fc <USBD_LL_Init+0xac>)
 8009570:	2208      	movs	r2, #8
 8009572:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009574:	4b21      	ldr	r3, [pc, #132]	; (80095fc <USBD_LL_Init+0xac>)
 8009576:	2202      	movs	r2, #2
 8009578:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800957a:	4b20      	ldr	r3, [pc, #128]	; (80095fc <USBD_LL_Init+0xac>)
 800957c:	2200      	movs	r2, #0
 800957e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009580:	4b1e      	ldr	r3, [pc, #120]	; (80095fc <USBD_LL_Init+0xac>)
 8009582:	2200      	movs	r2, #0
 8009584:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009586:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <USBD_LL_Init+0xac>)
 8009588:	2200      	movs	r2, #0
 800958a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800958c:	481b      	ldr	r0, [pc, #108]	; (80095fc <USBD_LL_Init+0xac>)
 800958e:	f7f8 fa08 	bl	80019a2 <HAL_PCD_Init>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009598:	f7f7 fd0a 	bl	8000fb0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095a2:	2318      	movs	r3, #24
 80095a4:	2200      	movs	r2, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	f7f9 ff27 	bl	80033fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095b2:	2358      	movs	r3, #88	; 0x58
 80095b4:	2200      	movs	r2, #0
 80095b6:	2180      	movs	r1, #128	; 0x80
 80095b8:	f7f9 ff1f 	bl	80033fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095c2:	23c0      	movs	r3, #192	; 0xc0
 80095c4:	2200      	movs	r2, #0
 80095c6:	2181      	movs	r1, #129	; 0x81
 80095c8:	f7f9 ff17 	bl	80033fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80095d6:	2200      	movs	r2, #0
 80095d8:	2101      	movs	r1, #1
 80095da:	f7f9 ff0e 	bl	80033fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095e8:	2200      	movs	r2, #0
 80095ea:	2182      	movs	r1, #130	; 0x82
 80095ec:	f7f9 ff05 	bl	80033fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000f3c 	.word	0x20000f3c
 8009600:	40005c00 	.word	0x40005c00

08009604 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800961a:	4618      	mov	r0, r3
 800961c:	f7f8 fac0 	bl	8001ba0 <HAL_PCD_Start>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f94e 	bl	80098c8 <USBD_Get_USB_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	4608      	mov	r0, r1
 8009644:	4611      	mov	r1, r2
 8009646:	461a      	mov	r2, r3
 8009648:	4603      	mov	r3, r0
 800964a:	70fb      	strb	r3, [r7, #3]
 800964c:	460b      	mov	r3, r1
 800964e:	70bb      	strb	r3, [r7, #2]
 8009650:	4613      	mov	r3, r2
 8009652:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009662:	78bb      	ldrb	r3, [r7, #2]
 8009664:	883a      	ldrh	r2, [r7, #0]
 8009666:	78f9      	ldrb	r1, [r7, #3]
 8009668:	f7f8 fc15 	bl	8001e96 <HAL_PCD_EP_Open>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f928 	bl	80098c8 <USBD_Get_USB_Status>
 8009678:	4603      	mov	r3, r0
 800967a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800967c:	7bbb      	ldrb	r3, [r7, #14]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f8 fc53 	bl	8001f50 <HAL_PCD_EP_Close>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f909 	bl	80098c8 <USBD_Get_USB_Status>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096de:	78fa      	ldrb	r2, [r7, #3]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f8 fcfb 	bl	80020de <HAL_PCD_EP_SetStall>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f8ea 	bl	80098c8 <USBD_Get_USB_Status>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460b      	mov	r3, r1
 800970c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7f8 fd3c 	bl	800219e <HAL_PCD_EP_ClrStall>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f8cb 	bl	80098c8 <USBD_Get_USB_Status>
 8009732:	4603      	mov	r3, r0
 8009734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009736:	7bbb      	ldrb	r3, [r7, #14]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009752:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009758:	2b00      	cmp	r3, #0
 800975a:	da0c      	bge.n	8009776 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009762:	68f9      	ldr	r1, [r7, #12]
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	440b      	add	r3, r1
 8009770:	3302      	adds	r3, #2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	e00b      	b.n	800978e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800977c:	68f9      	ldr	r1, [r7, #12]
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	440b      	add	r3, r1
 8009788:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800978c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b2:	78fa      	ldrb	r2, [r7, #3]
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f8 fb48 	bl	8001e4c <HAL_PCD_SetAddress>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f880 	bl	80098c8 <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	461a      	mov	r2, r3
 80097e2:	460b      	mov	r3, r1
 80097e4:	72fb      	strb	r3, [r7, #11]
 80097e6:	4613      	mov	r3, r2
 80097e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097f8:	893b      	ldrh	r3, [r7, #8]
 80097fa:	7af9      	ldrb	r1, [r7, #11]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	f7f8 fc37 	bl	8002070 <HAL_PCD_EP_Transmit>
 8009802:	4603      	mov	r3, r0
 8009804:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f85d 	bl	80098c8 <USBD_Get_USB_Status>
 800980e:	4603      	mov	r3, r0
 8009810:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009812:	7dbb      	ldrb	r3, [r7, #22]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	461a      	mov	r2, r3
 8009828:	460b      	mov	r3, r1
 800982a:	72fb      	strb	r3, [r7, #11]
 800982c:	4613      	mov	r3, r2
 800982e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800983e:	893b      	ldrh	r3, [r7, #8]
 8009840:	7af9      	ldrb	r1, [r7, #11]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	f7f8 fbcc 	bl	8001fe0 <HAL_PCD_EP_Receive>
 8009848:	4603      	mov	r3, r0
 800984a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f83a 	bl	80098c8 <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009858:	7dbb      	ldrb	r3, [r7, #22]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7f8 fbe2 	bl	8002042 <HAL_PCD_EP_GetRxCount>
 800987e:	4603      	mov	r3, r0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009890:	4b02      	ldr	r3, [pc, #8]	; (800989c <USBD_static_malloc+0x14>)
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr
 800989c:	2000122c 	.word	0x2000122c

080098a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]

}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bc80      	pop	{r7}
 80098b0:	4770      	bx	lr

080098b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bc80      	pop	{r7}
 80098c6:	4770      	bx	lr

080098c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d817      	bhi.n	800990c <USBD_Get_USB_Status+0x44>
 80098dc:	a201      	add	r2, pc, #4	; (adr r2, 80098e4 <USBD_Get_USB_Status+0x1c>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	080098fb 	.word	0x080098fb
 80098ec:	08009901 	.word	0x08009901
 80098f0:	08009907 	.word	0x08009907
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
    break;
 80098f8:	e00b      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098fa:	2302      	movs	r3, #2
 80098fc:	73fb      	strb	r3, [r7, #15]
    break;
 80098fe:	e008      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
    break;
 8009904:	e005      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009906:	2302      	movs	r3, #2
 8009908:	73fb      	strb	r3, [r7, #15]
    break;
 800990a:	e002      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800990c:	2302      	movs	r3, #2
 800990e:	73fb      	strb	r3, [r7, #15]
    break;
 8009910:	bf00      	nop
  }
  return usb_status;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	bc80      	pop	{r7}
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop

08009920 <memset>:
 8009920:	4603      	mov	r3, r0
 8009922:	4402      	add	r2, r0
 8009924:	4293      	cmp	r3, r2
 8009926:	d100      	bne.n	800992a <memset+0xa>
 8009928:	4770      	bx	lr
 800992a:	f803 1b01 	strb.w	r1, [r3], #1
 800992e:	e7f9      	b.n	8009924 <memset+0x4>

08009930 <__libc_init_array>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	2600      	movs	r6, #0
 8009934:	4d0c      	ldr	r5, [pc, #48]	; (8009968 <__libc_init_array+0x38>)
 8009936:	4c0d      	ldr	r4, [pc, #52]	; (800996c <__libc_init_array+0x3c>)
 8009938:	1b64      	subs	r4, r4, r5
 800993a:	10a4      	asrs	r4, r4, #2
 800993c:	42a6      	cmp	r6, r4
 800993e:	d109      	bne.n	8009954 <__libc_init_array+0x24>
 8009940:	f000 f828 	bl	8009994 <_init>
 8009944:	2600      	movs	r6, #0
 8009946:	4d0a      	ldr	r5, [pc, #40]	; (8009970 <__libc_init_array+0x40>)
 8009948:	4c0a      	ldr	r4, [pc, #40]	; (8009974 <__libc_init_array+0x44>)
 800994a:	1b64      	subs	r4, r4, r5
 800994c:	10a4      	asrs	r4, r4, #2
 800994e:	42a6      	cmp	r6, r4
 8009950:	d105      	bne.n	800995e <__libc_init_array+0x2e>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	f855 3b04 	ldr.w	r3, [r5], #4
 8009958:	4798      	blx	r3
 800995a:	3601      	adds	r6, #1
 800995c:	e7ee      	b.n	800993c <__libc_init_array+0xc>
 800995e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009962:	4798      	blx	r3
 8009964:	3601      	adds	r6, #1
 8009966:	e7f2      	b.n	800994e <__libc_init_array+0x1e>
 8009968:	08009a20 	.word	0x08009a20
 800996c:	08009a20 	.word	0x08009a20
 8009970:	08009a20 	.word	0x08009a20
 8009974:	08009a24 	.word	0x08009a24

08009978 <memcpy>:
 8009978:	440a      	add	r2, r1
 800997a:	4291      	cmp	r1, r2
 800997c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009980:	d100      	bne.n	8009984 <memcpy+0xc>
 8009982:	4770      	bx	lr
 8009984:	b510      	push	{r4, lr}
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	4291      	cmp	r1, r2
 800998c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009990:	d1f9      	bne.n	8009986 <memcpy+0xe>
 8009992:	bd10      	pop	{r4, pc}

08009994 <_init>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	bf00      	nop
 8009998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999a:	bc08      	pop	{r3}
 800999c:	469e      	mov	lr, r3
 800999e:	4770      	bx	lr

080099a0 <_fini>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	bf00      	nop
 80099a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a6:	bc08      	pop	{r3}
 80099a8:	469e      	mov	lr, r3
 80099aa:	4770      	bx	lr
