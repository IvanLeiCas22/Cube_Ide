
proyectoSTM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003334  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  2000000c  08003480  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08003480  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c18f  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c25  00000000  00000000  0002c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000998  00000000  00000000  0002ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017540  00000000  00000000  0002f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d879  00000000  00000000  00046938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089ce6  00000000  00000000  000541b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000331c  00000000  00000000  000dde98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e11b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003428 	.word	0x08003428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003428 	.word	0x08003428

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a12      	ldr	r2, [pc, #72]	; (80001a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d11d      	bne.n	800019a <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (time100ms)
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d005      	beq.n	8000172 <HAL_TIM_PeriodElapsedCallback+0x26>
			time100ms--;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	3b01      	subs	r3, #1
 800016c:	b2da      	uxtb	r2, r3
 800016e:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000170:	701a      	strb	r2, [r3, #0]
		if (debounceTimer20ms)
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d005      	beq.n	8000186 <HAL_TIM_PeriodElapsedCallback+0x3a>
			debounceTimer20ms--;
 800017a:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	3b01      	subs	r3, #1
 8000180:	b2da      	uxtb	r2, r3
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000184:	701a      	strb	r2, [r3, #0]
		if (myButtons[0].timePush < 500)
 8000186:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800018e:	d204      	bcs.n	800019a <HAL_TIM_PeriodElapsedCallback+0x4e>
			myButtons[0].timePush++;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000192:	685b      	ldr	r3, [r3, #4]
 8000194:	3301      	adds	r3, #1
 8000196:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000198:	6053      	str	r3, [r2, #4]
	}
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40012c00 	.word	0x40012c00
 80001a8:	200000b9 	.word	0x200000b9
 80001ac:	200004d2 	.word	0x200004d2
 80001b0:	200004d8 	.word	0x200004d8

080001b4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <HAL_UART_RxCpltCallback+0x3c>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d110      	bne.n	80001e8 <HAL_UART_RxCpltCallback+0x34>
		datosComSerie.indexWriteRx++;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <HAL_UART_RxCpltCallback+0x40>)
 80001c8:	789b      	ldrb	r3, [r3, #2]
 80001ca:	3301      	adds	r3, #1
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <HAL_UART_RxCpltCallback+0x40>)
 80001d0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <HAL_UART_RxCpltCallback+0x40>)
 80001d4:	789b      	ldrb	r3, [r3, #2]
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <HAL_UART_RxCpltCallback+0x40>)
 80001da:	4413      	add	r3, r2
 80001dc:	3306      	adds	r3, #6
 80001de:	2201      	movs	r2, #1
 80001e0:	4619      	mov	r1, r3
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <HAL_UART_RxCpltCallback+0x44>)
 80001e4:	f002 fbbc 	bl	8002960 <HAL_UART_Receive_IT>
	}
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40013800 	.word	0x40013800
 80001f4:	200000c4 	.word	0x200000c4
 80001f8:	20000070 	.word	0x20000070

080001fc <heartBeat>:

void heartBeat() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	static uint8_t move=0;	//Ultima modificacion
	if ((~mask) & (1<<move)) {
 8000200:	4b14      	ldr	r3, [pc, #80]	; (8000254 <heartBeat+0x58>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	43db      	mvns	r3, r3
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <heartBeat+0x5c>)
 8000208:	7812      	ldrb	r2, [r2, #0]
 800020a:	4611      	mov	r1, r2
 800020c:	2201      	movs	r2, #1
 800020e:	408a      	lsls	r2, r1
 8000210:	4013      	ands	r3, r2
 8000212:	2b00      	cmp	r3, #0
 8000214:	d006      	beq.n	8000224 <heartBeat+0x28>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <heartBeat+0x60>)
 800021e:	f001 fb28 	bl	8001872 <HAL_GPIO_WritePin>
 8000222:	e005      	b.n	8000230 <heartBeat+0x34>
	} else {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	//Prende el led
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <heartBeat+0x60>)
 800022c:	f001 fb21 	bl	8001872 <HAL_GPIO_WritePin>
	}
	move++;
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <heartBeat+0x5c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	b2da      	uxtb	r2, r3
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <heartBeat+0x5c>)
 800023a:	701a      	strb	r2, [r3, #0]
	if (move > HBintervalWidth)
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <heartBeat+0x5c>)
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <heartBeat+0x64>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d902      	bls.n	800024e <heartBeat+0x52>
		move = 0;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <heartBeat+0x5c>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	200000bc 	.word	0x200000bc
 8000258:	200004e4 	.word	0x200004e4
 800025c:	40011000 	.word	0x40011000
 8000260:	200000ba 	.word	0x200000ba

08000264 <ledStatus>:

void ledStatus() {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    switch (mode) {
 8000268:	4b43      	ldr	r3, [pc, #268]	; (8000378 <ledStatus+0x114>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d87e      	bhi.n	800036e <ledStatus+0x10a>
 8000270:	a201      	add	r2, pc, #4	; (adr r2, 8000278 <ledStatus+0x14>)
 8000272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000276:	bf00      	nop
 8000278:	08000289 	.word	0x08000289
 800027c:	08000299 	.word	0x08000299
 8000280:	080002df 	.word	0x080002df
 8000284:	08000327 	.word	0x08000327
        case 0:
            HBintervalWidth = THREESECONDSINTERVAL;
 8000288:	4b3c      	ldr	r3, [pc, #240]	; (800037c <ledStatus+0x118>)
 800028a:	221d      	movs	r2, #29
 800028c:	701a      	strb	r2, [r3, #0]
            mask = 0x55555555;
 800028e:	4b3c      	ldr	r3, [pc, #240]	; (8000380 <ledStatus+0x11c>)
 8000290:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000294:	601a      	str	r2, [r3, #0]
            break;
 8000296:	e06a      	b.n	800036e <ledStatus+0x10a>
        case 1:
            if (LEDMODE == THREESECONDS) {
 8000298:	4b3a      	ldr	r3, [pc, #232]	; (8000384 <ledStatus+0x120>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d014      	beq.n	80002d0 <ledStatus+0x6c>
                if (CARSTATUS) {
 80002a6:	4b37      	ldr	r3, [pc, #220]	; (8000384 <ledStatus+0x120>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <ledStatus+0x5e>
                    HBintervalWidth = THREESECONDSINTERVAL;
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <ledStatus+0x118>)
 80002b6:	221d      	movs	r2, #29
 80002b8:	701a      	strb	r2, [r3, #0]
                    mask = 0x5F;
 80002ba:	4b31      	ldr	r3, [pc, #196]	; (8000380 <ledStatus+0x11c>)
 80002bc:	225f      	movs	r2, #95	; 0x5f
 80002be:	601a      	str	r2, [r3, #0]
                }
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 1;
            }
            break;
 80002c0:	e055      	b.n	800036e <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 80002c2:	4b2e      	ldr	r3, [pc, #184]	; (800037c <ledStatus+0x118>)
 80002c4:	221d      	movs	r2, #29
 80002c6:	701a      	strb	r2, [r3, #0]
                    mask = 1;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <ledStatus+0x11c>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	601a      	str	r2, [r3, #0]
            break;
 80002ce:	e04e      	b.n	800036e <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 80002d0:	4b2a      	ldr	r3, [pc, #168]	; (800037c <ledStatus+0x118>)
 80002d2:	2209      	movs	r2, #9
 80002d4:	701a      	strb	r2, [r3, #0]
                mask = 1;
 80002d6:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <ledStatus+0x11c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	601a      	str	r2, [r3, #0]
            break;
 80002dc:	e047      	b.n	800036e <ledStatus+0x10a>
        case 2:
            if (LEDMODE == THREESECONDS) {
 80002de:	4b29      	ldr	r3, [pc, #164]	; (8000384 <ledStatus+0x120>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d015      	beq.n	8000318 <ledStatus+0xb4>
                if (CARSTATUS) {
 80002ec:	4b25      	ldr	r3, [pc, #148]	; (8000384 <ledStatus+0x120>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f003 0302 	and.w	r3, r3, #2
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d007      	beq.n	800030a <ledStatus+0xa6>
                    HBintervalWidth = THREESECONDSINTERVAL;
 80002fa:	4b20      	ldr	r3, [pc, #128]	; (800037c <ledStatus+0x118>)
 80002fc:	221d      	movs	r2, #29
 80002fe:	701a      	strb	r2, [r3, #0]
                    mask = 0x15F;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <ledStatus+0x11c>)
 8000302:	f240 125f 	movw	r2, #351	; 0x15f
 8000306:	601a      	str	r2, [r3, #0]
                }
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 5;
            }
            break;
 8000308:	e031      	b.n	800036e <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <ledStatus+0x118>)
 800030c:	221d      	movs	r2, #29
 800030e:	701a      	strb	r2, [r3, #0]
                    mask = 5;
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <ledStatus+0x11c>)
 8000312:	2205      	movs	r2, #5
 8000314:	601a      	str	r2, [r3, #0]
            break;
 8000316:	e02a      	b.n	800036e <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <ledStatus+0x118>)
 800031a:	2209      	movs	r2, #9
 800031c:	701a      	strb	r2, [r3, #0]
                mask = 5;
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <ledStatus+0x11c>)
 8000320:	2205      	movs	r2, #5
 8000322:	601a      	str	r2, [r3, #0]
            break;
 8000324:	e023      	b.n	800036e <ledStatus+0x10a>
        case 3:
            if (LEDMODE == THREESECONDS) {
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <ledStatus+0x120>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d015      	beq.n	8000360 <ledStatus+0xfc>
                if (CARSTATUS) {
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <ledStatus+0x120>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	f003 0302 	and.w	r3, r3, #2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	2b00      	cmp	r3, #0
 8000340:	d007      	beq.n	8000352 <ledStatus+0xee>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <ledStatus+0x118>)
 8000344:	221d      	movs	r2, #29
 8000346:	701a      	strb	r2, [r3, #0]
                    mask = 0x55F;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <ledStatus+0x11c>)
 800034a:	f240 525f 	movw	r2, #1375	; 0x55f
 800034e:	601a      	str	r2, [r3, #0]
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 21;
            }
    }
}
 8000350:	e00d      	b.n	800036e <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <ledStatus+0x118>)
 8000354:	221d      	movs	r2, #29
 8000356:	701a      	strb	r2, [r3, #0]
                    mask = 21;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <ledStatus+0x11c>)
 800035a:	2215      	movs	r2, #21
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	e006      	b.n	800036e <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <ledStatus+0x118>)
 8000362:	2209      	movs	r2, #9
 8000364:	701a      	strb	r2, [r3, #0]
                mask = 21;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <ledStatus+0x11c>)
 8000368:	2215      	movs	r2, #21
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	e7ff      	b.n	800036e <ledStatus+0x10a>
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	200000b8 	.word	0x200000b8
 800037c:	200000ba 	.word	0x200000ba
 8000380:	200000bc 	.word	0x200000bc
 8000384:	200004d4 	.word	0x200004d4

08000388 <imAlive>:

void imAlive() {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	decodeData(&datosComSerie, GETALIVE);
 800038c:	21f0      	movs	r1, #240	; 0xf0
 800038e:	4802      	ldr	r0, [pc, #8]	; (8000398 <imAlive+0x10>)
 8000390:	f000 fa30 	bl	80007f4 <decodeData>
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000c4 	.word	0x200000c4

0800039c <buttonsStatus>:

void buttonsStatus(_sButton *buttons, uint8_t index) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
    switch(buttons->estado){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	f200 80b6 	bhi.w	800051e <buttonsStatus+0x182>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <buttonsStatus+0x1c>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003c9 	.word	0x080003c9
 80003bc:	080003db 	.word	0x080003db
 80003c0:	0800044f 	.word	0x0800044f
 80003c4:	0800046d 	.word	0x0800046d
        case UP:
            if (buttons->event == EV_PRESSED) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	785b      	ldrb	r3, [r3, #1]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	f040 80a1 	bne.w	8000514 <buttonsStatus+0x178>
                buttons->estado = FALLING;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2202      	movs	r2, #2
 80003d6:	701a      	strb	r2, [r3, #0]
            }
        break;
 80003d8:	e09c      	b.n	8000514 <buttonsStatus+0x178>
        case DOWN:
            if (buttons->event == EV_NOT_PRESSED) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	785b      	ldrb	r3, [r3, #1]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d103      	bne.n	80003ea <buttonsStatus+0x4e>
                buttons->estado = RISING;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2203      	movs	r2, #3
 80003e6:	701a      	strb	r2, [r3, #0]
							ledStatus();
						}
					}
				}
            }
        break;
 80003e8:	e096      	b.n	8000518 <buttonsStatus+0x17c>
				if ((CARSTATUS == WORKING) && (buttons->timePush > 300)) { // SE DETIENE EL MODO, LED EN PERIODO DE 3 SEGUNDOS. MAS DE 3000ms
 80003ea:	4b4f      	ldr	r3, [pc, #316]	; (8000528 <buttonsStatus+0x18c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d011      	beq.n	800041c <buttonsStatus+0x80>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000400:	d90c      	bls.n	800041c <buttonsStatus+0x80>
					LEDMODE = THREESECONDS;
 8000402:	4a49      	ldr	r2, [pc, #292]	; (8000528 <buttonsStatus+0x18c>)
 8000404:	7813      	ldrb	r3, [r2, #0]
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	7013      	strb	r3, [r2, #0]
					CARSTATUS = RESTING;
 800040c:	4a46      	ldr	r2, [pc, #280]	; (8000528 <buttonsStatus+0x18c>)
 800040e:	7813      	ldrb	r3, [r2, #0]
 8000410:	f36f 0341 	bfc	r3, #1, #1
 8000414:	7013      	strb	r3, [r2, #0]
					ledStatus();
 8000416:	f7ff ff25 	bl	8000264 <ledStatus>
        break;
 800041a:	e07d      	b.n	8000518 <buttonsStatus+0x17c>
					if (buttons->timePush >= 500) { // SE VUELVE AL PERIODO DE 3 SEGUNDOS Y SE CANCELA EL INICIO. MAS DE 5000ms
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000424:	d307      	bcc.n	8000436 <buttonsStatus+0x9a>
						LEDMODE = THREESECONDS;
 8000426:	4a40      	ldr	r2, [pc, #256]	; (8000528 <buttonsStatus+0x18c>)
 8000428:	7813      	ldrb	r3, [r2, #0]
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	7013      	strb	r3, [r2, #0]
						ledStatus();
 8000430:	f7ff ff18 	bl	8000264 <ledStatus>
        break;
 8000434:	e070      	b.n	8000518 <buttonsStatus+0x17c>
						if (buttons->timePush > 100) { // SE MANTIENE PRESIONADO EL BOTON POR MAS DE UN SEGUNDO, EMPIEZA SECUENCIA DE 1 SEG. MAS DE 1000ms
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2b64      	cmp	r3, #100	; 0x64
 800043c:	d96c      	bls.n	8000518 <buttonsStatus+0x17c>
							LEDMODE = ONESECOND;
 800043e:	4a3a      	ldr	r2, [pc, #232]	; (8000528 <buttonsStatus+0x18c>)
 8000440:	7813      	ldrb	r3, [r2, #0]
 8000442:	f36f 0300 	bfc	r3, #0, #1
 8000446:	7013      	strb	r3, [r2, #0]
							ledStatus();
 8000448:	f7ff ff0c 	bl	8000264 <ledStatus>
        break;
 800044c:	e064      	b.n	8000518 <buttonsStatus+0x17c>
        case FALLING:
            if (buttons->event == EV_PRESSED) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d106      	bne.n	8000464 <buttonsStatus+0xc8>
                buttons->estado = DOWN;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
                buttons->timePush = 0; // SE INICIA EL CRONOMETRO DE PULSADO
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2200      	movs	r2, #0
 8000460:	605a      	str	r2, [r3, #4]
            } else {
                buttons->estado = UP;
            }
        break;
 8000462:	e05c      	b.n	800051e <buttonsStatus+0x182>
                buttons->estado = UP;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
        break;
 800046a:	e058      	b.n	800051e <buttonsStatus+0x182>
        case RISING:
            if (buttons->event == EV_NOT_PRESSED) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	785b      	ldrb	r3, [r3, #1]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d149      	bne.n	8000508 <buttonsStatus+0x16c>
                buttons->estado = UP;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
                if ((CARSTATUS == RESTING) && (buttons->timePush >= 10)) { // HACE ALGO SOLO SI SE SUELTA EL BOTON PRESIONANDOLO POR MAS DE 100 MS
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <buttonsStatus+0x18c>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d132      	bne.n	80004ee <buttonsStatus+0x152>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b09      	cmp	r3, #9
 800048e:	d92e      	bls.n	80004ee <buttonsStatus+0x152>
                    if (buttons->timePush <= 100) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b64      	cmp	r3, #100	; 0x64
 8000496:	d814      	bhi.n	80004c2 <buttonsStatus+0x126>
                        mode++;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <buttonsStatus+0x190>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <buttonsStatus+0x190>)
 80004a2:	701a      	strb	r2, [r3, #0]
                        if (mode == MODE3+1) {
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <buttonsStatus+0x190>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	d102      	bne.n	80004b2 <buttonsStatus+0x116>
                            mode = IDLE;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <buttonsStatus+0x190>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
                        }
                        LEDMODE = THREESECONDS;
 80004b2:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <buttonsStatus+0x18c>)
 80004b4:	7813      	ldrb	r3, [r2, #0]
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	7013      	strb	r3, [r2, #0]
                        ledStatus();
 80004bc:	f7ff fed2 	bl	8000264 <ledStatus>
                    if (buttons->timePush <= 100) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 80004c0:	e026      	b.n	8000510 <buttonsStatus+0x174>
                    } else {
                        if ((buttons->timePush < 500) && (mode != IDLE)) { // SI EL MODO DEL AUTO NO ES IDLE SE INICIA EL MODO SELECCIONADO Y SE PONE EL LED EN MODO ON. MENOS DE 5000ms
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004ca:	d221      	bcs.n	8000510 <buttonsStatus+0x174>
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <buttonsStatus+0x190>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d01d      	beq.n	8000510 <buttonsStatus+0x174>
                            LEDMODE = THREESECONDS;
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <buttonsStatus+0x18c>)
 80004d6:	7813      	ldrb	r3, [r2, #0]
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	7013      	strb	r3, [r2, #0]
                            CARSTATUS = WORKING;
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <buttonsStatus+0x18c>)
 80004e0:	7813      	ldrb	r3, [r2, #0]
 80004e2:	f043 0302 	orr.w	r3, r3, #2
 80004e6:	7013      	strb	r3, [r2, #0]
                            ledStatus();
 80004e8:	f7ff febc 	bl	8000264 <ledStatus>
                    if (buttons->timePush <= 100) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 80004ec:	e010      	b.n	8000510 <buttonsStatus+0x174>
                        }
                    }
                } else {
                    if (buttons->timePush <= 300) { // SI NO SE SUELTA DESPUES DE LOS 3000 MS SE VUELVE A TRABAJAR
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80004f6:	d811      	bhi.n	800051c <buttonsStatus+0x180>
                        LEDMODE = THREESECONDS;
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <buttonsStatus+0x18c>)
 80004fa:	7813      	ldrb	r3, [r2, #0]
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	7013      	strb	r3, [r2, #0]
                        ledStatus();
 8000502:	f7ff feaf 	bl	8000264 <ledStatus>
                    }
                }
            } else {
                buttons->estado = DOWN;
            }
        break;
 8000506:	e009      	b.n	800051c <buttonsStatus+0x180>
                buttons->estado = DOWN;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
        break;
 800050e:	e005      	b.n	800051c <buttonsStatus+0x180>
                    if (buttons->timePush <= 100) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 8000510:	bf00      	nop
        break;
 8000512:	e003      	b.n	800051c <buttonsStatus+0x180>
        break;
 8000514:	bf00      	nop
 8000516:	e002      	b.n	800051e <buttonsStatus+0x182>
        break;
 8000518:	bf00      	nop
 800051a:	e000      	b.n	800051e <buttonsStatus+0x182>
        break;
 800051c:	bf00      	nop
    }
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200004d4 	.word	0x200004d4
 800052c:	200000b8 	.word	0x200000b8

08000530 <inicializaButtons>:

void inicializaButtons(_sButton *buttons) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    buttons->estado = UP;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
    buttons->timePush = 500;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000544:	605a      	str	r2, [r3, #4]
    buttons->event = EV_NONE;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2202      	movs	r2, #2
 800054a:	705a      	strb	r2, [r3, #1]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <debounceTask>:

void debounceTask() {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	debounceTimer20ms = 2;
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <debounceTask+0x84>)
 8000560:	2202      	movs	r2, #2
 8000562:	701a      	strb	r2, [r3, #0]
    for (uint8_t index = 0; index < NUMBUTTONS; index++){
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	e030      	b.n	80005cc <debounceTask+0x74>
        if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) & (1 << index)){
 800056a:	2101      	movs	r1, #1
 800056c:	481c      	ldr	r0, [pc, #112]	; (80005e0 <debounceTask+0x88>)
 800056e:	f001 f969 	bl	8001844 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	fa42 f303 	asr.w	r3, r2, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00a      	beq.n	800059a <debounceTask+0x42>
            myButtons[index].event = EV_NOT_PRESSED;
 8000584:	79fa      	ldrb	r2, [r7, #7]
 8000586:	4917      	ldr	r1, [pc, #92]	; (80005e4 <debounceTask+0x8c>)
 8000588:	4613      	mov	r3, r2
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4413      	add	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	3301      	adds	r3, #1
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	e009      	b.n	80005ae <debounceTask+0x56>
        } else {
            myButtons[index].event = EV_PRESSED;
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	4911      	ldr	r1, [pc, #68]	; (80005e4 <debounceTask+0x8c>)
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	3301      	adds	r3, #1
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
        }
        buttonsStatus(&myButtons[index], index);
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <debounceTask+0x8c>)
 80005ba:	4413      	add	r3, r2
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff feeb 	bl	800039c <buttonsStatus>
    for (uint8_t index = 0; index < NUMBUTTONS; index++){
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	3301      	adds	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0cb      	beq.n	800056a <debounceTask+0x12>
    }
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200004d2 	.word	0x200004d2
 80005e0:	40010800 	.word	0x40010800
 80005e4:	200004d8 	.word	0x200004d8

080005e8 <decodeProtocol>:

void decodeProtocol(_sDato *datosCom) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    static uint8_t nBytes=0;
    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy) {
 80005f6:	e0ec      	b.n	80007d2 <decodeProtocol+0x1ea>
        switch (estadoProtocolo) {
 80005f8:	4b7b      	ldr	r3, [pc, #492]	; (80007e8 <decodeProtocol+0x200>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	f200 80e4 	bhi.w	80007ca <decodeProtocol+0x1e2>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <decodeProtocol+0x20>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000625 	.word	0x08000625
 800060c:	0800064d 	.word	0x0800064d
 8000610:	08000681 	.word	0x08000681
 8000614:	080006b5 	.word	0x080006b5
 8000618:	080006e9 	.word	0x080006e9
 800061c:	0800071d 	.word	0x0800071d
 8000620:	0800075f 	.word	0x0800075f
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	b2d1      	uxtb	r1, r2
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	70d1      	strb	r1, [r2, #3]
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	2b55      	cmp	r3, #85	; 0x55
 800063a:	f040 80ca 	bne.w	80007d2 <decodeProtocol+0x1ea>
                    estadoProtocolo=HEADER_1;
 800063e:	4b6a      	ldr	r3, [pc, #424]	; (80007e8 <decodeProtocol+0x200>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	705a      	strb	r2, [r3, #1]
                }
                break;
 800064a:	e0c2      	b.n	80007d2 <decodeProtocol+0x1ea>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	b2d1      	uxtb	r1, r2
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	70d1      	strb	r1, [r2, #3]
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	2b4e      	cmp	r3, #78	; 0x4e
 8000662:	d103      	bne.n	800066c <decodeProtocol+0x84>
                    estadoProtocolo=HEADER_2;
 8000664:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <decodeProtocol+0x200>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e0b2      	b.n	80007d2 <decodeProtocol+0x1ea>
                else{
                    datosCom->indexReadRx--;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	78db      	ldrb	r3, [r3, #3]
 8000670:	3b01      	subs	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	70da      	strb	r2, [r3, #3]
                    estadoProtocolo=START;
 8000678:	4b5b      	ldr	r3, [pc, #364]	; (80007e8 <decodeProtocol+0x200>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800067e:	e0a8      	b.n	80007d2 <decodeProtocol+0x1ea>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	78db      	ldrb	r3, [r3, #3]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	b2d1      	uxtb	r1, r2
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	70d1      	strb	r1, [r2, #3]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	799b      	ldrb	r3, [r3, #6]
 8000694:	2b45      	cmp	r3, #69	; 0x45
 8000696:	d103      	bne.n	80006a0 <decodeProtocol+0xb8>
                    estadoProtocolo=HEADER_3;
 8000698:	4b53      	ldr	r3, [pc, #332]	; (80007e8 <decodeProtocol+0x200>)
 800069a:	2203      	movs	r2, #3
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e098      	b.n	80007d2 <decodeProtocol+0x1ea>
                else{
                    datosCom->indexReadRx--;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	78db      	ldrb	r3, [r3, #3]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	70da      	strb	r2, [r3, #3]
                    estadoProtocolo=START;
 80006ac:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <decodeProtocol+0x200>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006b2:	e08e      	b.n	80007d2 <decodeProtocol+0x1ea>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	78db      	ldrb	r3, [r3, #3]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	b2d1      	uxtb	r1, r2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	70d1      	strb	r1, [r2, #3]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	799b      	ldrb	r3, [r3, #6]
 80006c8:	2b52      	cmp	r3, #82	; 0x52
 80006ca:	d103      	bne.n	80006d4 <decodeProtocol+0xec>
					estadoProtocolo=NBYTES;
 80006cc:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <decodeProtocol+0x200>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e07e      	b.n	80007d2 <decodeProtocol+0x1ea>
				else{
					datosCom->indexReadRx--;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	3b01      	subs	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	70da      	strb	r2, [r3, #3]
					estadoProtocolo=START;
 80006e0:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <decodeProtocol+0x200>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80006e6:	e074      	b.n	80007d2 <decodeProtocol+0x1ea>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx; // 4 posiciones mas adelante tenes el ID en nuestro caso, por los datos del numero de auto y uno mas
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	78da      	ldrb	r2, [r3, #3]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	701a      	strb	r2, [r3, #0]
                posicionComand = datosCom->indexStart + POSID;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3304      	adds	r3, #4
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b3c      	ldr	r3, [pc, #240]	; (80007ec <decodeProtocol+0x204>)
 80006fa:	701a      	strb	r2, [r3, #0]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	b2d1      	uxtb	r1, r2
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	70d1      	strb	r1, [r2, #3]
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	799a      	ldrb	r2, [r3, #6]
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <decodeProtocol+0x208>)
 8000712:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000714:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <decodeProtocol+0x200>)
 8000716:	2205      	movs	r2, #5
 8000718:	701a      	strb	r2, [r3, #0]
                break;
 800071a:	e05a      	b.n	80007d2 <decodeProtocol+0x1ea>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	78db      	ldrb	r3, [r3, #3]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	b2d1      	uxtb	r1, r2
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	70d1      	strb	r1, [r2, #3]
 8000728:	461a      	mov	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	799b      	ldrb	r3, [r3, #6]
 8000730:	2b3a      	cmp	r3, #58	; 0x3a
 8000732:	d10a      	bne.n	800074a <decodeProtocol+0x162>
                    estadoProtocolo=PAYLOAD;
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <decodeProtocol+0x200>)
 8000736:	2206      	movs	r2, #6
 8000738:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^nBytes^':';
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <decodeProtocol+0x208>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000742:	b2da      	uxtb	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	705a      	strb	r2, [r3, #1]
 8000748:	e043      	b.n	80007d2 <decodeProtocol+0x1ea>
                }
                else{
                    datosCom->indexReadRx--;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	78db      	ldrb	r3, [r3, #3]
 800074e:	3b01      	subs	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	70da      	strb	r2, [r3, #3]
                    estadoProtocolo=START;
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <decodeProtocol+0x200>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800075c:	e039      	b.n	80007d2 <decodeProtocol+0x1ea>
            case PAYLOAD:
                if (nBytes>1){
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <decodeProtocol+0x208>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d90f      	bls.n	8000786 <decodeProtocol+0x19e>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	78db      	ldrb	r3, [r3, #3]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	b2d1      	uxtb	r1, r2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	70d1      	strb	r1, [r2, #3]
 8000772:	461a      	mov	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	799a      	ldrb	r2, [r3, #6]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	4053      	eors	r3, r2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	705a      	strb	r2, [r3, #1]
                }
                nBytes--;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <decodeProtocol+0x208>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3b01      	subs	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <decodeProtocol+0x208>)
 8000790:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <decodeProtocol+0x208>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d11b      	bne.n	80007d2 <decodeProtocol+0x1ea>
                    estadoProtocolo=START;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <decodeProtocol+0x200>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	785a      	ldrb	r2, [r3, #1]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	78db      	ldrb	r3, [r3, #3]
 80007a8:	4619      	mov	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	440b      	add	r3, r1
 80007ae:	799b      	ldrb	r3, [r3, #6]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d10e      	bne.n	80007d2 <decodeProtocol+0x1ea>
                        decodeData(datosCom, datosCom->bufferRx[posicionComand]); //!< PASO LA ESTRUCTURA DATOSCOM Y PASO EL COMANDO
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <decodeProtocol+0x204>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	799b      	ldrb	r3, [r3, #6]
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f816 	bl	80007f4 <decodeData>
                    }
                }
                break;
 80007c8:	e003      	b.n	80007d2 <decodeProtocol+0x1ea>
            default:
                estadoProtocolo = START;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <decodeProtocol+0x200>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
                break;
 80007d0:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	78db      	ldrb	r3, [r3, #3]
 80007d6:	7bfa      	ldrb	r2, [r7, #15]
 80007d8:	429a      	cmp	r2, r3
 80007da:	f47f af0d 	bne.w	80005f8 <decodeProtocol+0x10>
        }
    }
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000c1 	.word	0x200000c1
 80007ec:	200000c0 	.word	0x200000c0
 80007f0:	200004e5 	.word	0x200004e5

080007f4 <decodeData>:

void decodeData(_sDato *datosCom, uint8_t COMAND) {
 80007f4:	b480      	push	{r7}
 80007f6:	b093      	sub	sp, #76	; 0x4c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
    //wifiData *wifidataPtr;
    //uint8_t *ptr;
    uint8_t auxBuffTx[50], indiceAux=0, cheksum, sizeWifiData, indexBytesToCopy=0, numBytesToCopy=0;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000806:	2300      	movs	r3, #0
 8000808:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800080c:	2300      	movs	r3, #0
 800080e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t QtAngle = 0, configModo = 0;  //i = 0
 8000812:	2300      	movs	r3, #0
 8000814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    _work w;

    auxBuffTx[indiceAux++]='U';
 800081e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000828:	3348      	adds	r3, #72	; 0x48
 800082a:	443b      	add	r3, r7
 800082c:	2255      	movs	r2, #85	; 0x55
 800082e:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='N';
 8000832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800083c:	3348      	adds	r3, #72	; 0x48
 800083e:	443b      	add	r3, r7
 8000840:	224e      	movs	r2, #78	; 0x4e
 8000842:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='E';
 8000846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000850:	3348      	adds	r3, #72	; 0x48
 8000852:	443b      	add	r3, r7
 8000854:	2245      	movs	r2, #69	; 0x45
 8000856:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='R';
 800085a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000864:	3348      	adds	r3, #72	; 0x48
 8000866:	443b      	add	r3, r7
 8000868:	2252      	movs	r2, #82	; 0x52
 800086a:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0;
 800086e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000878:	3348      	adds	r3, #72	; 0x48
 800087a:	443b      	add	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=':';
 8000882:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800088c:	3348      	adds	r3, #72	; 0x48
 800088e:	443b      	add	r3, r7
 8000890:	223a      	movs	r2, #58	; 0x3a
 8000892:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0x0C;    //!< NUMERO DE AUTO
 8000896:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008a0:	3348      	adds	r3, #72	; 0x48
 80008a2:	443b      	add	r3, r7
 80008a4:	220c      	movs	r2, #12
 80008a6:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0x00;    //!< PARA COMPLETAR EL UINT16
 80008aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008b4:	3348      	adds	r3, #72	; 0x48
 80008b6:	443b      	add	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	f803 2c3c 	strb.w	r2, [r3, #-60]

    switch (COMAND) { // NO BORRAR EL _sDato *datosCom de la funcion ya que se usa en el startconfig, agregar el comand solamente
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2bf1      	cmp	r3, #241	; 0xf1
 80008c2:	f300 80e6 	bgt.w	8000a92 <decodeData+0x29e>
 80008c6:	2ba0      	cmp	r3, #160	; 0xa0
 80008c8:	da06      	bge.n	80008d8 <decodeData+0xe4>
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	f000 80ee 	beq.w	8000aac <decodeData+0x2b8>
 80008d0:	2b12      	cmp	r3, #18
 80008d2:	f000 80c4 	beq.w	8000a5e <decodeData+0x26a>
 80008d6:	e0dc      	b.n	8000a92 <decodeData+0x29e>
 80008d8:	3ba0      	subs	r3, #160	; 0xa0
 80008da:	2b51      	cmp	r3, #81	; 0x51
 80008dc:	f200 80d9 	bhi.w	8000a92 <decodeData+0x29e>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <decodeData+0xf4>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000ab1 	.word	0x08000ab1
 80008ec:	08000ab1 	.word	0x08000ab1
 80008f0:	08000ab1 	.word	0x08000ab1
 80008f4:	08000ab1 	.word	0x08000ab1
 80008f8:	08000ab1 	.word	0x08000ab1
 80008fc:	08000ab1 	.word	0x08000ab1
 8000900:	08000ab1 	.word	0x08000ab1
 8000904:	08000ab1 	.word	0x08000ab1
 8000908:	08000ab1 	.word	0x08000ab1
 800090c:	08000a93 	.word	0x08000a93
 8000910:	08000a93 	.word	0x08000a93
 8000914:	08000a93 	.word	0x08000a93
 8000918:	08000a93 	.word	0x08000a93
 800091c:	08000a93 	.word	0x08000a93
 8000920:	08000a93 	.word	0x08000a93
 8000924:	08000a93 	.word	0x08000a93
 8000928:	08000a93 	.word	0x08000a93
 800092c:	08000a93 	.word	0x08000a93
 8000930:	08000a93 	.word	0x08000a93
 8000934:	08000a93 	.word	0x08000a93
 8000938:	08000a93 	.word	0x08000a93
 800093c:	08000a93 	.word	0x08000a93
 8000940:	08000a93 	.word	0x08000a93
 8000944:	08000a93 	.word	0x08000a93
 8000948:	08000a93 	.word	0x08000a93
 800094c:	08000a93 	.word	0x08000a93
 8000950:	08000a93 	.word	0x08000a93
 8000954:	08000a93 	.word	0x08000a93
 8000958:	08000a93 	.word	0x08000a93
 800095c:	08000a93 	.word	0x08000a93
 8000960:	08000a93 	.word	0x08000a93
 8000964:	08000a93 	.word	0x08000a93
 8000968:	08000a93 	.word	0x08000a93
 800096c:	08000a93 	.word	0x08000a93
 8000970:	08000a93 	.word	0x08000a93
 8000974:	08000a93 	.word	0x08000a93
 8000978:	08000a93 	.word	0x08000a93
 800097c:	08000a93 	.word	0x08000a93
 8000980:	08000a93 	.word	0x08000a93
 8000984:	08000a93 	.word	0x08000a93
 8000988:	08000a93 	.word	0x08000a93
 800098c:	08000a93 	.word	0x08000a93
 8000990:	08000a93 	.word	0x08000a93
 8000994:	08000a93 	.word	0x08000a93
 8000998:	08000a93 	.word	0x08000a93
 800099c:	08000a93 	.word	0x08000a93
 80009a0:	08000a93 	.word	0x08000a93
 80009a4:	08000a93 	.word	0x08000a93
 80009a8:	08000a93 	.word	0x08000a93
 80009ac:	08000a93 	.word	0x08000a93
 80009b0:	08000a93 	.word	0x08000a93
 80009b4:	08000a93 	.word	0x08000a93
 80009b8:	08000a93 	.word	0x08000a93
 80009bc:	08000a93 	.word	0x08000a93
 80009c0:	08000a93 	.word	0x08000a93
 80009c4:	08000a93 	.word	0x08000a93
 80009c8:	08000a93 	.word	0x08000a93
 80009cc:	08000a93 	.word	0x08000a93
 80009d0:	08000a93 	.word	0x08000a93
 80009d4:	08000a93 	.word	0x08000a93
 80009d8:	08000a93 	.word	0x08000a93
 80009dc:	08000a93 	.word	0x08000a93
 80009e0:	08000a93 	.word	0x08000a93
 80009e4:	08000a93 	.word	0x08000a93
 80009e8:	08000a93 	.word	0x08000a93
 80009ec:	08000a93 	.word	0x08000a93
 80009f0:	08000a93 	.word	0x08000a93
 80009f4:	08000a93 	.word	0x08000a93
 80009f8:	08000a93 	.word	0x08000a93
 80009fc:	08000a93 	.word	0x08000a93
 8000a00:	08000a93 	.word	0x08000a93
 8000a04:	08000a93 	.word	0x08000a93
 8000a08:	08000a93 	.word	0x08000a93
 8000a0c:	08000a93 	.word	0x08000a93
 8000a10:	08000a93 	.word	0x08000a93
 8000a14:	08000a93 	.word	0x08000a93
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000a93 	.word	0x08000a93
 8000a20:	08000ab1 	.word	0x08000ab1
 8000a24:	08000a93 	.word	0x08000a93
 8000a28:	08000a31 	.word	0x08000a31
 8000a2c:	08000ab1 	.word	0x08000ab1
        case GETALIVE:
            auxBuffTx[indiceAux++]=GETALIVE;
 8000a30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a3a:	3348      	adds	r3, #72	; 0x48
 8000a3c:	443b      	add	r3, r7
 8000a3e:	22f0      	movs	r2, #240	; 0xf0
 8000a40:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[indiceAux++]=ACK;
 8000a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a4e:	3348      	adds	r3, #72	; 0x48
 8000a50:	443b      	add	r3, r7
 8000a52:	220d      	movs	r2, #13
 8000a54:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x05;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	743b      	strb	r3, [r7, #16]
            break;
 8000a5c:	e029      	b.n	8000ab2 <decodeData+0x2be>
            break;
        case LEDS:

            break;
        case PULSADORES:
            auxBuffTx[indiceAux++]=PULSADORES;
 8000a5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a68:	3348      	adds	r3, #72	; 0x48
 8000a6a:	443b      	add	r3, r7
 8000a6c:	2212      	movs	r2, #18
 8000a6e:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[indiceAux++]=myButtons[0].event;
 8000a72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <decodeData+0x340>)
 8000a80:	785a      	ldrb	r2, [r3, #1]
 8000a82:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8000a86:	443b      	add	r3, r7
 8000a88:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x05;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	743b      	strb	r3, [r7, #16]
            break;
 8000a90:	e00f      	b.n	8000ab2 <decodeData+0x2be>
//            }
//            auxBuffTx[NBYTES] = 0x0C;
            break;

        default:
            auxBuffTx[indiceAux++]=0xFF;
 8000a92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a9c:	3348      	adds	r3, #72	; 0x48
 8000a9e:	443b      	add	r3, r7
 8000aa0:	22ff      	movs	r2, #255	; 0xff
 8000aa2:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x04;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	743b      	strb	r3, [r7, #16]
            break;
 8000aaa:	e002      	b.n	8000ab2 <decodeData+0x2be>
            break;
 8000aac:	bf00      	nop
 8000aae:	e000      	b.n	8000ab2 <decodeData+0x2be>
            break;
 8000ab0:	bf00      	nop
    }
    cheksum=0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    for(uint8_t a=0 ; a<indiceAux ;a++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000abe:	e021      	b.n	8000b04 <decodeData+0x310>
        cheksum ^= auxBuffTx[a];
 8000ac0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ac4:	3348      	adds	r3, #72	; 0x48
 8000ac6:	443b      	add	r3, r7
 8000ac8:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8000acc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ad0:	4053      	eors	r3, r2
 8000ad2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        datosCom->bufferTx[datosCom->indexWriteTx++] = auxBuffTx[a];
 8000ad6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	1c59      	adds	r1, r3, #1
 8000ae0:	b2c8      	uxtb	r0, r1
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	7108      	strb	r0, [r1, #4]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8000aec:	443b      	add	r3, r7
 8000aee:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	440b      	add	r3, r1
 8000af6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    for(uint8_t a=0 ; a<indiceAux ;a++) {
 8000afa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000afe:	3301      	adds	r3, #1
 8000b00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000b04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000b08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3d7      	bcc.n	8000ac0 <decodeData+0x2cc>
    }
        datosCom->bufferTx[datosCom->indexWriteTx++] = cheksum;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	791b      	ldrb	r3, [r3, #4]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	b2d1      	uxtb	r1, r2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7111      	strb	r1, [r2, #4]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000b26:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8000b2a:	bf00      	nop
 8000b2c:	374c      	adds	r7, #76	; 0x4c
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	200004d8 	.word	0x200004d8

08000b38 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom, uint8_t source){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
    if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	78da      	ldrb	r2, [r3, #3]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d002      	beq.n	8000b56 <comunicationsTask+0x1e>
        decodeProtocol(datosCom);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fd49 	bl	80005e8 <decodeProtocol>
    }

    if(datosCom->indexReadTx!=datosCom->indexWriteTx){
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	795a      	ldrb	r2, [r3, #5]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d016      	beq.n	8000b90 <comunicationsTask+0x58>
        if(source){
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d013      	beq.n	8000b90 <comunicationsTask+0x58>
        	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <comunicationsTask+0x60>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	2b80      	cmp	r3, #128	; 0x80
 8000b74:	d10c      	bne.n	8000b90 <comunicationsTask+0x58>
				USART1->DR = datosCom->bufferTx[datosCom->indexReadTx++];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	b2d1      	uxtb	r1, r2
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	7151      	strb	r1, [r2, #5]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <comunicationsTask+0x64>)
 8000b8e:	605a      	str	r2, [r3, #4]
				//HAL_UART_Transmit(&huart1, &datosCom->bufferTx[datosCom->indexReadTx++], 1, 0);
			}
        } //else
           // myWifi.writeWifiData(&datosCom->bufferTx[datosCom->indexReadTx++],1);
    }
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000070 	.word	0x20000070
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f000 faa7 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f871 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bae:	f000 f92f 	bl	8000e10 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bb2:	f000 f8b3 	bl	8000d1c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000bb6:	f000 f901 	bl	8000dbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000bba:	482a      	ldr	r0, [pc, #168]	; (8000c64 <main+0xc4>)
 8000bbc:	f001 fad2 	bl	8002164 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <main+0xc8>)
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <main+0xc8>)
 8000bc8:	4413      	add	r3, r2
 8000bca:	3306      	adds	r3, #6
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4826      	ldr	r0, [pc, #152]	; (8000c6c <main+0xcc>)
 8000bd2:	f001 fec5 	bl	8002960 <HAL_UART_Receive_IT>

  time100ms=10;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <main+0xd0>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	701a      	strb	r2, [r3, #0]
  LEDMODE=THREESECONDS;
 8000bdc:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <main+0xd4>)
 8000bde:	7813      	ldrb	r3, [r2, #0]
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	7013      	strb	r3, [r2, #0]
  mask=0x55555555;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <main+0xd8>)
 8000be8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000bec:	601a      	str	r2, [r3, #0]
  HBintervalWidth = THREESECONDSINTERVAL;
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <main+0xdc>)
 8000bf0:	221d      	movs	r2, #29
 8000bf2:	701a      	strb	r2, [r3, #0]

  mode=IDLE;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <main+0xe0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
  CARSTATUS=RESTING;
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <main+0xd4>)
 8000bfc:	7813      	ldrb	r3, [r2, #0]
 8000bfe:	f36f 0341 	bfc	r3, #1, #1
 8000c02:	7013      	strb	r3, [r2, #0]

  for (uint8_t index = 0; index < NUMBUTTONS; index++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	e00c      	b.n	8000c24 <main+0x84>
	  inicializaButtons(&myButtons[index]);
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <main+0xe4>)
 8000c16:	4413      	add	r3, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc89 	bl	8000530 <inicializaButtons>
  for (uint8_t index = 0; index < NUMBUTTONS; index++) {
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	3301      	adds	r3, #1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0ef      	beq.n	8000c0a <main+0x6a>
  }
  debounceTimer20ms = 0;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <main+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (!time100ms) {
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <main+0xd0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <main+0xa6>
		heartBeat();
 8000c38:	f7ff fae0 	bl	80001fc <heartBeat>
		imAlive();
 8000c3c:	f7ff fba4 	bl	8000388 <imAlive>
		time100ms = 10;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <main+0xd0>)
 8000c42:	220a      	movs	r2, #10
 8000c44:	701a      	strb	r2, [r3, #0]
	}
	if (!debounceTimer20ms)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <main+0xe8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <main+0xb2>
		debounceTask();
 8000c4e:	f7ff fc83 	bl	8000558 <debounceTask>

	//myWifi.taskWifi();
	comunicationsTask(&datosComSerie,true);
 8000c52:	2101      	movs	r1, #1
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <main+0xc8>)
 8000c56:	f7ff ff6f 	bl	8000b38 <comunicationsTask>
	comunicationsTask(&datosComWifi,false);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <main+0xec>)
 8000c5e:	f7ff ff6b 	bl	8000b38 <comunicationsTask>
	if (!time100ms) {
 8000c62:	e7e5      	b.n	8000c30 <main+0x90>
 8000c64:	20000028 	.word	0x20000028
 8000c68:	200000c4 	.word	0x200000c4
 8000c6c:	20000070 	.word	0x20000070
 8000c70:	200000b9 	.word	0x200000b9
 8000c74:	200004d4 	.word	0x200004d4
 8000c78:	200000bc 	.word	0x200000bc
 8000c7c:	200000ba 	.word	0x200000ba
 8000c80:	200000b8 	.word	0x200000b8
 8000c84:	200004d8 	.word	0x200004d8
 8000c88:	200004d2 	.word	0x200004d2
 8000c8c:	200002cc 	.word	0x200002cc

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	; 0x40
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fb96 	bl	80033d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fde3 	bl	80018a4 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f8ee 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2302      	movs	r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f850 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d0e:	f000 f8d9 	bl	8000ec4 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3740      	adds	r7, #64	; 0x40
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <MX_TIM1_Init+0x9c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d40:	2247      	movs	r2, #71	; 0x47
 8000d42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d66:	f001 f9ad 	bl	80020c4 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 f8a8 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d82:	f001 fb49 	bl	8002418 <HAL_TIM_ConfigClockSource>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d8c:	f000 f89a 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d9e:	f001 fd1f 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da8:	f000 f88c 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000028 	.word	0x20000028
 8000db8:	40012c00 	.word	0x40012c00

08000dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_USART1_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000df4:	f001 fd64 	bl	80028c0 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f861 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000070 	.word	0x20000070
 8000e0c:	40013800 	.word	0x40013800

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_GPIO_Init+0xa8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <MX_GPIO_Init+0xac>)
 8000e74:	f000 fcfd 	bl	8001872 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <MX_GPIO_Init+0xac>)
 8000e92:	f000 fb53 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_GPIO_Init+0xb0>)
 8000eaa:	f000 fb47 	bl	800153c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_MspInit+0x5c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_MspInit+0x60>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_MspInit+0x60>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d113      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f50:	6193      	str	r3, [r2, #24]
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2019      	movs	r0, #25
 8000f64:	f000 fa01 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f68:	2019      	movs	r0, #25
 8000f6a:	f000 fa1a 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_UART_MspInit+0x9c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d139      	bne.n	8001014 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_UART_MspInit+0xa0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <HAL_UART_MspInit+0xa0>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_UART_MspInit+0xa0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_UART_MspInit+0xa0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a18      	ldr	r2, [pc, #96]	; (8001020 <HAL_UART_MspInit+0xa0>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_UART_MspInit+0xa0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_UART_MspInit+0xa4>)
 8000fe6:	f000 faa9 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_UART_MspInit+0xa4>)
 8001000:	f000 fa9c 	bl	800153c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2025      	movs	r0, #37	; 0x25
 800100a:	f000 f9ae 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800100e:	2025      	movs	r0, #37	; 0x25
 8001010:	f000 f9c7 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013800 	.word	0x40013800
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f889 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM1_UP_IRQHandler+0x10>)
 800107e:	f001 f8c3 	bl	8002208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000028 	.word	0x20000028

0800108c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <USART1_IRQHandler+0x10>)
 8001092:	f001 fc8b 	bl	80029ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000070 	.word	0x20000070

080010a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ac:	f7ff fff8 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010b2:	490c      	ldr	r1, [pc, #48]	; (80010e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c8:	4c09      	ldr	r4, [pc, #36]	; (80010f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 f983 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010da:	f7ff fd61 	bl	8000ba0 <main>
  bx lr
 80010de:	4770      	bx	lr
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010e8:	08003474 	.word	0x08003474
  ldr r2, =_sbss
 80010ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010f0:	200004ec 	.word	0x200004ec

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x28>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f923 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fedc 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f93b 	bl	80013be <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f903 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x1c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_IncTick+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_IncTick+0x20>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200004e8 	.word	0x200004e8

080011a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_GetTick+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	200004e8 	.word	0x200004e8

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db0b      	blt.n	800124a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	4906      	ldr	r1, [pc, #24]	; (8001254 <__NVIC_EnableIRQ+0x34>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff90 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff2d 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff42 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff90 	bl	80012ac <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5f 	bl	8001258 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff35 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d008      	beq.n	8001400 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2204      	movs	r2, #4
 80013f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e020      	b.n	8001442 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 020e 	bic.w	r2, r2, #14
 800140e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d005      	beq.n	8001470 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2204      	movs	r2, #4
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e051      	b.n	8001514 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 020e 	bic.w	r2, r2, #14
 800147e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_DMA_Abort_IT+0xd4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d029      	beq.n	80014ee <HAL_DMA_Abort_IT+0xa2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_DMA_Abort_IT+0xd8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d022      	beq.n	80014ea <HAL_DMA_Abort_IT+0x9e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_DMA_Abort_IT+0xdc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01a      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x98>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_DMA_Abort_IT+0xe0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d012      	beq.n	80014de <HAL_DMA_Abort_IT+0x92>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_DMA_Abort_IT+0xe4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00a      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x8c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_DMA_Abort_IT+0xe8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d102      	bne.n	80014d2 <HAL_DMA_Abort_IT+0x86>
 80014cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014d0:	e00e      	b.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
 80014d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d6:	e00b      	b.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
 80014d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014dc:	e008      	b.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	e005      	b.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
 80014e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e8:	e002      	b.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
 80014ea:	2310      	movs	r3, #16
 80014ec:	e000      	b.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
 80014ee:	2301      	movs	r3, #1
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_DMA_Abort_IT+0xec>)
 80014f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
    } 
  }
  return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020008 	.word	0x40020008
 8001524:	4002001c 	.word	0x4002001c
 8001528:	40020030 	.word	0x40020030
 800152c:	40020044 	.word	0x40020044
 8001530:	40020058 	.word	0x40020058
 8001534:	4002006c 	.word	0x4002006c
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	e169      	b.n	8001824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001550:	2201      	movs	r2, #1
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8158 	bne.w	800181e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a9a      	ldr	r2, [pc, #616]	; (80017dc <HAL_GPIO_Init+0x2a0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d05e      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001578:	4a98      	ldr	r2, [pc, #608]	; (80017dc <HAL_GPIO_Init+0x2a0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d875      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800157e:	4a98      	ldr	r2, [pc, #608]	; (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d058      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001584:	4a96      	ldr	r2, [pc, #600]	; (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d86f      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800158a:	4a96      	ldr	r2, [pc, #600]	; (80017e4 <HAL_GPIO_Init+0x2a8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d052      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001590:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <HAL_GPIO_Init+0x2a8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d869      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 8001596:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <HAL_GPIO_Init+0x2ac>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04c      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 800159c:	4a92      	ldr	r2, [pc, #584]	; (80017e8 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d863      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015a2:	4a92      	ldr	r2, [pc, #584]	; (80017ec <HAL_GPIO_Init+0x2b0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d046      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 80015a8:	4a90      	ldr	r2, [pc, #576]	; (80017ec <HAL_GPIO_Init+0x2b0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d85d      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d82a      	bhi.n	8001608 <HAL_GPIO_Init+0xcc>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d859      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_GPIO_Init+0x80>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001623 	.word	0x08001623
 80015c8:	08001665 	.word	0x08001665
 80015cc:	0800166b 	.word	0x0800166b
 80015d0:	0800166b 	.word	0x0800166b
 80015d4:	0800166b 	.word	0x0800166b
 80015d8:	0800166b 	.word	0x0800166b
 80015dc:	0800166b 	.word	0x0800166b
 80015e0:	0800166b 	.word	0x0800166b
 80015e4:	0800166b 	.word	0x0800166b
 80015e8:	0800166b 	.word	0x0800166b
 80015ec:	0800166b 	.word	0x0800166b
 80015f0:	0800166b 	.word	0x0800166b
 80015f4:	0800166b 	.word	0x0800166b
 80015f8:	0800166b 	.word	0x0800166b
 80015fc:	0800166b 	.word	0x0800166b
 8001600:	08001619 	.word	0x08001619
 8001604:	0800162d 	.word	0x0800162d
 8001608:	4a79      	ldr	r2, [pc, #484]	; (80017f0 <HAL_GPIO_Init+0x2b4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160e:	e02c      	b.n	800166a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e029      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e024      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	3308      	adds	r3, #8
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e01f      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e01a      	b.n	800166c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163e:	2304      	movs	r3, #4
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e013      	b.n	800166c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	611a      	str	r2, [r3, #16]
          break;
 8001656:	e009      	b.n	800166c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	615a      	str	r2, [r3, #20]
          break;
 8001662:	e003      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x130>
          break;
 800166a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2bff      	cmp	r3, #255	; 0xff
 8001670:	d801      	bhi.n	8001676 <HAL_GPIO_Init+0x13a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	e001      	b.n	800167a <HAL_GPIO_Init+0x13e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d802      	bhi.n	8001688 <HAL_GPIO_Init+0x14c>
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x152>
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	3b08      	subs	r3, #8
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	210f      	movs	r1, #15
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80b1 	beq.w	800181e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a40      	ldr	r2, [pc, #256]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_GPIO_Init+0x1ec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3f      	ldr	r2, [pc, #252]	; (8001800 <HAL_GPIO_Init+0x2c4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_Init+0x1e8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3e      	ldr	r2, [pc, #248]	; (8001804 <HAL_GPIO_Init+0x2c8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x1e4>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_Init+0x1e0>
 8001718:	2303      	movs	r3, #3
 800171a:	e006      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 800171c:	2304      	movs	r3, #4
 800171e:	e004      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001720:	2302      	movs	r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001728:	2300      	movs	r3, #0
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173a:	492f      	ldr	r1, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	492c      	ldr	r1, [pc, #176]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4928      	ldr	r1, [pc, #160]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	491e      	ldr	r1, [pc, #120]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4918      	ldr	r1, [pc, #96]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4914      	ldr	r1, [pc, #80]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d021      	beq.n	8001810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e021      	b.n	800181e <HAL_GPIO_Init+0x2e2>
 80017da:	bf00      	nop
 80017dc:	10320000 	.word	0x10320000
 80017e0:	10310000 	.word	0x10310000
 80017e4:	10220000 	.word	0x10220000
 80017e8:	10210000 	.word	0x10210000
 80017ec:	10120000 	.word	0x10120000
 80017f0:	10110000 	.word	0x10110000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40010c00 	.word	0x40010c00
 8001804:	40011000 	.word	0x40011000
 8001808:	40011400 	.word	0x40011400
 800180c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	4909      	ldr	r1, [pc, #36]	; (8001840 <HAL_GPIO_Init+0x304>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f47f ae8e 	bne.w	8001550 <HAL_GPIO_Init+0x14>
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	372c      	adds	r7, #44	; 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001882:	787b      	ldrb	r3, [r7, #1]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800188e:	e003      	b.n	8001898 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	041a      	lsls	r2, r3, #16
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e272      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8087 	beq.w	80019d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c4:	4b92      	ldr	r3, [pc, #584]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d00c      	beq.n	80018ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018d0:	4b8f      	ldr	r3, [pc, #572]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d112      	bne.n	8001902 <HAL_RCC_OscConfig+0x5e>
 80018dc:	4b8c      	ldr	r3, [pc, #560]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e8:	d10b      	bne.n	8001902 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d06c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x12c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d168      	bne.n	80019d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e24c      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x76>
 800190c:	4b80      	ldr	r3, [pc, #512]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a7f      	ldr	r2, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e02e      	b.n	8001978 <HAL_RCC_OscConfig+0xd4>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x98>
 8001922:	4b7b      	ldr	r3, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7a      	ldr	r2, [pc, #488]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a77      	ldr	r2, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xd4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0xbc>
 8001946:	4b72      	ldr	r3, [pc, #456]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a71      	ldr	r2, [pc, #452]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xd4>
 8001960:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a67      	ldr	r2, [pc, #412]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fc12 	bl	80011a8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fc0e 	bl	80011a8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e200      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xe4>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fbfe 	bl	80011a8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fbfa 	bl	80011a8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1ec      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x10c>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d063      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019de:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d11c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x18c>
 80019f6:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x176>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1c0      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4939      	ldr	r1, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	e03a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fbb3 	bl	80011a8 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff fbaf 	bl	80011a8 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1a1      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4927      	ldr	r1, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fb92 	bl	80011a8 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff fb8e 	bl	80011a8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e180      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d03a      	beq.n	8001b28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d019      	beq.n	8001aee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fb72 	bl	80011a8 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fb6e 	bl	80011a8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e160      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f000 face 	bl	8002088 <RCC_Delay>
 8001aec:	e01c      	b.n	8001b28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fb58 	bl	80011a8 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afa:	e00f      	b.n	8001b1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb54 	bl	80011a8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d908      	bls.n	8001b1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e146      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	42420000 	.word	0x42420000
 8001b18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	4b92      	ldr	r3, [pc, #584]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e9      	bne.n	8001afc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80a6 	beq.w	8001c82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3a:	4b8b      	ldr	r3, [pc, #556]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10d      	bne.n	8001b62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a87      	ldr	r2, [pc, #540]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]
 8001b52:	4b85      	ldr	r3, [pc, #532]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <HAL_RCC_OscConfig+0x4c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d118      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x4c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7e      	ldr	r2, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x4c8>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb15 	bl	80011a8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff fb11 	bl	80011a8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	; 0x64
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e103      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0x4c8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x312>
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a6e      	ldr	r2, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	e02d      	b.n	8001c12 <HAL_RCC_OscConfig+0x36e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x334>
 8001bbe:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	e01c      	b.n	8001c12 <HAL_RCC_OscConfig+0x36e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x356>
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a60      	ldr	r2, [pc, #384]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6213      	str	r3, [r2, #32]
 8001bf8:	e00b      	b.n	8001c12 <HAL_RCC_OscConfig+0x36e>
 8001bfa:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a5a      	ldr	r2, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d015      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fac5 	bl	80011a8 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff fac1 	bl	80011a8 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0b1      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c38:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ee      	beq.n	8001c22 <HAL_RCC_OscConfig+0x37e>
 8001c44:	e014      	b.n	8001c70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff faaf 	bl	80011a8 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff faab 	bl	80011a8 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e09b      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c64:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ee      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d105      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a3b      	ldr	r2, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d061      	beq.n	8001d5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d146      	bne.n	8001d2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <HAL_RCC_OscConfig+0x4cc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fa7f 	bl	80011a8 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fa7b 	bl	80011a8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e06d      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d108      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4921      	ldr	r1, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a19      	ldr	r1, [r3, #32]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	491b      	ldr	r1, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa4f 	bl	80011a8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fa4b 	bl	80011a8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e03d      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x46a>
 8001d2c:	e035      	b.n	8001d9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_RCC_OscConfig+0x4cc>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa38 	bl	80011a8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff fa34 	bl	80011a8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e026      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x498>
 8001d5a:	e01e      	b.n	8001d9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e019      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x500>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0d0      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d910      	bls.n	8001dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0207 	bic.w	r2, r3, #7
 8001dd2:	4965      	ldr	r1, [pc, #404]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0b8      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	494d      	ldr	r1, [pc, #308]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d040      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d115      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e07f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e073      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06b      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4936      	ldr	r1, [pc, #216]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f986 	bl	80011a8 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff f982 	bl	80011a8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e053      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d210      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4922      	ldr	r1, [pc, #136]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e032      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4916      	ldr	r1, [pc, #88]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	490e      	ldr	r1, [pc, #56]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f36:	f000 f821 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	490a      	ldr	r1, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	5ccb      	ldrb	r3, [r1, r3]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1cc>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1d0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f8e4 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08003440 	.word	0x08003440
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x30>
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001faa:	e027      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fae:	613b      	str	r3, [r7, #16]
      break;
 8001fb0:	e027      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0c9b      	lsrs	r3, r3, #18
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0c5b      	lsrs	r3, r3, #17
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fde:	fb03 f202 	mul.w	r2, r3, r2
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e004      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	613b      	str	r3, [r7, #16]
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ffe:	613b      	str	r3, [r7, #16]
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	693b      	ldr	r3, [r7, #16]
}
 8002004:	4618      	mov	r0, r3
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	08003458 	.word	0x08003458
 800201c:	08003468 	.word	0x08003468
 8002020:	003d0900 	.word	0x003d0900

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_GetHCLKFreq+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000000 	.word	0x20000000

08002038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800203c:	f7ff fff2 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <HAL_RCC_GetPCLK1Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	08003450 	.word	0x08003450

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002064:	f7ff ffde 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08003450 	.word	0x08003450

08002088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_Delay+0x34>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <RCC_Delay+0x38>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0a5b      	lsrs	r3, r3, #9
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a4:	bf00      	nop
  }
  while (Delay --);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	60fa      	str	r2, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <RCC_Delay+0x1c>
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000000 	.word	0x20000000
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e041      	b.n	800215a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe ff22 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f000 fa74 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e03a      	b.n	80021f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <HAL_TIM_Base_Start_IT+0x98>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00e      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x58>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a6:	d009      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x58>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_TIM_Base_Start_IT+0x9c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x58>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_TIM_Base_Start_IT+0xa0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d111      	bne.n	80021e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d010      	beq.n	80021f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021de:	e007      	b.n	80021f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40000400 	.word	0x40000400
 8002204:	40000800 	.word	0x40000800

08002208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0202 	mvn.w	r2, #2
 8002234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f9b4 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f9a7 	bl	80025a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f9b6 	bl	80025ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d122      	bne.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0204 	mvn.w	r2, #4
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f98a 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f97d 	bl	80025a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f98c 	bl	80025ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0208 	mvn.w	r2, #8
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f960 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f953 	bl	80025a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f962 	bl	80025ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b10      	cmp	r3, #16
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b10      	cmp	r3, #16
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0210 	mvn.w	r2, #16
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2208      	movs	r2, #8
 8002336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f936 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f929 	bl	80025a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f938 	bl	80025ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0201 	mvn.w	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fd fee0 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa7b 	bl	80028ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8fc 	bl	80025dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0220 	mvn.w	r2, #32
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fa46 	bl	800289c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_TIM_ConfigClockSource+0x1c>
 8002430:	2302      	movs	r3, #2
 8002432:	e0b4      	b.n	800259e <HAL_TIM_ConfigClockSource+0x186>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246c:	d03e      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0xd4>
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002472:	f200 8087 	bhi.w	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	f000 8086 	beq.w	800258a <HAL_TIM_ConfigClockSource+0x172>
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d87f      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b70      	cmp	r3, #112	; 0x70
 8002486:	d01a      	beq.n	80024be <HAL_TIM_ConfigClockSource+0xa6>
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d87b      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 800248c:	2b60      	cmp	r3, #96	; 0x60
 800248e:	d050      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x11a>
 8002490:	2b60      	cmp	r3, #96	; 0x60
 8002492:	d877      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b50      	cmp	r3, #80	; 0x50
 8002496:	d03c      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0xfa>
 8002498:	2b50      	cmp	r3, #80	; 0x50
 800249a:	d873      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d058      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x13a>
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d86f      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b30      	cmp	r3, #48	; 0x30
 80024a6:	d064      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x15a>
 80024a8:	2b30      	cmp	r3, #48	; 0x30
 80024aa:	d86b      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d060      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x15a>
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d867      	bhi.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05c      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x15a>
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d05a      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x15a>
 80024bc:	e062      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ce:	f000 f968 	bl	80027a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	609a      	str	r2, [r3, #8]
      break;
 80024ea:	e04f      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024fc:	f000 f951 	bl	80027a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250e:	609a      	str	r2, [r3, #8]
      break;
 8002510:	e03c      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	461a      	mov	r2, r3
 8002520:	f000 f8c8 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2150      	movs	r1, #80	; 0x50
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f91f 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002530:	e02c      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800253e:	461a      	mov	r2, r3
 8002540:	f000 f8e6 	bl	8002710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2160      	movs	r1, #96	; 0x60
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f90f 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002550:	e01c      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255e:	461a      	mov	r2, r3
 8002560:	f000 f8a8 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f8ff 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002570:	e00c      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f000 f8f6 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002582:	e003      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e000      	b.n	800258c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800258a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
	...

080025f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <TIM_Base_SetConfig+0xb8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00b      	beq.n	8002620 <TIM_Base_SetConfig+0x30>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0x30>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <TIM_Base_SetConfig+0xbc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0x30>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <TIM_Base_SetConfig+0xc0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <TIM_Base_SetConfig+0xb8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00b      	beq.n	8002652 <TIM_Base_SetConfig+0x62>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002640:	d007      	beq.n	8002652 <TIM_Base_SetConfig+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <TIM_Base_SetConfig+0xbc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_Base_SetConfig+0x62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <TIM_Base_SetConfig+0xc0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d108      	bne.n	8002664 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <TIM_Base_SetConfig+0xb8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	615a      	str	r2, [r3, #20]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800

080026b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 0201 	bic.w	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 030a 	bic.w	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0210 	bic.w	r2, r3, #16
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800273a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	031b      	lsls	r3, r3, #12
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800274c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	f043 0307 	orr.w	r3, r3, #7
 8002790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e046      	b.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d009      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e042      	b.n	8002958 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fb4a 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fcd5 	bl	80032b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d112      	bne.n	80029a0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Receive_IT+0x26>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00b      	b.n	80029a2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	461a      	mov	r2, r3
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fab7 	bl	8002f0a <UART_Start_Receive_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	e000      	b.n	80029a2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0ba      	sub	sp, #232	; 0xe8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_UART_IRQHandler+0x66>
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fb93 	bl	8003136 <UART_Receive_IT>
      return;
 8002a10:	e25b      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80de 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x22c>
 8002a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80d1 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_UART_IRQHandler+0xae>
 8002a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_UART_IRQHandler+0xd2>
 8002a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xf6>
 8002a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d011      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x126>
 8002aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 81f2 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_UART_IRQHandler+0x14e>
 8002ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fb1e 	bl	8003136 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_UART_IRQHandler+0x17a>
 8002b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d04f      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa28 	bl	8002f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d041      	beq.n	8002bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1d9      	bne.n	8002b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	4a7e      	ldr	r2, [pc, #504]	; (8002d8c <HAL_UART_IRQHandler+0x3e0>)
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fc56 	bl	800144c <HAL_DMA_Abort_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	e00e      	b.n	8002bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f993 	bl	8002ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e00a      	b.n	8002bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f98f 	bl	8002ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	e006      	b.n	8002bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f98b 	bl	8002ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002bd2:	e175      	b.n	8002ec0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	bf00      	nop
    return;
 8002bd6:	e173      	b.n	8002ec0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	f040 814f 	bne.w	8002e80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8148 	beq.w	8002e80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8141 	beq.w	8002e80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80b6 	beq.w	8002d90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8145 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c42:	429a      	cmp	r2, r3
 8002c44:	f080 813e 	bcs.w	8002ec4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f000 8088 	beq.w	8002d6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c98:	e841 2300 	strex	r3, r2, [r1]
 8002c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1d9      	bne.n	8002c5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
 8002cb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ccc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e1      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e3      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e3      	bne.n	8002d2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fb35 	bl	80013d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8b6 	bl	8002ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d88:	e09c      	b.n	8002ec4 <HAL_UART_IRQHandler+0x518>
 8002d8a:	bf00      	nop
 8002d8c:	08003041 	.word	0x08003041
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 808e 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8089 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dda:	647a      	str	r2, [r7, #68]	; 0x44
 8002ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e3      	bne.n	8002db6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e12:	633a      	str	r2, [r7, #48]	; 0x30
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e3      	bne.n	8002dee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e58:	61fa      	str	r2, [r7, #28]
 8002e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	617b      	str	r3, [r7, #20]
   return(result);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e3      	bne.n	8002e34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f83b 	bl	8002ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e7e:	e023      	b.n	8002ec8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x4f4>
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f8e5 	bl	8003068 <UART_Transmit_IT>
    return;
 8002e9e:	e014      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <HAL_UART_IRQHandler+0x51e>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f924 	bl	8003106 <UART_EndTransmit_IT>
    return;
 8002ebe:	e004      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
    return;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
      return;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
      return;
 8002ec8:	bf00      	nop
  }
}
 8002eca:	37e8      	adds	r7, #232	; 0xe8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2222      	movs	r2, #34	; 0x22
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0220 	orr.w	r2, r2, #32
 8002f6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b095      	sub	sp, #84	; 0x54
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	e853 3f00 	ldrex	r3, [r3]
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e5      	bne.n	8002f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d119      	bne.n	8003028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	60bb      	str	r3, [r7, #8]
   return(result);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0310 	bic.w	r3, r3, #16
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003014:	61ba      	str	r2, [r7, #24]
 8003016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	6979      	ldr	r1, [r7, #20]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	613b      	str	r3, [r7, #16]
   return(result);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003036:	bf00      	nop
 8003038:	3754      	adds	r7, #84	; 0x54
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ff41 	bl	8002ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b21      	cmp	r3, #33	; 0x21
 800307a:	d13e      	bne.n	80030fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d114      	bne.n	80030b0 <UART_Transmit_IT+0x48>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d110      	bne.n	80030b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]
 80030ae:	e008      	b.n	80030c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	1c59      	adds	r1, r3, #1
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6211      	str	r1, [r2, #32]
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4619      	mov	r1, r3
 80030d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fed2 	bl	8002ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b08c      	sub	sp, #48	; 0x30
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b22      	cmp	r3, #34	; 0x22
 8003148:	f040 80ae 	bne.w	80032a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d117      	bne.n	8003186 <UART_Receive_IT+0x50>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	b29a      	uxth	r2, r3
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	1c9a      	adds	r2, r3, #2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
 8003184:	e026      	b.n	80031d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003198:	d007      	beq.n	80031aa <UART_Receive_IT+0x74>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <UART_Receive_IT+0x82>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e008      	b.n	80031ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4619      	mov	r1, r3
 80031e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d15d      	bne.n	80032a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0220 	bic.w	r2, r2, #32
 80031f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	2b01      	cmp	r3, #1
 800322c:	d135      	bne.n	800329a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	613b      	str	r3, [r7, #16]
   return(result);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f023 0310 	bic.w	r3, r3, #16
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	623a      	str	r2, [r7, #32]
 8003256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	69f9      	ldr	r1, [r7, #28]
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	61bb      	str	r3, [r7, #24]
   return(result);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b10      	cmp	r3, #16
 8003274:	d10a      	bne.n	800328c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fe2e 	bl	8002ef4 <HAL_UARTEx_RxEventCallback>
 8003298:	e002      	b.n	80032a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fc ff8a 	bl	80001b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e002      	b.n	80032aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032ee:	f023 030c 	bic.w	r3, r3, #12
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <UART_SetConfig+0x114>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7fe fea0 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	e002      	b.n	800332a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fe88 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <UART_SetConfig+0x118>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	0119      	lsls	r1, r3, #4
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009a      	lsls	r2, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <UART_SetConfig+0x118>)
 8003362:	fba3 0302 	umull	r0, r3, r3, r2
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2064      	movs	r0, #100	; 0x64
 800336a:	fb00 f303 	mul.w	r3, r0, r3
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	3332      	adds	r3, #50	; 0x32
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <UART_SetConfig+0x118>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003380:	4419      	add	r1, r3
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fbb2 f2f3 	udiv	r2, r2, r3
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <UART_SetConfig+0x118>)
 800339a:	fba3 0302 	umull	r0, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2064      	movs	r0, #100	; 0x64
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <UART_SetConfig+0x118>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	440a      	add	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40013800 	.word	0x40013800
 80033cc:	51eb851f 	.word	0x51eb851f

080033d0 <memset>:
 80033d0:	4603      	mov	r3, r0
 80033d2:	4402      	add	r2, r0
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d100      	bne.n	80033da <memset+0xa>
 80033d8:	4770      	bx	lr
 80033da:	f803 1b01 	strb.w	r1, [r3], #1
 80033de:	e7f9      	b.n	80033d4 <memset+0x4>

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4d0c      	ldr	r5, [pc, #48]	; (8003418 <__libc_init_array+0x38>)
 80033e6:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	f000 f81a 	bl	8003428 <_init>
 80033f4:	2600      	movs	r6, #0
 80033f6:	4d0a      	ldr	r5, [pc, #40]	; (8003420 <__libc_init_array+0x40>)
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	0800346c 	.word	0x0800346c
 800341c:	0800346c 	.word	0x0800346c
 8003420:	0800346c 	.word	0x0800346c
 8003424:	08003470 	.word	0x08003470

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
