
proyectoSTM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000983c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099bc  080099bc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080099bc  080099bc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099bc  080099bc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080099c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c8  2000017c  08009b40  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  08009b40  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155ed  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003698  00000000  00000000  000357d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00038e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e84  00000000  00000000  0003a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a636  00000000  00000000  0003afd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176b5  00000000  00000000  0005560a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f584  00000000  00000000  0006ccbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e24  00000000  00000000  000fc244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00101068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009930 	.word	0x08009930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08009930 	.word	0x08009930

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a13      	ldr	r2, [pc, #76]	; (80001a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d11e      	bne.n	800019c <HAL_TIM_PeriodElapsedCallback+0x50>
		if (time100ms)
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000160:	881b      	ldrh	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d005      	beq.n	8000172 <HAL_TIM_PeriodElapsedCallback+0x26>
			time100ms--;
 8000166:	4b11      	ldr	r3, [pc, #68]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000168:	881b      	ldrh	r3, [r3, #0]
 800016a:	3b01      	subs	r3, #1
 800016c:	b29a      	uxth	r2, r3
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000170:	801a      	strh	r2, [r3, #0]
		if (time20ms)
 8000172:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d005      	beq.n	8000186 <HAL_TIM_PeriodElapsedCallback+0x3a>
			time20ms--;
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	3b01      	subs	r3, #1
 8000180:	b2da      	uxtb	r2, r3
 8000182:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000184:	701a      	strb	r2, [r3, #0]
		if (myButtons[0].timePush < EQ5000MS)
 8000186:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800018e:	4293      	cmp	r3, r2
 8000190:	d804      	bhi.n	800019c <HAL_TIM_PeriodElapsedCallback+0x50>
			myButtons[0].timePush++;
 8000192:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800019a:	6053      	str	r3, [r2, #4]
	}
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	40012c00 	.word	0x40012c00
 80001ac:	2000022a 	.word	0x2000022a
 80001b0:	2000022c 	.word	0x2000022c
 80001b4:	2000064c 	.word	0x2000064c

080001b8 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	//memcpy(&datosComUSB.bufferRx[datosComUSB.indexWriteRx], buf, len);
	//datosComUSB.indexWriteRx += len;
	//datosComUSB.newData = true;
	//rxUSBData = buf[0];
	//newData = 1;
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
	...

080001d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0b      	ldr	r2, [pc, #44]	; (800020c <HAL_UART_RxCpltCallback+0x3c>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d110      	bne.n	8000204 <HAL_UART_RxCpltCallback+0x34>
		datosComSerie.indexWriteRx++;
 80001e2:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <HAL_UART_RxCpltCallback+0x40>)
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	3301      	adds	r3, #1
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <HAL_UART_RxCpltCallback+0x40>)
 80001ec:	709a      	strb	r2, [r3, #2]
		HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 80001ee:	4b08      	ldr	r3, [pc, #32]	; (8000210 <HAL_UART_RxCpltCallback+0x40>)
 80001f0:	789b      	ldrb	r3, [r3, #2]
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <HAL_UART_RxCpltCallback+0x40>)
 80001f6:	4413      	add	r3, r2
 80001f8:	3306      	adds	r3, #6
 80001fa:	2201      	movs	r2, #1
 80001fc:	4619      	mov	r1, r3
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <HAL_UART_RxCpltCallback+0x44>)
 8000200:	f004 fa2a 	bl	8004658 <HAL_UART_Receive_IT>
	}
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40013800 	.word	0x40013800
 8000210:	20000238 	.word	0x20000238
 8000214:	200001e0 	.word	0x200001e0

08000218 <heartBeat>:

void heartBeat() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	static uint8_t move=0;	//Ultima modificacion
	if ((~mask) & (1<<move)) {
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <heartBeat+0x58>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	43db      	mvns	r3, r3
 8000222:	4a14      	ldr	r2, [pc, #80]	; (8000274 <heartBeat+0x5c>)
 8000224:	7812      	ldrb	r2, [r2, #0]
 8000226:	4611      	mov	r1, r2
 8000228:	2201      	movs	r2, #1
 800022a:	408a      	lsls	r2, r1
 800022c:	4013      	ands	r3, r2
 800022e:	2b00      	cmp	r3, #0
 8000230:	d006      	beq.n	8000240 <heartBeat+0x28>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	480f      	ldr	r0, [pc, #60]	; (8000278 <heartBeat+0x60>)
 800023a:	f001 fb72 	bl	8001922 <HAL_GPIO_WritePin>
 800023e:	e005      	b.n	800024c <heartBeat+0x34>
	} else {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);	//Prende el led
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	480c      	ldr	r0, [pc, #48]	; (8000278 <heartBeat+0x60>)
 8000248:	f001 fb6b 	bl	8001922 <HAL_GPIO_WritePin>
	}
	move++;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <heartBeat+0x5c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <heartBeat+0x5c>)
 8000256:	701a      	strb	r2, [r3, #0]
	if (move > HBintervalWidth)
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <heartBeat+0x5c>)
 800025a:	781a      	ldrb	r2, [r3, #0]
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <heartBeat+0x64>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	429a      	cmp	r2, r3
 8000262:	d902      	bls.n	800026a <heartBeat+0x52>
		move = 0;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <heartBeat+0x5c>)
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000230 	.word	0x20000230
 8000274:	2000065a 	.word	0x2000065a
 8000278:	40011000 	.word	0x40011000
 800027c:	20000229 	.word	0x20000229

08000280 <ledStatus>:

void ledStatus() {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    switch (mode) {
 8000284:	4b43      	ldr	r3, [pc, #268]	; (8000394 <ledStatus+0x114>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d87e      	bhi.n	800038a <ledStatus+0x10a>
 800028c:	a201      	add	r2, pc, #4	; (adr r2, 8000294 <ledStatus+0x14>)
 800028e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000292:	bf00      	nop
 8000294:	080002a5 	.word	0x080002a5
 8000298:	080002b5 	.word	0x080002b5
 800029c:	080002fb 	.word	0x080002fb
 80002a0:	08000343 	.word	0x08000343
        case 0:
            HBintervalWidth = THREESECONDSINTERVAL;
 80002a4:	4b3c      	ldr	r3, [pc, #240]	; (8000398 <ledStatus+0x118>)
 80002a6:	221d      	movs	r2, #29
 80002a8:	701a      	strb	r2, [r3, #0]
            mask = 0x55555555;
 80002aa:	4b3c      	ldr	r3, [pc, #240]	; (800039c <ledStatus+0x11c>)
 80002ac:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80002b0:	601a      	str	r2, [r3, #0]
            break;
 80002b2:	e06a      	b.n	800038a <ledStatus+0x10a>
        case 1:
            if (LEDMODE == THREESECONDS) {
 80002b4:	4b3a      	ldr	r3, [pc, #232]	; (80003a0 <ledStatus+0x120>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d014      	beq.n	80002ec <ledStatus+0x6c>
                if (CARSTATUS) {
 80002c2:	4b37      	ldr	r3, [pc, #220]	; (80003a0 <ledStatus+0x120>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d006      	beq.n	80002de <ledStatus+0x5e>
                    HBintervalWidth = THREESECONDSINTERVAL;
 80002d0:	4b31      	ldr	r3, [pc, #196]	; (8000398 <ledStatus+0x118>)
 80002d2:	221d      	movs	r2, #29
 80002d4:	701a      	strb	r2, [r3, #0]
                    mask = 0x5F;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <ledStatus+0x11c>)
 80002d8:	225f      	movs	r2, #95	; 0x5f
 80002da:	601a      	str	r2, [r3, #0]
                }
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 1;
            }
            break;
 80002dc:	e055      	b.n	800038a <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 80002de:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <ledStatus+0x118>)
 80002e0:	221d      	movs	r2, #29
 80002e2:	701a      	strb	r2, [r3, #0]
                    mask = 1;
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <ledStatus+0x11c>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	601a      	str	r2, [r3, #0]
            break;
 80002ea:	e04e      	b.n	800038a <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 80002ec:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <ledStatus+0x118>)
 80002ee:	2209      	movs	r2, #9
 80002f0:	701a      	strb	r2, [r3, #0]
                mask = 1;
 80002f2:	4b2a      	ldr	r3, [pc, #168]	; (800039c <ledStatus+0x11c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
            break;
 80002f8:	e047      	b.n	800038a <ledStatus+0x10a>
        case 2:
            if (LEDMODE == THREESECONDS) {
 80002fa:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <ledStatus+0x120>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b00      	cmp	r3, #0
 8000306:	d015      	beq.n	8000334 <ledStatus+0xb4>
                if (CARSTATUS) {
 8000308:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <ledStatus+0x120>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	f003 0302 	and.w	r3, r3, #2
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	d007      	beq.n	8000326 <ledStatus+0xa6>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <ledStatus+0x118>)
 8000318:	221d      	movs	r2, #29
 800031a:	701a      	strb	r2, [r3, #0]
                    mask = 0x15F;
 800031c:	4b1f      	ldr	r3, [pc, #124]	; (800039c <ledStatus+0x11c>)
 800031e:	f240 125f 	movw	r2, #351	; 0x15f
 8000322:	601a      	str	r2, [r3, #0]
                }
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 5;
            }
            break;
 8000324:	e031      	b.n	800038a <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <ledStatus+0x118>)
 8000328:	221d      	movs	r2, #29
 800032a:	701a      	strb	r2, [r3, #0]
                    mask = 5;
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <ledStatus+0x11c>)
 800032e:	2205      	movs	r2, #5
 8000330:	601a      	str	r2, [r3, #0]
            break;
 8000332:	e02a      	b.n	800038a <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <ledStatus+0x118>)
 8000336:	2209      	movs	r2, #9
 8000338:	701a      	strb	r2, [r3, #0]
                mask = 5;
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <ledStatus+0x11c>)
 800033c:	2205      	movs	r2, #5
 800033e:	601a      	str	r2, [r3, #0]
            break;
 8000340:	e023      	b.n	800038a <ledStatus+0x10a>
        case 3:
            if (LEDMODE == THREESECONDS) {
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <ledStatus+0x120>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	2b00      	cmp	r3, #0
 800034e:	d015      	beq.n	800037c <ledStatus+0xfc>
                if (CARSTATUS) {
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <ledStatus+0x120>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d007      	beq.n	800036e <ledStatus+0xee>
                    HBintervalWidth = THREESECONDSINTERVAL;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <ledStatus+0x118>)
 8000360:	221d      	movs	r2, #29
 8000362:	701a      	strb	r2, [r3, #0]
                    mask = 0x55F;
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <ledStatus+0x11c>)
 8000366:	f240 525f 	movw	r2, #1375	; 0x55f
 800036a:	601a      	str	r2, [r3, #0]
            } else {
                HBintervalWidth = ONESECONDINTERVAL;
                mask = 21;
            }
    }
}
 800036c:	e00d      	b.n	800038a <ledStatus+0x10a>
                    HBintervalWidth = THREESECONDSINTERVAL;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <ledStatus+0x118>)
 8000370:	221d      	movs	r2, #29
 8000372:	701a      	strb	r2, [r3, #0]
                    mask = 21;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <ledStatus+0x11c>)
 8000376:	2215      	movs	r2, #21
 8000378:	601a      	str	r2, [r3, #0]
}
 800037a:	e006      	b.n	800038a <ledStatus+0x10a>
                HBintervalWidth = ONESECONDINTERVAL;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <ledStatus+0x118>)
 800037e:	2209      	movs	r2, #9
 8000380:	701a      	strb	r2, [r3, #0]
                mask = 21;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <ledStatus+0x11c>)
 8000384:	2215      	movs	r2, #21
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	e7ff      	b.n	800038a <ledStatus+0x10a>
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000228 	.word	0x20000228
 8000398:	20000229 	.word	0x20000229
 800039c:	20000230 	.word	0x20000230
 80003a0:	20000648 	.word	0x20000648

080003a4 <imAlive>:

void imAlive() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	decodeData(&datosComSerie, GETALIVE);
 80003a8:	21f0      	movs	r1, #240	; 0xf0
 80003aa:	4802      	ldr	r0, [pc, #8]	; (80003b4 <imAlive+0x10>)
 80003ac:	f000 fa32 	bl	8000814 <decodeData>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000238 	.word	0x20000238

080003b8 <buttonsStatus>:

void buttonsStatus(_sButton *buttons, uint8_t index) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
    switch(buttons->estado){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	f200 80bd 	bhi.w	8000548 <buttonsStatus+0x190>
 80003ce:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <buttonsStatus+0x1c>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003e5 	.word	0x080003e5
 80003d8:	080003f7 	.word	0x080003f7
 80003dc:	08000471 	.word	0x08000471
 80003e0:	0800048f 	.word	0x0800048f
        case UP:
            if (buttons->event == EV_PRESSED) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	785b      	ldrb	r3, [r3, #1]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	f040 80a8 	bne.w	800053e <buttonsStatus+0x186>
                buttons->estado = FALLING;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2202      	movs	r2, #2
 80003f2:	701a      	strb	r2, [r3, #0]
            }
        break;
 80003f4:	e0a3      	b.n	800053e <buttonsStatus+0x186>
        case DOWN:
            if (buttons->event == EV_NOT_PRESSED) {
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	785b      	ldrb	r3, [r3, #1]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d103      	bne.n	8000406 <buttonsStatus+0x4e>
                buttons->estado = RISING;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2203      	movs	r2, #3
 8000402:	701a      	strb	r2, [r3, #0]
							ledStatus();
						}
					}
				}
            }
        break;
 8000404:	e09d      	b.n	8000542 <buttonsStatus+0x18a>
				if ((CARSTATUS == WORKING) && (buttons->timePush > EQ3000MS)) { // SE DETIENE EL MODO, LED EN PERIODO DE 3 SEGUNDOS. MAS DE 3000ms
 8000406:	4b52      	ldr	r3, [pc, #328]	; (8000550 <buttonsStatus+0x198>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	f003 0302 	and.w	r3, r3, #2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d012      	beq.n	800043a <buttonsStatus+0x82>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800041c:	4293      	cmp	r3, r2
 800041e:	d90c      	bls.n	800043a <buttonsStatus+0x82>
					LEDMODE = THREESECONDS;
 8000420:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <buttonsStatus+0x198>)
 8000422:	7813      	ldrb	r3, [r2, #0]
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	7013      	strb	r3, [r2, #0]
					CARSTATUS = RESTING;
 800042a:	4a49      	ldr	r2, [pc, #292]	; (8000550 <buttonsStatus+0x198>)
 800042c:	7813      	ldrb	r3, [r2, #0]
 800042e:	f36f 0341 	bfc	r3, #1, #1
 8000432:	7013      	strb	r3, [r2, #0]
					ledStatus();
 8000434:	f7ff ff24 	bl	8000280 <ledStatus>
        break;
 8000438:	e083      	b.n	8000542 <buttonsStatus+0x18a>
					if (buttons->timePush >= EQ5000MS) { // SE VUELVE AL PERIODO DE 3 SEGUNDOS Y SE CANCELA EL INICIO. MAS DE 5000ms
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000442:	4293      	cmp	r3, r2
 8000444:	d907      	bls.n	8000456 <buttonsStatus+0x9e>
						LEDMODE = THREESECONDS;
 8000446:	4a42      	ldr	r2, [pc, #264]	; (8000550 <buttonsStatus+0x198>)
 8000448:	7813      	ldrb	r3, [r2, #0]
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	7013      	strb	r3, [r2, #0]
						ledStatus();
 8000450:	f7ff ff16 	bl	8000280 <ledStatus>
        break;
 8000454:	e075      	b.n	8000542 <buttonsStatus+0x18a>
						if (buttons->timePush > EQ1000MS) { // SE MANTIENE PRESIONADO EL BOTON POR MAS DE UN SEGUNDO, EMPIEZA SECUENCIA DE 1 SEG. MAS DE 1000ms
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800045e:	d970      	bls.n	8000542 <buttonsStatus+0x18a>
							LEDMODE = ONESECOND;
 8000460:	4a3b      	ldr	r2, [pc, #236]	; (8000550 <buttonsStatus+0x198>)
 8000462:	7813      	ldrb	r3, [r2, #0]
 8000464:	f36f 0300 	bfc	r3, #0, #1
 8000468:	7013      	strb	r3, [r2, #0]
							ledStatus();
 800046a:	f7ff ff09 	bl	8000280 <ledStatus>
        break;
 800046e:	e068      	b.n	8000542 <buttonsStatus+0x18a>
        case FALLING:
            if (buttons->event == EV_PRESSED) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	785b      	ldrb	r3, [r3, #1]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d106      	bne.n	8000486 <buttonsStatus+0xce>
                buttons->estado = DOWN;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
                buttons->timePush = 0; // SE INICIA EL CRONOMETRO DE PULSADO
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
            } else {
                buttons->estado = UP;
            }
        break;
 8000484:	e060      	b.n	8000548 <buttonsStatus+0x190>
                buttons->estado = UP;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
        break;
 800048c:	e05c      	b.n	8000548 <buttonsStatus+0x190>
        case RISING:
            if (buttons->event == EV_NOT_PRESSED) {
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d14d      	bne.n	8000532 <buttonsStatus+0x17a>
                buttons->estado = UP;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
                if ((CARSTATUS == RESTING) && (buttons->timePush >= EQ100MS)) { // HACE ALGO SOLO SI SE SUELTA EL BOTON PRESIONANDOLO POR MAS DE 100 MS
 800049c:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <buttonsStatus+0x198>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	f003 0302 	and.w	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d135      	bne.n	8000516 <buttonsStatus+0x15e>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80004b2:	d330      	bcc.n	8000516 <buttonsStatus+0x15e>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80004bc:	d814      	bhi.n	80004e8 <buttonsStatus+0x130>
                        mode++;
 80004be:	4b25      	ldr	r3, [pc, #148]	; (8000554 <buttonsStatus+0x19c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <buttonsStatus+0x19c>)
 80004c8:	701a      	strb	r2, [r3, #0]
                        if (mode == MODE3+1) {
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <buttonsStatus+0x19c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	d102      	bne.n	80004d8 <buttonsStatus+0x120>
                            mode = IDLE;
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <buttonsStatus+0x19c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
                        }
                        LEDMODE = THREESECONDS;
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <buttonsStatus+0x198>)
 80004da:	7813      	ldrb	r3, [r2, #0]
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	7013      	strb	r3, [r2, #0]
                        ledStatus();
 80004e2:	f7ff fecd 	bl	8000280 <ledStatus>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 80004e6:	e028      	b.n	800053a <buttonsStatus+0x182>
                    } else {
                        if ((buttons->timePush < EQ5000MS) && (mode != IDLE)) { // SI EL MODO DEL AUTO NO ES IDLE SE INICIA EL MODO SELECCIONADO Y SE PONE EL LED EN MODO ON. MENOS DE 5000ms
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d822      	bhi.n	800053a <buttonsStatus+0x182>
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <buttonsStatus+0x19c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d01e      	beq.n	800053a <buttonsStatus+0x182>
                            LEDMODE = THREESECONDS;
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <buttonsStatus+0x198>)
 80004fe:	7813      	ldrb	r3, [r2, #0]
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	7013      	strb	r3, [r2, #0]
                            CARSTATUS = WORKING;
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <buttonsStatus+0x198>)
 8000508:	7813      	ldrb	r3, [r2, #0]
 800050a:	f043 0302 	orr.w	r3, r3, #2
 800050e:	7013      	strb	r3, [r2, #0]
                            ledStatus();
 8000510:	f7ff feb6 	bl	8000280 <ledStatus>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 8000514:	e011      	b.n	800053a <buttonsStatus+0x182>
                        }
                    }
                } else {
                    if (buttons->timePush <= EQ3000MS) { // SI NO SE SUELTA DESPUES DE LOS 3000 MS SE VUELVE A TRABAJAR
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800051e:	4293      	cmp	r3, r2
 8000520:	d811      	bhi.n	8000546 <buttonsStatus+0x18e>
                        LEDMODE = THREESECONDS;
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <buttonsStatus+0x198>)
 8000524:	7813      	ldrb	r3, [r2, #0]
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	7013      	strb	r3, [r2, #0]
                        ledStatus();
 800052c:	f7ff fea8 	bl	8000280 <ledStatus>
                    }
                }
            } else {
                buttons->estado = DOWN;
            }
        break;
 8000530:	e009      	b.n	8000546 <buttonsStatus+0x18e>
                buttons->estado = DOWN;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
        break;
 8000538:	e005      	b.n	8000546 <buttonsStatus+0x18e>
                    if (buttons->timePush <= EQ1000MS) { // SI SE SUELTA ENTRE 100MS Y 1000MS SE CAMBIA DE MODO
 800053a:	bf00      	nop
        break;
 800053c:	e003      	b.n	8000546 <buttonsStatus+0x18e>
        break;
 800053e:	bf00      	nop
 8000540:	e002      	b.n	8000548 <buttonsStatus+0x190>
        break;
 8000542:	bf00      	nop
 8000544:	e000      	b.n	8000548 <buttonsStatus+0x190>
        break;
 8000546:	bf00      	nop
    }
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000648 	.word	0x20000648
 8000554:	20000228 	.word	0x20000228

08000558 <inicializaButtons>:

void inicializaButtons(_sButton *buttons) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    buttons->estado = UP;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
    buttons->timePush = EQ5000MS;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f644 6220 	movw	r2, #20000	; 0x4e20
 800056c:	605a      	str	r2, [r3, #4]
    buttons->event = EV_NONE;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2202      	movs	r2, #2
 8000572:	705a      	strb	r2, [r3, #1]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
	...

08000580 <debounceTask>:

void debounceTask() {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < NUMBUTTONS; index++){
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	e031      	b.n	80005f0 <debounceTask+0x70>
        if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) & (1 << index)){
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	481b      	ldr	r0, [pc, #108]	; (8000600 <debounceTask+0x80>)
 8000592:	f001 f9af 	bl	80018f4 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	fa42 f303 	asr.w	r3, r2, r3
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00a      	beq.n	80005be <debounceTask+0x3e>
            myButtons[index].event = EV_NOT_PRESSED;
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	4916      	ldr	r1, [pc, #88]	; (8000604 <debounceTask+0x84>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	3301      	adds	r3, #1
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e009      	b.n	80005d2 <debounceTask+0x52>
        } else {
            myButtons[index].event = EV_PRESSED;
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	4910      	ldr	r1, [pc, #64]	; (8000604 <debounceTask+0x84>)
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	440b      	add	r3, r1
 80005cc:	3301      	adds	r3, #1
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
        }
        buttonsStatus(&myButtons[index], index);
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <debounceTask+0x84>)
 80005de:	4413      	add	r3, r2
 80005e0:	79fa      	ldrb	r2, [r7, #7]
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fee7 	bl	80003b8 <buttonsStatus>
    for (uint8_t index = 0; index < NUMBUTTONS; index++){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	3301      	adds	r3, #1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0ca      	beq.n	800058c <debounceTask+0xc>
    }
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010c00 	.word	0x40010c00
 8000604:	2000064c 	.word	0x2000064c

08000608 <decodeProtocol>:

void decodeProtocol(_sDato *datosCom) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    static uint8_t nBytes=0;
    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy) {
 8000616:	e0ec      	b.n	80007f2 <decodeProtocol+0x1ea>
        switch (estadoProtocolo) {
 8000618:	4b7b      	ldr	r3, [pc, #492]	; (8000808 <decodeProtocol+0x200>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 80e4 	bhi.w	80007ea <decodeProtocol+0x1e2>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <decodeProtocol+0x20>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	0800066d 	.word	0x0800066d
 8000630:	080006a1 	.word	0x080006a1
 8000634:	080006d5 	.word	0x080006d5
 8000638:	08000709 	.word	0x08000709
 800063c:	0800073d 	.word	0x0800073d
 8000640:	0800077f 	.word	0x0800077f
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	b2d1      	uxtb	r1, r2
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	70d1      	strb	r1, [r2, #3]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	799b      	ldrb	r3, [r3, #6]
 8000658:	2b55      	cmp	r3, #85	; 0x55
 800065a:	f040 80ca 	bne.w	80007f2 <decodeProtocol+0x1ea>
                    estadoProtocolo=HEADER_1;
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <decodeProtocol+0x200>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	705a      	strb	r2, [r3, #1]
                }
                break;
 800066a:	e0c2      	b.n	80007f2 <decodeProtocol+0x1ea>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	78db      	ldrb	r3, [r3, #3]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	70d1      	strb	r1, [r2, #3]
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	799b      	ldrb	r3, [r3, #6]
 8000680:	2b4e      	cmp	r3, #78	; 0x4e
 8000682:	d103      	bne.n	800068c <decodeProtocol+0x84>
                    estadoProtocolo=HEADER_2;
 8000684:	4b60      	ldr	r3, [pc, #384]	; (8000808 <decodeProtocol+0x200>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e0b2      	b.n	80007f2 <decodeProtocol+0x1ea>
                else{
                    datosCom->indexReadRx--;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	3b01      	subs	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	70da      	strb	r2, [r3, #3]
                    estadoProtocolo=START;
 8000698:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <decodeProtocol+0x200>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800069e:	e0a8      	b.n	80007f2 <decodeProtocol+0x1ea>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	78db      	ldrb	r3, [r3, #3]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	b2d1      	uxtb	r1, r2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	70d1      	strb	r1, [r2, #3]
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	799b      	ldrb	r3, [r3, #6]
 80006b4:	2b45      	cmp	r3, #69	; 0x45
 80006b6:	d103      	bne.n	80006c0 <decodeProtocol+0xb8>
                    estadoProtocolo=HEADER_3;
 80006b8:	4b53      	ldr	r3, [pc, #332]	; (8000808 <decodeProtocol+0x200>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	e098      	b.n	80007f2 <decodeProtocol+0x1ea>
                else{
                    datosCom->indexReadRx--;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	70da      	strb	r2, [r3, #3]
                    estadoProtocolo=START;
 80006cc:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <decodeProtocol+0x200>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006d2:	e08e      	b.n	80007f2 <decodeProtocol+0x1ea>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	70d1      	strb	r1, [r2, #3]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	799b      	ldrb	r3, [r3, #6]
 80006e8:	2b52      	cmp	r3, #82	; 0x52
 80006ea:	d103      	bne.n	80006f4 <decodeProtocol+0xec>
					estadoProtocolo=NBYTES;
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <decodeProtocol+0x200>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e07e      	b.n	80007f2 <decodeProtocol+0x1ea>
				else{
					datosCom->indexReadRx--;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	70da      	strb	r2, [r3, #3]
					estadoProtocolo=START;
 8000700:	4b41      	ldr	r3, [pc, #260]	; (8000808 <decodeProtocol+0x200>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000706:	e074      	b.n	80007f2 <decodeProtocol+0x1ea>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx; // 4 posiciones mas adelante tenes el ID en nuestro caso, por los datos del numero de auto y uno mas
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	78da      	ldrb	r2, [r3, #3]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	701a      	strb	r2, [r3, #0]
                posicionComand = datosCom->indexStart + POSID;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3304      	adds	r3, #4
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <decodeProtocol+0x204>)
 800071a:	701a      	strb	r2, [r3, #0]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	78db      	ldrb	r3, [r3, #3]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	b2d1      	uxtb	r1, r2
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	70d1      	strb	r1, [r2, #3]
 8000728:	461a      	mov	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	799a      	ldrb	r2, [r3, #6]
 8000730:	4b37      	ldr	r3, [pc, #220]	; (8000810 <decodeProtocol+0x208>)
 8000732:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <decodeProtocol+0x200>)
 8000736:	2205      	movs	r2, #5
 8000738:	701a      	strb	r2, [r3, #0]
                break;
 800073a:	e05a      	b.n	80007f2 <decodeProtocol+0x1ea>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	b2d1      	uxtb	r1, r2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	70d1      	strb	r1, [r2, #3]
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	799b      	ldrb	r3, [r3, #6]
 8000750:	2b3a      	cmp	r3, #58	; 0x3a
 8000752:	d10a      	bne.n	800076a <decodeProtocol+0x162>
                    estadoProtocolo=PAYLOAD;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <decodeProtocol+0x200>)
 8000756:	2206      	movs	r2, #6
 8000758:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^nBytes^':';
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <decodeProtocol+0x208>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000762:	b2da      	uxtb	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	705a      	strb	r2, [r3, #1]
 8000768:	e043      	b.n	80007f2 <decodeProtocol+0x1ea>
                }
                else{
                    datosCom->indexReadRx--;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	78db      	ldrb	r3, [r3, #3]
 800076e:	3b01      	subs	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	70da      	strb	r2, [r3, #3]
                    estadoProtocolo=START;
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <decodeProtocol+0x200>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800077c:	e039      	b.n	80007f2 <decodeProtocol+0x1ea>
            case PAYLOAD:
                if (nBytes>1){
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <decodeProtocol+0x208>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d90f      	bls.n	80007a6 <decodeProtocol+0x19e>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	78db      	ldrb	r3, [r3, #3]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	b2d1      	uxtb	r1, r2
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	70d1      	strb	r1, [r2, #3]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	799a      	ldrb	r2, [r3, #6]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	4053      	eors	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	705a      	strb	r2, [r3, #1]
                }
                nBytes--;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <decodeProtocol+0x208>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <decodeProtocol+0x208>)
 80007b0:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <decodeProtocol+0x208>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d11b      	bne.n	80007f2 <decodeProtocol+0x1ea>
                    estadoProtocolo=START;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <decodeProtocol+0x200>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	785a      	ldrb	r2, [r3, #1]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	440b      	add	r3, r1
 80007ce:	799b      	ldrb	r3, [r3, #6]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d10e      	bne.n	80007f2 <decodeProtocol+0x1ea>
                        decodeData(datosCom, datosCom->bufferRx[posicionComand]); //!< PASO LA ESTRUCTURA DATOSCOM Y PASO EL COMANDO
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <decodeProtocol+0x204>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	799b      	ldrb	r3, [r3, #6]
 80007e0:	4619      	mov	r1, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f816 	bl	8000814 <decodeData>
                    }
                }
                break;
 80007e8:	e003      	b.n	80007f2 <decodeProtocol+0x1ea>
            default:
                estadoProtocolo = START;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <decodeProtocol+0x200>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
                break;
 80007f0:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy) {
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	7bfa      	ldrb	r2, [r7, #15]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f47f af0d 	bne.w	8000618 <decodeProtocol+0x10>
        }
    }
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000235 	.word	0x20000235
 800080c:	20000234 	.word	0x20000234
 8000810:	2000065b 	.word	0x2000065b

08000814 <decodeData>:

void decodeData(_sDato *datosCom, uint8_t COMAND) {
 8000814:	b480      	push	{r7}
 8000816:	b093      	sub	sp, #76	; 0x4c
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
    //wifiData *wifidataPtr;
    //uint8_t *ptr;
    uint8_t auxBuffTx[50], indiceAux=0, cheksum, sizeWifiData, indexBytesToCopy=0, numBytesToCopy=0;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000826:	2300      	movs	r3, #0
 8000828:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t QtAngle = 0, configModo = 0;  //i = 0
 8000832:	2300      	movs	r3, #0
 8000834:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    _work w;

    auxBuffTx[indiceAux++]='U';
 800083e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000848:	3348      	adds	r3, #72	; 0x48
 800084a:	443b      	add	r3, r7
 800084c:	2255      	movs	r2, #85	; 0x55
 800084e:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='N';
 8000852:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800085c:	3348      	adds	r3, #72	; 0x48
 800085e:	443b      	add	r3, r7
 8000860:	224e      	movs	r2, #78	; 0x4e
 8000862:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='E';
 8000866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000870:	3348      	adds	r3, #72	; 0x48
 8000872:	443b      	add	r3, r7
 8000874:	2245      	movs	r2, #69	; 0x45
 8000876:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]='R';
 800087a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000884:	3348      	adds	r3, #72	; 0x48
 8000886:	443b      	add	r3, r7
 8000888:	2252      	movs	r2, #82	; 0x52
 800088a:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0;
 800088e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000898:	3348      	adds	r3, #72	; 0x48
 800089a:	443b      	add	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=':';
 80008a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008ac:	3348      	adds	r3, #72	; 0x48
 80008ae:	443b      	add	r3, r7
 80008b0:	223a      	movs	r2, #58	; 0x3a
 80008b2:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0x0C;    //!< NUMERO DE AUTO
 80008b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008c0:	3348      	adds	r3, #72	; 0x48
 80008c2:	443b      	add	r3, r7
 80008c4:	220c      	movs	r2, #12
 80008c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
    auxBuffTx[indiceAux++]=0x00;    //!< PARA COMPLETAR EL UINT16
 80008ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80008d4:	3348      	adds	r3, #72	; 0x48
 80008d6:	443b      	add	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	f803 2c3c 	strb.w	r2, [r3, #-60]

    switch (COMAND) { // NO BORRAR EL _sDato *datosCom de la funcion ya que se usa en el startconfig, agregar el comand solamente
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	2bf1      	cmp	r3, #241	; 0xf1
 80008e2:	f300 80e6 	bgt.w	8000ab2 <decodeData+0x29e>
 80008e6:	2ba0      	cmp	r3, #160	; 0xa0
 80008e8:	da06      	bge.n	80008f8 <decodeData+0xe4>
 80008ea:	2b10      	cmp	r3, #16
 80008ec:	f000 80ee 	beq.w	8000acc <decodeData+0x2b8>
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	f000 80c4 	beq.w	8000a7e <decodeData+0x26a>
 80008f6:	e0dc      	b.n	8000ab2 <decodeData+0x29e>
 80008f8:	3ba0      	subs	r3, #160	; 0xa0
 80008fa:	2b51      	cmp	r3, #81	; 0x51
 80008fc:	f200 80d9 	bhi.w	8000ab2 <decodeData+0x29e>
 8000900:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <decodeData+0xf4>)
 8000902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000906:	bf00      	nop
 8000908:	08000ad1 	.word	0x08000ad1
 800090c:	08000ad1 	.word	0x08000ad1
 8000910:	08000ad1 	.word	0x08000ad1
 8000914:	08000ad1 	.word	0x08000ad1
 8000918:	08000ad1 	.word	0x08000ad1
 800091c:	08000ad1 	.word	0x08000ad1
 8000920:	08000ad1 	.word	0x08000ad1
 8000924:	08000ad1 	.word	0x08000ad1
 8000928:	08000ad1 	.word	0x08000ad1
 800092c:	08000ab3 	.word	0x08000ab3
 8000930:	08000ab3 	.word	0x08000ab3
 8000934:	08000ab3 	.word	0x08000ab3
 8000938:	08000ab3 	.word	0x08000ab3
 800093c:	08000ab3 	.word	0x08000ab3
 8000940:	08000ab3 	.word	0x08000ab3
 8000944:	08000ab3 	.word	0x08000ab3
 8000948:	08000ab3 	.word	0x08000ab3
 800094c:	08000ab3 	.word	0x08000ab3
 8000950:	08000ab3 	.word	0x08000ab3
 8000954:	08000ab3 	.word	0x08000ab3
 8000958:	08000ab3 	.word	0x08000ab3
 800095c:	08000ab3 	.word	0x08000ab3
 8000960:	08000ab3 	.word	0x08000ab3
 8000964:	08000ab3 	.word	0x08000ab3
 8000968:	08000ab3 	.word	0x08000ab3
 800096c:	08000ab3 	.word	0x08000ab3
 8000970:	08000ab3 	.word	0x08000ab3
 8000974:	08000ab3 	.word	0x08000ab3
 8000978:	08000ab3 	.word	0x08000ab3
 800097c:	08000ab3 	.word	0x08000ab3
 8000980:	08000ab3 	.word	0x08000ab3
 8000984:	08000ab3 	.word	0x08000ab3
 8000988:	08000ab3 	.word	0x08000ab3
 800098c:	08000ab3 	.word	0x08000ab3
 8000990:	08000ab3 	.word	0x08000ab3
 8000994:	08000ab3 	.word	0x08000ab3
 8000998:	08000ab3 	.word	0x08000ab3
 800099c:	08000ab3 	.word	0x08000ab3
 80009a0:	08000ab3 	.word	0x08000ab3
 80009a4:	08000ab3 	.word	0x08000ab3
 80009a8:	08000ab3 	.word	0x08000ab3
 80009ac:	08000ab3 	.word	0x08000ab3
 80009b0:	08000ab3 	.word	0x08000ab3
 80009b4:	08000ab3 	.word	0x08000ab3
 80009b8:	08000ab3 	.word	0x08000ab3
 80009bc:	08000ab3 	.word	0x08000ab3
 80009c0:	08000ab3 	.word	0x08000ab3
 80009c4:	08000ab3 	.word	0x08000ab3
 80009c8:	08000ab3 	.word	0x08000ab3
 80009cc:	08000ab3 	.word	0x08000ab3
 80009d0:	08000ab3 	.word	0x08000ab3
 80009d4:	08000ab3 	.word	0x08000ab3
 80009d8:	08000ab3 	.word	0x08000ab3
 80009dc:	08000ab3 	.word	0x08000ab3
 80009e0:	08000ab3 	.word	0x08000ab3
 80009e4:	08000ab3 	.word	0x08000ab3
 80009e8:	08000ab3 	.word	0x08000ab3
 80009ec:	08000ab3 	.word	0x08000ab3
 80009f0:	08000ab3 	.word	0x08000ab3
 80009f4:	08000ab3 	.word	0x08000ab3
 80009f8:	08000ab3 	.word	0x08000ab3
 80009fc:	08000ab3 	.word	0x08000ab3
 8000a00:	08000ab3 	.word	0x08000ab3
 8000a04:	08000ab3 	.word	0x08000ab3
 8000a08:	08000ab3 	.word	0x08000ab3
 8000a0c:	08000ab3 	.word	0x08000ab3
 8000a10:	08000ab3 	.word	0x08000ab3
 8000a14:	08000ab3 	.word	0x08000ab3
 8000a18:	08000ab3 	.word	0x08000ab3
 8000a1c:	08000ab3 	.word	0x08000ab3
 8000a20:	08000ab3 	.word	0x08000ab3
 8000a24:	08000ab3 	.word	0x08000ab3
 8000a28:	08000ab3 	.word	0x08000ab3
 8000a2c:	08000ab3 	.word	0x08000ab3
 8000a30:	08000ab3 	.word	0x08000ab3
 8000a34:	08000ab3 	.word	0x08000ab3
 8000a38:	08000ab3 	.word	0x08000ab3
 8000a3c:	08000ab3 	.word	0x08000ab3
 8000a40:	08000ad1 	.word	0x08000ad1
 8000a44:	08000ab3 	.word	0x08000ab3
 8000a48:	08000a51 	.word	0x08000a51
 8000a4c:	08000ad1 	.word	0x08000ad1
        case GETALIVE:
            auxBuffTx[indiceAux++]=GETALIVE;
 8000a50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a5a:	3348      	adds	r3, #72	; 0x48
 8000a5c:	443b      	add	r3, r7
 8000a5e:	22f0      	movs	r2, #240	; 0xf0
 8000a60:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[indiceAux++]=ACK;
 8000a64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a6e:	3348      	adds	r3, #72	; 0x48
 8000a70:	443b      	add	r3, r7
 8000a72:	220d      	movs	r2, #13
 8000a74:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x05;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	743b      	strb	r3, [r7, #16]
            break;
 8000a7c:	e029      	b.n	8000ad2 <decodeData+0x2be>
            break;
        case LEDS:

            break;
        case PULSADORES:
            auxBuffTx[indiceAux++]=PULSADORES;
 8000a7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a88:	3348      	adds	r3, #72	; 0x48
 8000a8a:	443b      	add	r3, r7
 8000a8c:	2212      	movs	r2, #18
 8000a8e:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[indiceAux++]=myButtons[0].event;
 8000a92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <decodeData+0x340>)
 8000aa0:	785a      	ldrb	r2, [r3, #1]
 8000aa2:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x05;
 8000aac:	2305      	movs	r3, #5
 8000aae:	743b      	strb	r3, [r7, #16]
            break;
 8000ab0:	e00f      	b.n	8000ad2 <decodeData+0x2be>
//            }
//            auxBuffTx[NBYTES] = 0x0C;
            break;

        default:
            auxBuffTx[indiceAux++]=0xFF;
 8000ab2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000abc:	3348      	adds	r3, #72	; 0x48
 8000abe:	443b      	add	r3, r7
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	f803 2c3c 	strb.w	r2, [r3, #-60]
            auxBuffTx[NBYTES]=0x04;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	743b      	strb	r3, [r7, #16]
            break;
 8000aca:	e002      	b.n	8000ad2 <decodeData+0x2be>
            break;
 8000acc:	bf00      	nop
 8000ace:	e000      	b.n	8000ad2 <decodeData+0x2be>
            break;
 8000ad0:	bf00      	nop
    }
    cheksum=0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    for(uint8_t a=0 ; a<indiceAux ;a++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000ade:	e021      	b.n	8000b24 <decodeData+0x310>
        cheksum ^= auxBuffTx[a];
 8000ae0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ae4:	3348      	adds	r3, #72	; 0x48
 8000ae6:	443b      	add	r3, r7
 8000ae8:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8000aec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000af0:	4053      	eors	r3, r2
 8000af2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        datosCom->bufferTx[datosCom->indexWriteTx++] = auxBuffTx[a];
 8000af6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	1c59      	adds	r1, r3, #1
 8000b00:	b2c8      	uxtb	r0, r1
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	7108      	strb	r0, [r1, #4]
 8000b06:	4619      	mov	r1, r3
 8000b08:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8000b0c:	443b      	add	r3, r7
 8000b0e:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	440b      	add	r3, r1
 8000b16:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    for(uint8_t a=0 ; a<indiceAux ;a++) {
 8000b1a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000b24:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3d7      	bcc.n	8000ae0 <decodeData+0x2cc>
    }
        datosCom->bufferTx[datosCom->indexWriteTx++] = cheksum;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	b2d1      	uxtb	r1, r2
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	7111      	strb	r1, [r2, #4]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000b46:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8000b4a:	bf00      	nop
 8000b4c:	374c      	adds	r7, #76	; 0x4c
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	2000064c 	.word	0x2000064c

08000b58 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom, uint8_t source){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
    if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	78da      	ldrb	r2, [r3, #3]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d002      	beq.n	8000b76 <comunicationsTask+0x1e>
        decodeProtocol(datosCom);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fd49 	bl	8000608 <decodeProtocol>
    }

    if(datosCom->indexReadTx!=datosCom->indexWriteTx){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	795a      	ldrb	r2, [r3, #5]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d016      	beq.n	8000bb0 <comunicationsTask+0x58>
        if(source){
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d013      	beq.n	8000bb0 <comunicationsTask+0x58>
        	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <comunicationsTask+0x60>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	d10c      	bne.n	8000bb0 <comunicationsTask+0x58>
				USART1->DR = datosCom->bufferTx[datosCom->indexReadTx++];
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	795b      	ldrb	r3, [r3, #5]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	b2d1      	uxtb	r1, r2
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	7151      	strb	r1, [r2, #5]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <comunicationsTask+0x64>)
 8000bae:	605a      	str	r2, [r3, #4]
				//HAL_UART_Transmit(&huart1, &datosCom->bufferTx[datosCom->indexReadTx++], 1, 0);
			}
        } //else
           // myWifi.writeWifiData(&datosCom->bufferTx[datosCom->indexReadTx++],1);
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200001e0 	.word	0x200001e0
 8000bbc:	40013800 	.word	0x40013800

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 faef 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f88f 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f000 f961 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bd2:	f000 f8e5 	bl	8000da0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000bd6:	f000 f933 	bl	8000e40 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000bda:	f008 f981 	bl	8008ee0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CDC_AttachRxData(USBReceive); // Se hace un attach a la funcion USBReceive
 8000bde:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <main+0xf4>)
 8000be0:	f008 fab4 	bl	800914c <CDC_AttachRxData>
  HAL_TIM_Base_Start_IT(&htim1);
 8000be4:	4834      	ldr	r0, [pc, #208]	; (8000cb8 <main+0xf8>)
 8000be6:	f003 f939 	bl	8003e5c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &datosComSerie.bufferRx[datosComSerie.indexWriteRx], 1);
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <main+0xfc>)
 8000bec:	789b      	ldrb	r3, [r3, #2]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <main+0xfc>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	3306      	adds	r3, #6
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <main+0x100>)
 8000bfc:	f003 fd2c 	bl	8004658 <HAL_UART_Receive_IT>

  time100ms = EQ100MS;
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <main+0x104>)
 8000c02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c06:	801a      	strh	r2, [r3, #0]
  time20ms = EQ20MS;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <main+0x108>)
 8000c0a:	2250      	movs	r2, #80	; 0x50
 8000c0c:	701a      	strb	r2, [r3, #0]
  LEDMODE = THREESECONDS;
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <main+0x10c>)
 8000c10:	7813      	ldrb	r3, [r2, #0]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	7013      	strb	r3, [r2, #0]
  mask = 0x55555555;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <main+0x110>)
 8000c1a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000c1e:	601a      	str	r2, [r3, #0]
  HBintervalWidth = THREESECONDSINTERVAL;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <main+0x114>)
 8000c22:	221d      	movs	r2, #29
 8000c24:	701a      	strb	r2, [r3, #0]

  mode=IDLE;
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <main+0x118>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
  CARSTATUS=RESTING;
 8000c2c:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <main+0x10c>)
 8000c2e:	7813      	ldrb	r3, [r2, #0]
 8000c30:	f36f 0341 	bfc	r3, #1, #1
 8000c34:	7013      	strb	r3, [r2, #0]

  for (uint8_t index = 0; index < NUMBUTTONS; index++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	e00c      	b.n	8000c56 <main+0x96>
	  inicializaButtons(&myButtons[index]);
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <main+0x11c>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc84 	bl	8000558 <inicializaButtons>
  for (uint8_t index = 0; index < NUMBUTTONS; index++) {
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	3301      	adds	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0ef      	beq.n	8000c3c <main+0x7c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (!time100ms) {
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <main+0x104>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d107      	bne.n	8000c74 <main+0xb4>
		heartBeat();
 8000c64:	f7ff fad8 	bl	8000218 <heartBeat>
		imAlive();
 8000c68:	f7ff fb9c 	bl	80003a4 <imAlive>
		time100ms = EQ100MS;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <main+0x104>)
 8000c6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c72:	801a      	strh	r2, [r3, #0]
	}
	if (!time20ms) {
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <main+0x108>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <main+0xc6>
		debounceTask();
 8000c7c:	f7ff fc80 	bl	8000580 <debounceTask>
		time20ms = EQ20MS;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <main+0x108>)
 8000c82:	2250      	movs	r2, #80	; 0x50
 8000c84:	701a      	strb	r2, [r3, #0]
	}
	if(newData){
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <main+0x120>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d009      	beq.n	8000ca2 <main+0xe2>
		if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <main+0x124>)
 8000c92:	f008 fa35 	bl	8009100 <CDC_Transmit_FS>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <main+0xe2>
			newData = 0;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <main+0x120>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
	}
	//myWifi.taskWifi();
	comunicationsTask(&datosComSerie,true);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <main+0xfc>)
 8000ca6:	f7ff ff57 	bl	8000b58 <comunicationsTask>
	comunicationsTask(&datosComWifi,false);
 8000caa:	2100      	movs	r1, #0
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <main+0x128>)
 8000cae:	f7ff ff53 	bl	8000b58 <comunicationsTask>
	if (!time100ms) {
 8000cb2:	e7d3      	b.n	8000c5c <main+0x9c>
 8000cb4:	080001b9 	.word	0x080001b9
 8000cb8:	20000198 	.word	0x20000198
 8000cbc:	20000238 	.word	0x20000238
 8000cc0:	200001e0 	.word	0x200001e0
 8000cc4:	2000022a 	.word	0x2000022a
 8000cc8:	2000022c 	.word	0x2000022c
 8000ccc:	20000648 	.word	0x20000648
 8000cd0:	20000230 	.word	0x20000230
 8000cd4:	20000229 	.word	0x20000229
 8000cd8:	20000228 	.word	0x20000228
 8000cdc:	2000064c 	.word	0x2000064c
 8000ce0:	20000659 	.word	0x20000659
 8000ce4:	20000658 	.word	0x20000658
 8000ce8:	20000440 	.word	0x20000440

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf6:	2228      	movs	r2, #40	; 0x28
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 fdec 	bl	80098d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fb74 	bl	8003430 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d4e:	f000 f907 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fde0 	bl	8003934 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d7a:	f000 f8f1 	bl	8000f60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 ff61 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d94:	f000 f8e4 	bl	8000f60 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	; 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dc4:	2247      	movs	r2, #71	; 0x47
 8000dc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dd0:	22fa      	movs	r2, #250	; 0xfa
 8000dd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000de8:	f002 ffe8 	bl	8003dbc <HAL_TIM_Base_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000df2:	f000 f8b5 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000e04:	f003 f984 	bl	8004110 <HAL_TIM_ConfigClockSource>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000e0e:	f000 f8a7 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM1_Init+0x98>)
 8000e20:	f003 fb5a 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000e2a:	f000 f899 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000198 	.word	0x20000198
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_USART1_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e78:	f003 fb9e 	bl	80045b8 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f000 f86d 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001e0 	.word	0x200001e0
 8000e90:	40013800 	.word	0x40013800

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <MX_GPIO_Init+0xc4>)
 8000f10:	f000 fd07 	bl	8001922 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480a      	ldr	r0, [pc, #40]	; (8000f58 <MX_GPIO_Init+0xc4>)
 8000f2e:	f000 fb5d 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_GPIO_Init+0xc8>)
 8000f48:	f000 fb50 	bl	80015ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_MspInit+0x60>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_MspInit+0x60>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d113      	bne.n	800100a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_TIM_Base_MspInit+0x48>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_TIM_Base_MspInit+0x48>)
 8000fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_Base_MspInit+0x48>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2019      	movs	r0, #25
 8001000:	f000 fa0b 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001004:	2019      	movs	r0, #25
 8001006:	f000 fa24 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012c00 	.word	0x40012c00
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <HAL_UART_MspInit+0x9c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d139      	bne.n	80010b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_UART_MspInit+0xa0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_UART_MspInit+0xa0>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_UART_MspInit+0xa0>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_UART_MspInit+0xa0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <HAL_UART_MspInit+0xa0>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_UART_MspInit+0xa0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800106c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	480f      	ldr	r0, [pc, #60]	; (80010c0 <HAL_UART_MspInit+0xa4>)
 8001082:	f000 fab3 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <HAL_UART_MspInit+0xa4>)
 800109c:	f000 faa6 	bl	80015ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2025      	movs	r0, #37	; 0x25
 80010a6:	f000 f9b8 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010aa:	2025      	movs	r0, #37	; 0x25
 80010ac:	f000 f9d1 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f893 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800111a:	f000 fd3f 	bl	8001b9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000d34 	.word	0x20000d34

08001128 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM1_UP_IRQHandler+0x10>)
 800112e:	f002 fee7 	bl	8003f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000198 	.word	0x20000198

0800113c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART1_IRQHandler+0x10>)
 8001142:	f003 faaf 	bl	80046a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001e0 	.word	0x200001e0

08001150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff fff8 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001178:	4c09      	ldr	r4, [pc, #36]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f008 fbaf 	bl	80098e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118a:	f7ff fd19 	bl	8000bc0 <main>
  bx lr
 800118e:	4770      	bx	lr
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001198:	080099c4 	.word	0x080099c4
  ldr r2, =_sbss
 800119c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80011a0:	20001244 	.word	0x20001244

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x28>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x28>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f923 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fed2 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f93b 	bl	800146e <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f903 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x1c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x20>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_IncTick+0x20>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000008 	.word	0x20000008
 8001254:	2000065c 	.word	0x2000065c

08001258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <HAL_GetTick+0x10>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	2000065c 	.word	0x2000065c

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4906      	ldr	r1, [pc, #24]	; (8001304 <__NVIC_EnableIRQ+0x34>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff90 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff2d 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff42 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff35 	bl	80012d0 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d008      	beq.n	80014b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2204      	movs	r2, #4
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e020      	b.n	80014f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 020e 	bic.w	r2, r2, #14
 80014be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d005      	beq.n	8001520 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2204      	movs	r2, #4
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e051      	b.n	80015c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 020e 	bic.w	r2, r2, #14
 800152e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_DMA_Abort_IT+0xd4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d029      	beq.n	800159e <HAL_DMA_Abort_IT+0xa2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <HAL_DMA_Abort_IT+0xd8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d022      	beq.n	800159a <HAL_DMA_Abort_IT+0x9e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_DMA_Abort_IT+0xdc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01a      	beq.n	8001594 <HAL_DMA_Abort_IT+0x98>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_DMA_Abort_IT+0xe0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d012      	beq.n	800158e <HAL_DMA_Abort_IT+0x92>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <HAL_DMA_Abort_IT+0xe4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00a      	beq.n	8001588 <HAL_DMA_Abort_IT+0x8c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_DMA_Abort_IT+0xe8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d102      	bne.n	8001582 <HAL_DMA_Abort_IT+0x86>
 800157c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001580:	e00e      	b.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
 8001582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001586:	e00b      	b.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	e008      	b.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	e005      	b.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
 8001594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001598:	e002      	b.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
 800159a:	2310      	movs	r3, #16
 800159c:	e000      	b.n	80015a0 <HAL_DMA_Abort_IT+0xa4>
 800159e:	2301      	movs	r3, #1
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_DMA_Abort_IT+0xec>)
 80015a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
    } 
  }
  return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020008 	.word	0x40020008
 80015d4:	4002001c 	.word	0x4002001c
 80015d8:	40020030 	.word	0x40020030
 80015dc:	40020044 	.word	0x40020044
 80015e0:	40020058 	.word	0x40020058
 80015e4:	4002006c 	.word	0x4002006c
 80015e8:	40020000 	.word	0x40020000

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e169      	b.n	80018d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001600:	2201      	movs	r2, #1
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 8158 	bne.w	80018ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a9a      	ldr	r2, [pc, #616]	; (800188c <HAL_GPIO_Init+0x2a0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d05e      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001628:	4a98      	ldr	r2, [pc, #608]	; (800188c <HAL_GPIO_Init+0x2a0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d875      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800162e:	4a98      	ldr	r2, [pc, #608]	; (8001890 <HAL_GPIO_Init+0x2a4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d058      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001634:	4a96      	ldr	r2, [pc, #600]	; (8001890 <HAL_GPIO_Init+0x2a4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d86f      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800163a:	4a96      	ldr	r2, [pc, #600]	; (8001894 <HAL_GPIO_Init+0x2a8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d052      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001640:	4a94      	ldr	r2, [pc, #592]	; (8001894 <HAL_GPIO_Init+0x2a8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d869      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001646:	4a94      	ldr	r2, [pc, #592]	; (8001898 <HAL_GPIO_Init+0x2ac>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d04c      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 800164c:	4a92      	ldr	r2, [pc, #584]	; (8001898 <HAL_GPIO_Init+0x2ac>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d863      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001652:	4a92      	ldr	r2, [pc, #584]	; (800189c <HAL_GPIO_Init+0x2b0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d046      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001658:	4a90      	ldr	r2, [pc, #576]	; (800189c <HAL_GPIO_Init+0x2b0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d85d      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800165e:	2b12      	cmp	r3, #18
 8001660:	d82a      	bhi.n	80016b8 <HAL_GPIO_Init+0xcc>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d859      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <HAL_GPIO_Init+0x80>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	080016e7 	.word	0x080016e7
 8001670:	080016c1 	.word	0x080016c1
 8001674:	080016d3 	.word	0x080016d3
 8001678:	08001715 	.word	0x08001715
 800167c:	0800171b 	.word	0x0800171b
 8001680:	0800171b 	.word	0x0800171b
 8001684:	0800171b 	.word	0x0800171b
 8001688:	0800171b 	.word	0x0800171b
 800168c:	0800171b 	.word	0x0800171b
 8001690:	0800171b 	.word	0x0800171b
 8001694:	0800171b 	.word	0x0800171b
 8001698:	0800171b 	.word	0x0800171b
 800169c:	0800171b 	.word	0x0800171b
 80016a0:	0800171b 	.word	0x0800171b
 80016a4:	0800171b 	.word	0x0800171b
 80016a8:	0800171b 	.word	0x0800171b
 80016ac:	0800171b 	.word	0x0800171b
 80016b0:	080016c9 	.word	0x080016c9
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	4a79      	ldr	r2, [pc, #484]	; (80018a0 <HAL_GPIO_Init+0x2b4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016be:	e02c      	b.n	800171a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e029      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	3304      	adds	r3, #4
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e024      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	3308      	adds	r3, #8
 80016d8:	623b      	str	r3, [r7, #32]
          break;
 80016da:	e01f      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	330c      	adds	r3, #12
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e01a      	b.n	800171c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ee:	2304      	movs	r3, #4
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e013      	b.n	800171c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016fc:	2308      	movs	r3, #8
 80016fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	611a      	str	r2, [r3, #16]
          break;
 8001706:	e009      	b.n	800171c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	615a      	str	r2, [r3, #20]
          break;
 8001712:	e003      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
          break;
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x130>
          break;
 800171a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d801      	bhi.n	8001726 <HAL_GPIO_Init+0x13a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e001      	b.n	800172a <HAL_GPIO_Init+0x13e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d802      	bhi.n	8001738 <HAL_GPIO_Init+0x14c>
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x152>
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3b08      	subs	r3, #8
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	210f      	movs	r1, #15
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	6a39      	ldr	r1, [r7, #32]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80b1 	beq.w	80018ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800176c:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_GPIO_Init+0x2b8>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_GPIO_Init+0x2b8>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x2b8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_GPIO_Init+0x2bc>)
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a40      	ldr	r2, [pc, #256]	; (80018ac <HAL_GPIO_Init+0x2c0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d013      	beq.n	80017d8 <HAL_GPIO_Init+0x1ec>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3f      	ldr	r2, [pc, #252]	; (80018b0 <HAL_GPIO_Init+0x2c4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00d      	beq.n	80017d4 <HAL_GPIO_Init+0x1e8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3e      	ldr	r2, [pc, #248]	; (80018b4 <HAL_GPIO_Init+0x2c8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d007      	beq.n	80017d0 <HAL_GPIO_Init+0x1e4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_GPIO_Init+0x1e0>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e006      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017cc:	2304      	movs	r3, #4
 80017ce:	e004      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e002      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017d8:	2300      	movs	r3, #0
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	4093      	lsls	r3, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ea:	492f      	ldr	r1, [pc, #188]	; (80018a8 <HAL_GPIO_Init+0x2bc>)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	492c      	ldr	r1, [pc, #176]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4928      	ldr	r1, [pc, #160]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800181c:	4013      	ands	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4922      	ldr	r1, [pc, #136]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	491e      	ldr	r1, [pc, #120]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4918      	ldr	r1, [pc, #96]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4914      	ldr	r1, [pc, #80]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800186c:	4013      	ands	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d021      	beq.n	80018c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	490e      	ldr	r1, [pc, #56]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e021      	b.n	80018ce <HAL_GPIO_Init+0x2e2>
 800188a:	bf00      	nop
 800188c:	10320000 	.word	0x10320000
 8001890:	10310000 	.word	0x10310000
 8001894:	10220000 	.word	0x10220000
 8001898:	10210000 	.word	0x10210000
 800189c:	10120000 	.word	0x10120000
 80018a0:	10110000 	.word	0x10110000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40010800 	.word	0x40010800
 80018b0:	40010c00 	.word	0x40010c00
 80018b4:	40011000 	.word	0x40011000
 80018b8:	40011400 	.word	0x40011400
 80018bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_GPIO_Init+0x304>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4909      	ldr	r1, [pc, #36]	; (80018f0 <HAL_GPIO_Init+0x304>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	3301      	adds	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f47f ae8e 	bne.w	8001600 <HAL_GPIO_Init+0x14>
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	372c      	adds	r7, #44	; 0x2c
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e001      	b.n	8001916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
 800192e:	4613      	mov	r3, r2
 8001930:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001938:	887a      	ldrh	r2, [r7, #2]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800193e:	e003      	b.n	8001948 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	041a      	lsls	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	611a      	str	r2, [r3, #16]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001954:	b08b      	sub	sp, #44	; 0x2c
 8001956:	af06      	add	r7, sp, #24
 8001958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0f1      	b.n	8001b48 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d106      	bne.n	800197e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f007 fd03 	bl	8009384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fbc2 	bl	8005114 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	687e      	ldr	r6, [r7, #4]
 8001998:	466d      	mov	r5, sp
 800199a:	f106 0410 	add.w	r4, r6, #16
 800199e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	602b      	str	r3, [r5, #0]
 80019a6:	1d33      	adds	r3, r6, #4
 80019a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019aa:	6838      	ldr	r0, [r7, #0]
 80019ac:	f003 fb8c 	bl	80050c8 <USB_CoreInit>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0c2      	b.n	8001b48 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fbbd 	bl	8005148 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e040      	b.n	8001a56 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3301      	adds	r3, #1
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3303      	adds	r3, #3
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	3338      	adds	r3, #56	; 0x38
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	333c      	adds	r3, #60	; 0x3c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3340      	adds	r3, #64	; 0x40
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	3301      	adds	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3b9      	bcc.n	80019d4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e044      	b.n	8001af0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d3b5      	bcc.n	8001a66 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	687e      	ldr	r6, [r7, #4]
 8001b02:	466d      	mov	r5, sp
 8001b04:	f106 0410 	add.w	r4, r6, #16
 8001b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	602b      	str	r3, [r5, #0]
 8001b10:	1d33      	adds	r3, r6, #4
 8001b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f003 fb23 	bl	8005160 <USB_DevInit>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e00d      	b.n	8001b48 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 fda4 	bl	800768e <USB_DevDisconnect>

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_PCD_Start+0x16>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e016      	b.n	8001b94 <HAL_PCD_Start+0x44>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fab8 	bl	80050e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f007 fe75 	bl	800986a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 fd78 	bl	800767a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fd7a 	bl	80076a2 <USB_ReadInterrupts>
 8001bae:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fb1b 	bl	80021f6 <PCD_EP_ISR_Handler>

    return;
 8001bc0:	e119      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	b292      	uxth	r2, r2
 8001be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f007 fc48 	bl	800947a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bea:	2100      	movs	r1, #0
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f905 	bl	8001dfc <HAL_PCD_SetAddress>

    return;
 8001bf2:	e100      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00c      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c10:	b292      	uxth	r2, r2
 8001c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c16:	e0ee      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c3a:	e0dc      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d027      	beq.n	8001c96 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0204 	bic.w	r2, r2, #4
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0208 	bic.w	r2, r2, #8
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f007 fc38 	bl	80094ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c94:	e0af      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8083 	beq.w	8001da8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	77fb      	strb	r3, [r7, #31]
 8001ca6:	e010      	b.n	8001cca <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	441a      	add	r2, r3
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	3320      	adds	r3, #32
 8001cbe:	443b      	add	r3, r7
 8001cc0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001cc4:	7ffb      	ldrb	r3, [r7, #31]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	77fb      	strb	r3, [r7, #31]
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	2b07      	cmp	r3, #7
 8001cce:	d9eb      	bls.n	8001ca8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d00:	bf00      	nop
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f6      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	b292      	uxth	r2, r2
 8001d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	e00f      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	7ffa      	ldrb	r2, [r7, #31]
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	440a      	add	r2, r1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	3320      	adds	r3, #32
 8001d44:	443b      	add	r3, r7
 8001d46:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d4a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d4c:	7ffb      	ldrb	r3, [r7, #31]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	77fb      	strb	r3, [r7, #31]
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	d9ec      	bls.n	8001d32 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0208 	orr.w	r2, r2, #8
 8001d6a:	b292      	uxth	r2, r2
 8001d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d82:	b292      	uxth	r2, r2
 8001d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0204 	orr.w	r2, r2, #4
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f007 fb89 	bl	80094b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001da6:	e026      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00f      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f007 fb47 	bl	800945e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001dd0:	e011      	b.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dee:	b292      	uxth	r2, r2
 8001df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001df4:	bf00      	nop
  }
}
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_PCD_SetAddress+0x1a>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e013      	b.n	8001e3e <HAL_PCD_SetAddress+0x42>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 fc10 	bl	8007654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	4608      	mov	r0, r1
 8001e50:	4611      	mov	r1, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4603      	mov	r3, r0
 8001e56:	70fb      	strb	r3, [r7, #3]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	803b      	strh	r3, [r7, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da0e      	bge.n	8001e8a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	705a      	strb	r2, [r3, #1]
 8001e88:	e00e      	b.n	8001ea8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 0207 	and.w	r2, r3, #7
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb4:	883a      	ldrh	r2, [r7, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	78ba      	ldrb	r2, [r7, #2]
 8001ebe:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec0:	78bb      	ldrb	r3, [r7, #2]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d102      	bne.n	8001ecc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_EP_Open+0x94>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Open+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 f959 	bl	80051a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da0e      	bge.n	8001f32 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	705a      	strb	r2, [r3, #1]
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 0207 	and.w	r2, r3, #7
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_EP_Close+0x6a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e00e      	b.n	8001f88 <HAL_PCD_EP_Close+0x88>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fcd1 	bl	8005920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	f003 0207 	and.w	r2, r3, #7
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6979      	ldr	r1, [r7, #20]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fe88 	bl	8005cf8 <USB_EPStartXfer>

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0207 	and.w	r2, r3, #7
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002014:	681b      	ldr	r3, [r3, #0]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2201      	movs	r2, #1
 800206a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	b2da      	uxtb	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fe3a 	bl	8005cf8 <USB_EPStartXfer>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 0207 	and.w	r2, r3, #7
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d901      	bls.n	80020ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e04c      	b.n	8002146 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da0e      	bge.n	80020d2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	705a      	strb	r2, [r3, #1]
 80020d0:	e00c      	b.n	80020ec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_PCD_EP_SetStall+0x7e>
 8002108:	2302      	movs	r3, #2
 800210a:	e01c      	b.n	8002146 <HAL_PCD_EP_SetStall+0xb8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f005 f99d 	bl	800745a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f005 fac2 	bl	80076c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d901      	bls.n	800216c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e040      	b.n	80021ee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800216c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002170:	2b00      	cmp	r3, #0
 8002172:	da0e      	bge.n	8002192 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	705a      	strb	r2, [r3, #1]
 8002190:	e00e      	b.n	80021b0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f003 0207 	and.w	r2, r3, #7
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_EP_ClrStall+0x82>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e00e      	b.n	80021ee <HAL_PCD_EP_ClrStall+0xa0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4618      	mov	r0, r3
 80021e0:	f005 f98b 	bl	80074fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b096      	sub	sp, #88	; 0x58
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021fe:	e3bf      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002208:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800220c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800221a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8179 	bne.w	8002516 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d152      	bne.n	80022d6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002240:	81fb      	strh	r3, [r7, #14]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	89fb      	ldrh	r3, [r7, #14]
 8002248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800224c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002250:	b29b      	uxth	r3, r3
 8002252:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3328      	adds	r3, #40	; 0x28
 8002258:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	3302      	adds	r3, #2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002284:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	441a      	add	r2, r3
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002294:	2100      	movs	r1, #0
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f007 f8c7 	bl	800942a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 836b 	beq.w	8002980 <PCD_EP_ISR_Handler+0x78a>
 80022aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8366 	bne.w	8002980 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b292      	uxth	r2, r2
 80022c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022d4:	e354      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022dc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d034      	beq.n	800235e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	3306      	adds	r3, #6
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800232a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800232e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002330:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002332:	b29b      	uxth	r3, r3
 8002334:	f005 fa14 	bl	8007760 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29a      	uxth	r2, r3
 8002340:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002344:	4013      	ands	r3, r2
 8002346:	823b      	strh	r3, [r7, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	8a3a      	ldrh	r2, [r7, #16]
 800234e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002352:	b292      	uxth	r2, r2
 8002354:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f007 f83a 	bl	80093d0 <HAL_PCD_SetupStageCallback>
 800235c:	e310      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800235e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002362:	2b00      	cmp	r3, #0
 8002364:	f280 830c 	bge.w	8002980 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29a      	uxth	r2, r3
 8002370:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002374:	4013      	ands	r3, r2
 8002376:	83fb      	strh	r3, [r7, #30]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	8bfa      	ldrh	r2, [r7, #30]
 800237e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002382:	b292      	uxth	r2, r2
 8002384:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	3306      	adds	r3, #6
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <PCD_EP_ISR_Handler+0x1f8>
 80023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c8:	6959      	ldr	r1, [r3, #20]
 80023ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f005 f9c4 	bl	8007760 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	441a      	add	r2, r3
 80023e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023e6:	2100      	movs	r1, #0
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f007 f803 	bl	80093f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80023f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 82bd 	bne.w	8002980 <PCD_EP_ISR_Handler+0x78a>
 8002406:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800240a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800240e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002412:	f000 82b5 	beq.w	8002980 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002440:	b29a      	uxth	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b3e      	cmp	r3, #62	; 0x3e
 800244c:	d91d      	bls.n	800248a <PCD_EP_ISR_Handler+0x294>
 800244e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
 8002456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <PCD_EP_ISR_Handler+0x272>
 8002462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002464:	3b01      	subs	r3, #1
 8002466:	647b      	str	r3, [r7, #68]	; 0x44
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29a      	uxth	r2, r3
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	b29b      	uxth	r3, r3
 8002472:	029b      	lsls	r3, r3, #10
 8002474:	b29b      	uxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002482:	b29a      	uxth	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	e026      	b.n	80024d8 <PCD_EP_ISR_Handler+0x2e2>
 800248a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <PCD_EP_ISR_Handler+0x2b2>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	e017      	b.n	80024d8 <PCD_EP_ISR_Handler+0x2e2>
 80024a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	647b      	str	r3, [r7, #68]	; 0x44
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <PCD_EP_ISR_Handler+0x2cc>
 80024bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024be:	3301      	adds	r3, #1
 80024c0:	647b      	str	r3, [r7, #68]	; 0x44
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	827b      	strh	r3, [r7, #18]
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f0:	827b      	strh	r3, [r7, #18]
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024f8:	827b      	strh	r3, [r7, #18]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	b29b      	uxth	r3, r3
 8002512:	8013      	strh	r3, [r2, #0]
 8002514:	e234      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800252a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800252e:	2b00      	cmp	r3, #0
 8002530:	f280 80fc 	bge.w	800272c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29a      	uxth	r2, r3
 8002546:	f640 738f 	movw	r3, #3983	; 0xf8f
 800254a:	4013      	ands	r3, r2
 800254c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800256a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002582:	7b1b      	ldrb	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d125      	bne.n	80025d4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	3306      	adds	r3, #6
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80025b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8092 	beq.w	80026e2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	6959      	ldr	r1, [r3, #20]
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	88da      	ldrh	r2, [r3, #6]
 80025ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025ce:	f005 f8c7 	bl	8007760 <USB_ReadPMA>
 80025d2:	e086      	b.n	80026e2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d10a      	bne.n	80025f2 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025e0:	461a      	mov	r2, r3
 80025e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f9d9 	bl	800299c <HAL_PCD_EP_DB_Receive>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80025f0:	e077      	b.n	80026e2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	441a      	add	r2, r3
 800261e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002632:	b29b      	uxth	r3, r3
 8002634:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d024      	beq.n	800269a <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	3302      	adds	r3, #2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002678:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800267c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02e      	beq.n	80026e2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	6959      	ldr	r1, [r3, #20]
 800268c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268e:	891a      	ldrh	r2, [r3, #8]
 8002690:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002694:	f005 f864 	bl	8007760 <USB_ReadPMA>
 8002698:	e023      	b.n	80026e2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	3306      	adds	r3, #6
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80026c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	6959      	ldr	r1, [r3, #20]
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	895a      	ldrh	r2, [r3, #10]
 80026da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026de:	f005 f83f 	bl	8007760 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026ea:	441a      	add	r2, r3
 80026ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026f8:	441a      	add	r2, r3
 80026fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <PCD_EP_ISR_Handler+0x51c>
 8002706:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	429a      	cmp	r2, r3
 8002710:	d206      	bcs.n	8002720 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f006 fe6b 	bl	80093f4 <HAL_PCD_DataOutStageCallback>
 800271e:	e005      	b.n	800272c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fae6 	bl	8005cf8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800272c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8123 	beq.w	8002980 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800273a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800277e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002786:	b29b      	uxth	r3, r3
 8002788:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	78db      	ldrb	r3, [r3, #3]
 800278e:	2b01      	cmp	r3, #1
 8002790:	f040 80a2 	bne.w	80028d8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	7b1b      	ldrb	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8093 	beq.w	80028ca <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d046      	beq.n	800283e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d126      	bne.n	8002806 <PCD_EP_ISR_Handler+0x610>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	4413      	add	r3, r2
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	011a      	lsls	r2, r3, #4
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	4413      	add	r3, r2
 80027da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fe:	b29a      	uxth	r2, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	e061      	b.n	80028ca <PCD_EP_ISR_Handler+0x6d4>
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d15d      	bne.n	80028ca <PCD_EP_ISR_Handler+0x6d4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	4413      	add	r3, r2
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	011a      	lsls	r2, r3, #4
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	4413      	add	r3, r2
 8002830:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]
 800283c:	e045      	b.n	80028ca <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	785b      	ldrb	r3, [r3, #1]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d126      	bne.n	800289a <PCD_EP_ISR_Handler+0x6a4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	4413      	add	r3, r2
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	011a      	lsls	r2, r3, #4
 800286a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286c:	4413      	add	r3, r2
 800286e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287e:	b29a      	uxth	r2, r3
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002892:	b29a      	uxth	r2, r3
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	e017      	b.n	80028ca <PCD_EP_ISR_Handler+0x6d4>
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	785b      	ldrb	r3, [r3, #1]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d113      	bne.n	80028ca <PCD_EP_ISR_Handler+0x6d4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	4413      	add	r3, r2
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	011a      	lsls	r2, r3, #4
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028bc:	4413      	add	r3, r2
 80028be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	2200      	movs	r2, #0
 80028c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f006 fdaa 	bl	800942a <HAL_PCD_DataInStageCallback>
 80028d6:	e053      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80028d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d146      	bne.n	8002972 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	3302      	adds	r3, #2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002918:	429a      	cmp	r2, r3
 800291a:	d907      	bls.n	800292c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800291c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002924:	1ad2      	subs	r2, r2, r3
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	619a      	str	r2, [r3, #24]
 800292a:	e002      	b.n	8002932 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800292c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f006 fd72 	bl	800942a <HAL_PCD_DataInStageCallback>
 8002946:	e01b      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002950:	441a      	add	r2, r3
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800295e:	441a      	add	r2, r3
 8002960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002962:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f9c4 	bl	8005cf8 <USB_EPStartXfer>
 8002970:	e006      	b.n	8002980 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002972:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002976:	461a      	mov	r2, r3
 8002978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f91b 	bl	8002bb6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002988:	b29b      	uxth	r3, r3
 800298a:	b21b      	sxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	f6ff ac37 	blt.w	8002200 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3758      	adds	r7, #88	; 0x58
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d07e      	beq.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	3302      	adds	r3, #2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	8b7b      	ldrh	r3, [r7, #26]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d306      	bcc.n	80029f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	8b7b      	ldrh	r3, [r7, #26]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	619a      	str	r2, [r3, #24]
 80029f4:	e002      	b.n	80029fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d123      	bne.n	8002a4c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	833b      	strh	r3, [r7, #24]
 8002a20:	8b3b      	ldrh	r3, [r7, #24]
 8002a22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a26:	833b      	strh	r3, [r7, #24]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	8b3b      	ldrh	r3, [r7, #24]
 8002a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01f      	beq.n	8002a96 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	82fb      	strh	r3, [r7, #22]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	441a      	add	r2, r3
 8002a80:	8afb      	ldrh	r3, [r7, #22]
 8002a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a96:	8b7b      	ldrh	r3, [r7, #26]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8087 	beq.w	8002bac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6959      	ldr	r1, [r3, #20]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	891a      	ldrh	r2, [r3, #8]
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	f004 fe58 	bl	8007760 <USB_ReadPMA>
 8002ab0:	e07c      	b.n	8002bac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3306      	adds	r3, #6
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ada:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	8b7b      	ldrh	r3, [r7, #26]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d306      	bcc.n	8002af4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	619a      	str	r2, [r3, #24]
 8002af2:	e002      	b.n	8002afa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d123      	bne.n	8002b4a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	83fb      	strh	r3, [r7, #30]
 8002b1e:	8bfb      	ldrh	r3, [r7, #30]
 8002b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b24:	83fb      	strh	r3, [r7, #30]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	8bfb      	ldrh	r3, [r7, #30]
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11f      	bne.n	8002b94 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	83bb      	strh	r3, [r7, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	8bbb      	ldrh	r3, [r7, #28]
 8002b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b94:	8b7b      	ldrh	r3, [r7, #26]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6959      	ldr	r1, [r3, #20]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	895a      	ldrh	r2, [r3, #10]
 8002ba6:	8b7b      	ldrh	r3, [r7, #26]
 8002ba8:	f004 fdda 	bl	8007760 <USB_ReadPMA>
    }
  }

  return count;
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b0a4      	sub	sp, #144	; 0x90
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 81dd 	beq.w	8002f8a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	3302      	adds	r3, #2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d907      	bls.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	e002      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 80b9 	bne.w	8002d9a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d126      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	4413      	add	r3, r2
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e01a      	b.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d116      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	4413      	add	r3, r2
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	011a      	lsls	r2, r3, #4
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d126      	bne.n	8002d10 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	011a      	lsls	r2, r3, #4
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	801a      	strh	r2, [r3, #0]
 8002d0e:	e017      	b.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d113      	bne.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	4413      	add	r3, r2
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	011a      	lsls	r2, r3, #4
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	4413      	add	r3, r2
 8002d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f006 fb6f 	bl	800942a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 82fc 	beq.w	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	82fb      	strh	r3, [r7, #22]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	8013      	strh	r3, [r2, #0]
 8002d98:	e2da      	b.n	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d021      	beq.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	441a      	add	r2, r3
 8002dd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 82ae 	bne.w	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dfc:	441a      	add	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d30b      	bcc.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	621a      	str	r2, [r3, #32]
 8002e32:	e017      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d108      	bne.n	8002e4e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002e3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e4c:	e00a      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d165      	bne.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x382>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e80:	4413      	add	r3, r2
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8002eaa:	d91d      	bls.n	8002ee8 <HAL_PCD_EP_DB_Transmit+0x332>
 8002eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_PCD_EP_DB_Transmit+0x310>
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	029b      	lsls	r3, r3, #10
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	e044      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x350>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e035      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	e01c      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d118      	bne.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	4413      	add	r3, r2
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	011a      	lsls	r2, r3, #4
 8002f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f60:	4413      	add	r3, r2
 8002f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
 8002f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6959      	ldr	r1, [r3, #20]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	891a      	ldrh	r2, [r3, #8]
 8002f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f004 fba7 	bl	80076d6 <USB_WritePMA>
 8002f88:	e1e2      	b.n	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3306      	adds	r3, #6
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d307      	bcc.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	619a      	str	r2, [r3, #24]
 8002fd0:	e002      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 80c0 	bne.w	8003162 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d126      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x482>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffe:	4413      	add	r3, r2
 8003000:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	011a      	lsls	r2, r3, #4
 8003008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800300a:	4413      	add	r3, r2
 800300c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003010:	67bb      	str	r3, [r7, #120]	; 0x78
 8003012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301c:	b29a      	uxth	r2, r3
 800301e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003030:	b29a      	uxth	r2, r3
 8003032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e01a      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d116      	bne.n	800306e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	667b      	str	r3, [r7, #100]	; 0x64
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003054:	4413      	add	r3, r2
 8003056:	667b      	str	r3, [r7, #100]	; 0x64
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003060:	4413      	add	r3, r2
 8003062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003066:	663b      	str	r3, [r7, #96]	; 0x60
 8003068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800306a:	2200      	movs	r2, #0
 800306c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	677b      	str	r3, [r7, #116]	; 0x74
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d12b      	bne.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	4413      	add	r3, r2
 8003092:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	011a      	lsls	r2, r3, #4
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	4413      	add	r3, r2
 800309e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	e017      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x54e>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d113      	bne.n	8003104 <HAL_PCD_EP_DB_Transmit+0x54e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	4413      	add	r3, r2
 80030ec:	677b      	str	r3, [r7, #116]	; 0x74
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	011a      	lsls	r2, r3, #4
 80030f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	2200      	movs	r2, #0
 8003102:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f006 f98d 	bl	800942a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 811a 	bne.w	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800314c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	b29b      	uxth	r3, r3
 800315e:	8013      	strh	r3, [r2, #0]
 8003160:	e0f6      	b.n	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d121      	bne.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800319c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f040 80ca 	bne.w	8003350 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031c4:	441a      	add	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031d2:	441a      	add	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d30b      	bcc.n	80031fc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f4:	1ad2      	subs	r2, r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	621a      	str	r2, [r3, #32]
 80031fa:	e017      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d108      	bne.n	8003216 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003204:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003214:	e00a      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	657b      	str	r3, [r7, #84]	; 0x54
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d165      	bne.n	8003306 <HAL_PCD_EP_DB_Transmit+0x750>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324e:	4413      	add	r3, r2
 8003250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	011a      	lsls	r2, r3, #4
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	4413      	add	r3, r2
 800325c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003260:	65bb      	str	r3, [r7, #88]	; 0x58
 8003262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326c:	b29a      	uxth	r2, r3
 800326e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003276:	2b3e      	cmp	r3, #62	; 0x3e
 8003278:	d91d      	bls.n	80032b6 <HAL_PCD_EP_DB_Transmit+0x700>
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	66bb      	str	r3, [r7, #104]	; 0x68
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_PCD_EP_DB_Transmit+0x6de>
 800328e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003290:	3b01      	subs	r3, #1
 8003292:	66bb      	str	r3, [r7, #104]	; 0x68
 8003294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29a      	uxth	r2, r3
 800329a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329c:	b29b      	uxth	r3, r3
 800329e:	029b      	lsls	r3, r3, #10
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4313      	orrs	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	e041      	b.n	800333a <HAL_PCD_EP_DB_Transmit+0x784>
 80032b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80032be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d0:	801a      	strh	r2, [r3, #0]
 80032d2:	e032      	b.n	800333a <HAL_PCD_EP_DB_Transmit+0x784>
 80032d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	66bb      	str	r3, [r7, #104]	; 0x68
 80032dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_PCD_EP_DB_Transmit+0x738>
 80032e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ea:	3301      	adds	r3, #1
 80032ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80032ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	029b      	lsls	r3, r3, #10
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003302:	801a      	strh	r2, [r3, #0]
 8003304:	e019      	b.n	800333a <HAL_PCD_EP_DB_Transmit+0x784>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d115      	bne.n	800333a <HAL_PCD_EP_DB_Transmit+0x784>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	4413      	add	r3, r2
 800331e:	657b      	str	r3, [r7, #84]	; 0x54
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	011a      	lsls	r2, r3, #4
 8003326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003328:	4413      	add	r3, r2
 800332a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800332e:	653b      	str	r3, [r7, #80]	; 0x50
 8003330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003334:	b29a      	uxth	r2, r3
 8003336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003338:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6959      	ldr	r1, [r3, #20]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	895a      	ldrh	r2, [r3, #10]
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334a:	b29b      	uxth	r3, r3
 800334c:	f004 f9c3 	bl	80076d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336a:	82bb      	strh	r3, [r7, #20]
 800336c:	8abb      	ldrh	r3, [r7, #20]
 800336e:	f083 0310 	eor.w	r3, r3, #16
 8003372:	82bb      	strh	r3, [r7, #20]
 8003374:	8abb      	ldrh	r3, [r7, #20]
 8003376:	f083 0320 	eor.w	r3, r3, #32
 800337a:	82bb      	strh	r3, [r7, #20]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	8abb      	ldrh	r3, [r7, #20]
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3790      	adds	r7, #144	; 0x90
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b087      	sub	sp, #28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	4613      	mov	r3, r2
 80033ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c8:	897b      	ldrh	r3, [r7, #10]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e009      	b.n	80033f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033e0:	897a      	ldrh	r2, [r7, #10]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	b29a      	uxth	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	80da      	strh	r2, [r3, #6]
 8003408:	e00b      	b.n	8003422 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2201      	movs	r2, #1
 800340e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	b29a      	uxth	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b29a      	uxth	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
	...

08003430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e272      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8087 	beq.w	800355e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003450:	4b92      	ldr	r3, [pc, #584]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b04      	cmp	r3, #4
 800345a:	d00c      	beq.n	8003476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800345c:	4b8f      	ldr	r3, [pc, #572]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d112      	bne.n	800348e <HAL_RCC_OscConfig+0x5e>
 8003468:	4b8c      	ldr	r3, [pc, #560]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d10b      	bne.n	800348e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003476:	4b89      	ldr	r3, [pc, #548]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d06c      	beq.n	800355c <HAL_RCC_OscConfig+0x12c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d168      	bne.n	800355c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e24c      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x76>
 8003498:	4b80      	ldr	r3, [pc, #512]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a7f      	ldr	r2, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 800349e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e02e      	b.n	8003504 <HAL_RCC_OscConfig+0xd4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b7b      	ldr	r3, [pc, #492]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7a      	ldr	r2, [pc, #488]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b78      	ldr	r3, [pc, #480]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a77      	ldr	r2, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01d      	b.n	8003504 <HAL_RCC_OscConfig+0xd4>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0xbc>
 80034d2:	4b72      	ldr	r3, [pc, #456]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a71      	ldr	r2, [pc, #452]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b6f      	ldr	r3, [pc, #444]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6e      	ldr	r2, [pc, #440]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0xd4>
 80034ec:	4b6b      	ldr	r3, [pc, #428]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6a      	ldr	r2, [pc, #424]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a67      	ldr	r2, [pc, #412]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fd fea4 	bl	8001258 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fd fea0 	bl	8001258 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e200      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b5d      	ldr	r3, [pc, #372]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0xe4>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fd fe90 	bl	8001258 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fd fe8c 	bl	8001258 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e1ec      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x10c>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d063      	beq.n	8003632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356a:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003576:	4b49      	ldr	r3, [pc, #292]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x18c>
 8003582:	4b46      	ldr	r3, [pc, #280]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x176>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1c0      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b3d      	ldr	r3, [pc, #244]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4939      	ldr	r1, [pc, #228]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e03a      	b.n	8003632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_RCC_OscConfig+0x270>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fd fe45 	bl	8001258 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fd fe41 	bl	8001258 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1a1      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	4b2d      	ldr	r3, [pc, #180]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4927      	ldr	r1, [pc, #156]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
 8003604:	e015      	b.n	8003632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_RCC_OscConfig+0x270>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fe24 	bl	8001258 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003614:	f7fd fe20 	bl	8001258 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e180      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d03a      	beq.n	80036b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d019      	beq.n	800367a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_RCC_OscConfig+0x274>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364c:	f7fd fe04 	bl	8001258 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003654:	f7fd fe00 	bl	8001258 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e160      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <HAL_RCC_OscConfig+0x26c>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003672:	2001      	movs	r0, #1
 8003674:	f000 face 	bl	8003c14 <RCC_Delay>
 8003678:	e01c      	b.n	80036b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_RCC_OscConfig+0x274>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7fd fdea 	bl	8001258 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003686:	e00f      	b.n	80036a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003688:	f7fd fde6 	bl	8001258 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d908      	bls.n	80036a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e146      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	42420000 	.word	0x42420000
 80036a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	4b92      	ldr	r3, [pc, #584]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e9      	bne.n	8003688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a6 	beq.w	800380e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b8b      	ldr	r3, [pc, #556]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10d      	bne.n	80036ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	4a87      	ldr	r2, [pc, #540]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036dc:	61d3      	str	r3, [r2, #28]
 80036de:	4b85      	ldr	r3, [pc, #532]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b82      	ldr	r3, [pc, #520]	; (80038f8 <HAL_RCC_OscConfig+0x4c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fa:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x4c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7e      	ldr	r2, [pc, #504]	; (80038f8 <HAL_RCC_OscConfig+0x4c8>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fd fda7 	bl	8001258 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fd fda3 	bl	8001258 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b64      	cmp	r3, #100	; 0x64
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e103      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	4b75      	ldr	r3, [pc, #468]	; (80038f8 <HAL_RCC_OscConfig+0x4c8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x312>
 8003734:	4b6f      	ldr	r3, [pc, #444]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4a6e      	ldr	r2, [pc, #440]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6213      	str	r3, [r2, #32]
 8003740:	e02d      	b.n	800379e <HAL_RCC_OscConfig+0x36e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x334>
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a69      	ldr	r2, [pc, #420]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6213      	str	r3, [r2, #32]
 8003756:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a66      	ldr	r2, [pc, #408]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	6213      	str	r3, [r2, #32]
 8003762:	e01c      	b.n	800379e <HAL_RCC_OscConfig+0x36e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b05      	cmp	r3, #5
 800376a:	d10c      	bne.n	8003786 <HAL_RCC_OscConfig+0x356>
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a60      	ldr	r2, [pc, #384]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	4b5e      	ldr	r3, [pc, #376]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a5d      	ldr	r2, [pc, #372]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	e00b      	b.n	800379e <HAL_RCC_OscConfig+0x36e>
 8003786:	4b5b      	ldr	r3, [pc, #364]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a5a      	ldr	r2, [pc, #360]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6213      	str	r3, [r2, #32]
 8003792:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a57      	ldr	r2, [pc, #348]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d015      	beq.n	80037d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7fd fd57 	bl	8001258 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fd fd53 	bl	8001258 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0b1      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ee      	beq.n	80037ae <HAL_RCC_OscConfig+0x37e>
 80037d0:	e014      	b.n	80037fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d2:	f7fd fd41 	bl	8001258 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fd fd3d 	bl	8001258 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e09b      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f0:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ee      	bne.n	80037da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d105      	bne.n	800380e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003802:	4b3c      	ldr	r3, [pc, #240]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8087 	beq.w	8003926 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d061      	beq.n	80038e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d146      	bne.n	80038ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382c:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fd fd11 	bl	8001258 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fd fd0d 	bl	8001258 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e06d      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384c:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d108      	bne.n	8003874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4921      	ldr	r1, [pc, #132]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003874:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a19      	ldr	r1, [r3, #32]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	430b      	orrs	r3, r1
 8003886:	491b      	ldr	r1, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fd fce1 	bl	8001258 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7fd fcdd 	bl	8001258 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e03d      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x46a>
 80038b8:	e035      	b.n	8003926 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fd fcca 	bl	8001258 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fd fcc6 	bl	8001258 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e026      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x498>
 80038e6:	e01e      	b.n	8003926 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e019      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
 80038fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x500>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	429a      	cmp	r2, r3
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0d0      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d910      	bls.n	8003978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	4965      	ldr	r1, [pc, #404]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b8      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a58      	ldr	r2, [pc, #352]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800399a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a8:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	494d      	ldr	r1, [pc, #308]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d040      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b47      	ldr	r3, [pc, #284]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d115      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e07f      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e073      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06b      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4936      	ldr	r1, [pc, #216]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fc18 	bl	8001258 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fd fc14 	bl	8001258 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e053      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d210      	bcs.n	8003a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 0207 	bic.w	r2, r3, #7
 8003a6a:	4922      	ldr	r1, [pc, #136]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e032      	b.n	8003aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4916      	ldr	r1, [pc, #88]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	490e      	ldr	r1, [pc, #56]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ac2:	f000 f821 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	490a      	ldr	r1, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	5ccb      	ldrb	r3, [r1, r3]
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1cc>)
 8003adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_ClockConfig+0x1d0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fb76 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08009990 	.word	0x08009990
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x30>
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x36>
 8003b36:	e027      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b3a:	613b      	str	r3, [r7, #16]
      break;
 8003b3c:	e027      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	0c9b      	lsrs	r3, r3, #18
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b48:	5cd3      	ldrb	r3, [r2, r3]
 8003b4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d010      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0c5b      	lsrs	r3, r3, #17
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b6a:	fb03 f202 	mul.w	r2, r3, r2
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e004      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	613b      	str	r3, [r7, #16]
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b8a:	613b      	str	r3, [r7, #16]
      break;
 8003b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8e:	693b      	ldr	r3, [r7, #16]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	007a1200 	.word	0x007a1200
 8003ba4:	080099a8 	.word	0x080099a8
 8003ba8:	080099b8 	.word	0x080099b8
 8003bac:	003d0900 	.word	0x003d0900

08003bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff2 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000
 8003be8:	080099a0 	.word	0x080099a0

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffde 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	0adb      	lsrs	r3, r3, #11
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	080099a0 	.word	0x080099a0

08003c14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <RCC_Delay+0x34>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <RCC_Delay+0x38>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0a5b      	lsrs	r3, r3, #9
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c30:	bf00      	nop
  }
  while (Delay --);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1e5a      	subs	r2, r3, #1
 8003c36:	60fa      	str	r2, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f9      	bne.n	8003c30 <RCC_Delay+0x1c>
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	10624dd3 	.word	0x10624dd3

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d07d      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c70:	4b4f      	ldr	r3, [pc, #316]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	61d3      	str	r3, [r2, #28]
 8003c88:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d118      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca4:	4b43      	ldr	r3, [pc, #268]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a42      	ldr	r2, [pc, #264]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fad2 	bl	8001258 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	e008      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fd face 	bl	8001258 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e06d      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02e      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d027      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d0a:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d014      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fd fa9d 	bl	8001258 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fd fa99 	bl	8001258 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e036      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ee      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4917      	ldr	r1, [pc, #92]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	490b      	ldr	r1, [pc, #44]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	42420440 	.word	0x42420440

08003dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f8f4 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 fa74 	bl	80042e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e03a      	b.n	8003eea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <HAL_TIM_Base_Start_IT+0x98>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x58>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d009      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x58>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x58>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <HAL_TIM_Base_Start_IT+0xa0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d111      	bne.n	8003ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d010      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e007      	b.n	8003ee8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800

08003f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d122      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d11b      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0202 	mvn.w	r2, #2
 8003f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9b4 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9a7 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f9b6 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0204 	mvn.w	r2, #4
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f98a 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f97d 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f98c 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d122      	bne.n	8004004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0208 	mvn.w	r2, #8
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2204      	movs	r2, #4
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f960 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f953 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f962 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b10      	cmp	r3, #16
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b10      	cmp	r3, #16
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0210 	mvn.w	r2, #16
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2208      	movs	r2, #8
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f936 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f929 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f938 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0201 	mvn.w	r2, #1
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc f864 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fa7b 	bl	80045a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8fc 	bl	80042d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0220 	mvn.w	r2, #32
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa46 	bl	8004594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIM_ConfigClockSource+0x1c>
 8004128:	2302      	movs	r3, #2
 800412a:	e0b4      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x186>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800414a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004164:	d03e      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416a:	f200 8087 	bhi.w	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	f000 8086 	beq.w	8004282 <HAL_TIM_ConfigClockSource+0x172>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d87f      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b70      	cmp	r3, #112	; 0x70
 800417e:	d01a      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004180:	2b70      	cmp	r3, #112	; 0x70
 8004182:	d87b      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b60      	cmp	r3, #96	; 0x60
 8004186:	d050      	beq.n	800422a <HAL_TIM_ConfigClockSource+0x11a>
 8004188:	2b60      	cmp	r3, #96	; 0x60
 800418a:	d877      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b50      	cmp	r3, #80	; 0x50
 800418e:	d03c      	beq.n	800420a <HAL_TIM_ConfigClockSource+0xfa>
 8004190:	2b50      	cmp	r3, #80	; 0x50
 8004192:	d873      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d058      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x13a>
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d86f      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b30      	cmp	r3, #48	; 0x30
 800419e:	d064      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041a0:	2b30      	cmp	r3, #48	; 0x30
 80041a2:	d86b      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d060      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d867      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d05c      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d05a      	beq.n	800426a <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	e062      	b.n	800427c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c6:	f000 f968 	bl	800449a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	609a      	str	r2, [r3, #8]
      break;
 80041e2:	e04f      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f4:	f000 f951 	bl	800449a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004206:	609a      	str	r2, [r3, #8]
      break;
 8004208:	e03c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004216:	461a      	mov	r2, r3
 8004218:	f000 f8c8 	bl	80043ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2150      	movs	r1, #80	; 0x50
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f91f 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004228:	e02c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004236:	461a      	mov	r2, r3
 8004238:	f000 f8e6 	bl	8004408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2160      	movs	r1, #96	; 0x60
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f90f 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004248:	e01c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	461a      	mov	r2, r3
 8004258:	f000 f8a8 	bl	80043ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2140      	movs	r1, #64	; 0x40
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f8ff 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004268:	e00c      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f000 f8f6 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 800427a:	e003      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      break;
 8004280:	e000      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
	...

080042e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a29      	ldr	r2, [pc, #164]	; (80043a0 <TIM_Base_SetConfig+0xb8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00b      	beq.n	8004318 <TIM_Base_SetConfig+0x30>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004306:	d007      	beq.n	8004318 <TIM_Base_SetConfig+0x30>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <TIM_Base_SetConfig+0xbc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0x30>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <TIM_Base_SetConfig+0xc0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <TIM_Base_SetConfig+0xb8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0x62>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0x62>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <TIM_Base_SetConfig+0xbc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <TIM_Base_SetConfig+0xc0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <TIM_Base_SetConfig+0xb8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d103      	bne.n	8004390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	615a      	str	r2, [r3, #20]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800

080043ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0201 	bic.w	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 030a 	bic.w	r3, r3, #10
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0210 	bic.w	r2, r3, #16
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004444:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	f043 0307 	orr.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	609a      	str	r2, [r3, #8]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e046      	b.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453c:	d009      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10c      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4313      	orrs	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800

08004594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e042      	b.n	8004650 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc fd1c 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2224      	movs	r2, #36	; 0x24
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fcd5 	bl	8004fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b20      	cmp	r3, #32
 8004670:	d112      	bne.n	8004698 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_UART_Receive_IT+0x26>
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e00b      	b.n	800469a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	461a      	mov	r2, r3
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fab7 	bl	8004c02 <UART_Start_Receive_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	e000      	b.n	800469a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b0ba      	sub	sp, #232	; 0xe8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_UART_IRQHandler+0x66>
 80046f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fb93 	bl	8004e2e <UART_Receive_IT>
      return;
 8004708:	e25b      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800470a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80de 	beq.w	80048d0 <HAL_UART_IRQHandler+0x22c>
 8004714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80d1 	beq.w	80048d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xae>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xd2>
 800475e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f043 0202 	orr.w	r2, r3, #2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_UART_IRQHandler+0xf6>
 8004782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d011      	beq.n	80047ca <HAL_UART_IRQHandler+0x126>
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d105      	bne.n	80047be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f043 0208 	orr.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 81f2 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x14e>
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb1e 	bl	8004e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_UART_IRQHandler+0x17a>
 8004816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04f      	beq.n	80048be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa28 	bl	8004c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d041      	beq.n	80048b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800484c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3314      	adds	r3, #20
 800485a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800485e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800486a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1d9      	bne.n	8004832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	4a7e      	ldr	r2, [pc, #504]	; (8004a84 <HAL_UART_IRQHandler+0x3e0>)
 800488c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fe32 	bl	80014fc <HAL_DMA_Abort_IT>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048a8:	4610      	mov	r0, r2
 80048aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e00e      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f993 	bl	8004bda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e00a      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f98f 	bl	8004bda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e006      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f98b 	bl	8004bda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80048ca:	e175      	b.n	8004bb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	bf00      	nop
    return;
 80048ce:	e173      	b.n	8004bb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 814f 	bne.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8148 	beq.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8141 	beq.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80b6 	beq.w	8004a88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8145 	beq.w	8004bbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800493a:	429a      	cmp	r2, r3
 800493c:	f080 813e 	bcs.w	8004bbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b20      	cmp	r3, #32
 8004950:	f000 8088 	beq.w	8004a64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800496a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800496e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004980:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800498c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1d9      	bne.n	8004954 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e1      	bne.n	80049a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3314      	adds	r3, #20
 80049fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e3      	bne.n	80049dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a34:	f023 0310 	bic.w	r3, r3, #16
 8004a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a46:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fc fd11 	bl	8001486 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8b6 	bl	8004bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a80:	e09c      	b.n	8004bbc <HAL_UART_IRQHandler+0x518>
 8004a82:	bf00      	nop
 8004a84:	08004d39 	.word	0x08004d39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 808e 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8089 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ad2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e3      	bne.n	8004aae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	623b      	str	r3, [r7, #32]
   return(result);
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e3      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b50:	61fa      	str	r2, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e3      	bne.n	8004b2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f83b 	bl	8004bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b76:	e023      	b.n	8004bc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x4f4>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8e5 	bl	8004d60 <UART_Transmit_IT>
    return;
 8004b96:	e014      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f924 	bl	8004dfe <UART_EndTransmit_IT>
    return;
 8004bb6:	e004      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc0:	bf00      	nop
  }
}
 8004bc2:	37e8      	adds	r7, #232	; 0xe8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2222      	movs	r2, #34	; 0x22
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0220 	orr.w	r2, r2, #32
 8004c66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b095      	sub	sp, #84	; 0x54
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d119      	bne.n	8004d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	647b      	str	r3, [r7, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d0c:	61ba      	str	r2, [r7, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6979      	ldr	r1, [r7, #20]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d2e:	bf00      	nop
 8004d30:	3754      	adds	r7, #84	; 0x54
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ff41 	bl	8004bda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b21      	cmp	r3, #33	; 0x21
 8004d72:	d13e      	bne.n	8004df2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7c:	d114      	bne.n	8004da8 <UART_Transmit_IT+0x48>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d110      	bne.n	8004da8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]
 8004da6:	e008      	b.n	8004dba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6211      	str	r1, [r2, #32]
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ddc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fed2 	bl	8004bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08c      	sub	sp, #48	; 0x30
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b22      	cmp	r3, #34	; 0x22
 8004e40:	f040 80ae 	bne.w	8004fa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	d117      	bne.n	8004e7e <UART_Receive_IT+0x50>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e7c:	e026      	b.n	8004ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d007      	beq.n	8004ea2 <UART_Receive_IT+0x74>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <UART_Receive_IT+0x82>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e008      	b.n	8004ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d15d      	bne.n	8004f9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0220 	bic.w	r2, r2, #32
 8004eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d135      	bne.n	8004f92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 0310 	bic.w	r3, r3, #16
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	623a      	str	r2, [r7, #32]
 8004f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	69f9      	ldr	r1, [r7, #28]
 8004f52:	6a3a      	ldr	r2, [r7, #32]
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e5      	bne.n	8004f2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d10a      	bne.n	8004f84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fe2e 	bl	8004bec <HAL_UARTEx_RxEventCallback>
 8004f90:	e002      	b.n	8004f98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb f91c 	bl	80001d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e002      	b.n	8004fa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3730      	adds	r7, #48	; 0x30
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fe6:	f023 030c 	bic.w	r3, r3, #12
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2c      	ldr	r2, [pc, #176]	; (80050c0 <UART_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d103      	bne.n	800501c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fe fdea 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	e002      	b.n	8005022 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fdd2 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8005020:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009a      	lsls	r2, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <UART_SetConfig+0x118>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	0119      	lsls	r1, r3, #4
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009a      	lsls	r2, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	fbb2 f2f3 	udiv	r2, r2, r3
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <UART_SetConfig+0x118>)
 800505a:	fba3 0302 	umull	r0, r3, r3, r2
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2064      	movs	r0, #100	; 0x64
 8005062:	fb00 f303 	mul.w	r3, r0, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	3332      	adds	r3, #50	; 0x32
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <UART_SetConfig+0x118>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005078:	4419      	add	r1, r3
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009a      	lsls	r2, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <UART_SetConfig+0x118>)
 8005092:	fba3 0302 	umull	r0, r3, r3, r2
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2064      	movs	r0, #100	; 0x64
 800509a:	fb00 f303 	mul.w	r3, r0, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	3332      	adds	r3, #50	; 0x32
 80050a4:	4a07      	ldr	r2, [pc, #28]	; (80050c4 <UART_SetConfig+0x118>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	f003 020f 	and.w	r2, r3, #15
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	440a      	add	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40013800 	.word	0x40013800
 80050c4:	51eb851f 	.word	0x51eb851f

080050c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050c8:	b084      	sub	sp, #16
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	f107 0014 	add.w	r0, r7, #20
 80050d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr

080050e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	b29a      	uxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800511c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005120:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	b29b      	uxth	r3, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	b29b      	uxth	r3, r3
 8005132:	4013      	ands	r3, r2
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005160:	b084      	sub	sp, #16
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	f107 0014 	add.w	r0, r7, #20
 800516e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	b004      	add	sp, #16
 800519e:	4770      	bx	lr

080051a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b09d      	sub	sp, #116	; 0x74
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	78db      	ldrb	r3, [r3, #3]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d81f      	bhi.n	8005212 <USB_ActivateEndpoint+0x72>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <USB_ActivateEndpoint+0x38>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800521b 	.word	0x0800521b
 80051e4:	080051f7 	.word	0x080051f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80051f4:	e012      	b.n	800521c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005202:	e00b      	b.n	800521c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005204:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800520c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005210:	e004      	b.n	800521c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005218:	e000      	b.n	800521c <USB_ActivateEndpoint+0x7c>
      break;
 800521a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005254:	b29a      	uxth	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7b1b      	ldrb	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 8178 	bne.w	800557e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8084 	beq.w	80053a0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4413      	add	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	011a      	lsls	r2, r3, #4
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	88db      	ldrh	r3, [r3, #6]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	827b      	strh	r3, [r7, #18]
 80052da:	8a7b      	ldrh	r3, [r7, #18]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01b      	beq.n	800531c <USB_ActivateEndpoint+0x17c>
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	823b      	strh	r3, [r7, #16]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	8a3b      	ldrh	r3, [r7, #16]
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d020      	beq.n	8005366 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533a:	81bb      	strh	r3, [r7, #12]
 800533c:	89bb      	ldrh	r3, [r7, #12]
 800533e:	f083 0320 	eor.w	r3, r3, #32
 8005342:	81bb      	strh	r3, [r7, #12]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	89bb      	ldrh	r3, [r7, #12]
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]
 8005364:	e2d5      	b.n	8005912 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537c:	81fb      	strh	r3, [r7, #14]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]
 800539e:	e2b8      	b.n	8005912 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	4413      	add	r3, r2
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	011a      	lsls	r2, r3, #4
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	88db      	ldrh	r3, [r3, #6]
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053de:	b29b      	uxth	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	4413      	add	r3, r2
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	011a      	lsls	r2, r3, #4
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	4413      	add	r3, r2
 80053f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005402:	b29a      	uxth	r2, r3
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b3e      	cmp	r3, #62	; 0x3e
 800540e:	d91d      	bls.n	800544c <USB_ActivateEndpoint+0x2ac>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <USB_ActivateEndpoint+0x28a>
 8005424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005426:	3b01      	subs	r3, #1
 8005428:	66bb      	str	r3, [r7, #104]	; 0x68
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29a      	uxth	r2, r3
 8005430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005432:	b29b      	uxth	r3, r3
 8005434:	029b      	lsls	r3, r3, #10
 8005436:	b29b      	uxth	r3, r3
 8005438:	4313      	orrs	r3, r2
 800543a:	b29b      	uxth	r3, r3
 800543c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005444:	b29a      	uxth	r2, r3
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	e026      	b.n	800549a <USB_ActivateEndpoint+0x2fa>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <USB_ActivateEndpoint+0x2ca>
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005462:	b29a      	uxth	r2, r3
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e017      	b.n	800549a <USB_ActivateEndpoint+0x2fa>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <USB_ActivateEndpoint+0x2e4>
 800547e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005480:	3301      	adds	r3, #1
 8005482:	66bb      	str	r3, [r7, #104]	; 0x68
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800548c:	b29b      	uxth	r3, r3
 800548e:	029b      	lsls	r3, r3, #10
 8005490:	b29b      	uxth	r3, r3
 8005492:	4313      	orrs	r3, r2
 8005494:	b29a      	uxth	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80054a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01b      	beq.n	80054ea <USB_ActivateEndpoint+0x34a>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	843b      	strh	r3, [r7, #32]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8c3b      	ldrh	r3, [r7, #32]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d124      	bne.n	800553c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	83bb      	strh	r3, [r7, #28]
 800550a:	8bbb      	ldrh	r3, [r7, #28]
 800550c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005510:	83bb      	strh	r3, [r7, #28]
 8005512:	8bbb      	ldrh	r3, [r7, #28]
 8005514:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005518:	83bb      	strh	r3, [r7, #28]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	8bbb      	ldrh	r3, [r7, #28]
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]
 800553a:	e1ea      	b.n	8005912 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	83fb      	strh	r3, [r7, #30]
 8005554:	8bfb      	ldrh	r3, [r7, #30]
 8005556:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800555a:	83fb      	strh	r3, [r7, #30]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	8bfb      	ldrh	r3, [r7, #30]
 8005568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	b29b      	uxth	r3, r3
 800557a:	8013      	strh	r3, [r2, #0]
 800557c:	e1c9      	b.n	8005912 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11e      	bne.n	80055c4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]
 80055c2:	e01d      	b.n	8005600 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005610:	4413      	add	r3, r2
 8005612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561c:	4413      	add	r3, r2
 800561e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005622:	65bb      	str	r3, [r7, #88]	; 0x58
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	891b      	ldrh	r3, [r3, #8]
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563e:	b29b      	uxth	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005644:	4413      	add	r3, r2
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	011a      	lsls	r2, r3, #4
 800564e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005650:	4413      	add	r3, r2
 8005652:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	895b      	ldrh	r3, [r3, #10]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	b29b      	uxth	r3, r3
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005666:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f040 8093 	bne.w	8005798 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01b      	beq.n	80056c6 <USB_ActivateEndpoint+0x526>
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	441a      	add	r2, r3
 80056b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80056d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01b      	beq.n	8005716 <USB_ActivateEndpoint+0x576>
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	873b      	strh	r3, [r7, #56]	; 0x38
 800572e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005734:	873b      	strh	r3, [r7, #56]	; 0x38
 8005736:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800573c:	873b      	strh	r3, [r7, #56]	; 0x38
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800574a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575a:	b29b      	uxth	r3, r3
 800575c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005792:	b29b      	uxth	r3, r3
 8005794:	8013      	strh	r3, [r2, #0]
 8005796:	e0bc      	b.n	8005912 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80057a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01d      	beq.n	80057f0 <USB_ActivateEndpoint+0x650>
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01d      	beq.n	8005848 <USB_ActivateEndpoint+0x6a8>
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d024      	beq.n	800589a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005866:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800586a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800586e:	f083 0320 	eor.w	r3, r3, #32
 8005872:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]
 8005898:	e01d      	b.n	80058d6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005912:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005916:	4618      	mov	r0, r3
 8005918:	3774      	adds	r7, #116	; 0x74
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005920:	b480      	push	{r7}
 8005922:	b08d      	sub	sp, #52	; 0x34
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	7b1b      	ldrb	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 808e 	bne.w	8005a50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d044      	beq.n	80059c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	81bb      	strh	r3, [r7, #12]
 800594a:	89bb      	ldrh	r3, [r7, #12]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <USB_DeactivateEndpoint+0x6c>
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	817b      	strh	r3, [r7, #10]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	897b      	ldrh	r3, [r7, #10]
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	813b      	strh	r3, [r7, #8]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	893b      	ldrh	r3, [r7, #8]
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]
 80059c4:	e192      	b.n	8005cec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	827b      	strh	r3, [r7, #18]
 80059d4:	8a7b      	ldrh	r3, [r7, #18]
 80059d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01b      	beq.n	8005a16 <USB_DeactivateEndpoint+0xf6>
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f4:	823b      	strh	r3, [r7, #16]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	441a      	add	r2, r3
 8005a00:	8a3b      	ldrh	r3, [r7, #16]
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	81fb      	strh	r3, [r7, #14]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	89fb      	ldrh	r3, [r7, #14]
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]
 8005a4e:	e14d      	b.n	8005cec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 80a5 	bne.w	8005ba4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	843b      	strh	r3, [r7, #32]
 8005a68:	8c3b      	ldrh	r3, [r7, #32]
 8005a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01b      	beq.n	8005aaa <USB_DeactivateEndpoint+0x18a>
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a88:	83fb      	strh	r3, [r7, #30]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	441a      	add	r2, r3
 8005a94:	8bfb      	ldrh	r3, [r7, #30]
 8005a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	83bb      	strh	r3, [r7, #28]
 8005ab8:	8bbb      	ldrh	r3, [r7, #28]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01b      	beq.n	8005afa <USB_DeactivateEndpoint+0x1da>
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad8:	837b      	strh	r3, [r7, #26]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	8b7b      	ldrh	r3, [r7, #26]
 8005ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b10:	833b      	strh	r3, [r7, #24]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	8b3b      	ldrh	r3, [r7, #24]
 8005b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b48:	82fb      	strh	r3, [r7, #22]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	8afb      	ldrh	r3, [r7, #22]
 8005b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b80:	82bb      	strh	r3, [r7, #20]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8abb      	ldrh	r3, [r7, #20]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
 8005ba2:	e0a3      	b.n	8005cec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005bb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <USB_DeactivateEndpoint+0x2d4>
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <USB_DeactivateEndpoint+0x324>
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3734      	adds	r7, #52	; 0x34
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b0c2      	sub	sp, #264	; 0x108
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d06:	6018      	str	r0, [r3, #0]
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	f040 86b7 	bne.w	8006a92 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d908      	bls.n	8005d52 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d50:	e007      	b.n	8005d62 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	7b1b      	ldrb	r3, [r3, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d13a      	bne.n	8005de8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6959      	ldr	r1, [r3, #20]
 8005d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	88da      	ldrh	r2, [r3, #6]
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d98:	6800      	ldr	r0, [r0, #0]
 8005d9a:	f001 fc9c 	bl	80076d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	011a      	lsls	r2, r3, #4
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	f000 be1f 	b.w	8006a26 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	78db      	ldrb	r3, [r3, #3]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	f040 8462 	bne.w	80066be <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6a1a      	ldr	r2, [r3, #32]
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f240 83df 	bls.w	80065d6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 81c7 	beq.w	8006248 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d177      	bne.n	8005fc6 <USB_EPStartXfer+0x2ce>
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	4413      	add	r3, r2
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	011a      	lsls	r2, r3, #4
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f26:	2b3e      	cmp	r3, #62	; 0x3e
 8005f28:	d921      	bls.n	8005f6e <USB_EPStartXfer+0x276>
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <USB_EPStartXfer+0x252>
 8005f40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f44:	3b01      	subs	r3, #1
 8005f46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	e050      	b.n	8006010 <USB_EPStartXfer+0x318>
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <USB_EPStartXfer+0x294>
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	e041      	b.n	8006010 <USB_EPStartXfer+0x318>
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <USB_EPStartXfer+0x2b4>
 8005fa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e024      	b.n	8006010 <USB_EPStartXfer+0x318>
 8005fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d11c      	bne.n	8006010 <USB_EPStartXfer+0x318>
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	4413      	add	r3, r2
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	011a      	lsls	r2, r3, #4
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600a:	b29a      	uxth	r2, r3
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6959      	ldr	r1, [r3, #20]
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006030:	b29b      	uxth	r3, r3
 8006032:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006036:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800603a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800603e:	6800      	ldr	r0, [r0, #0]
 8006040:	f001 fb49 	bl	80076d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695a      	ldr	r2, [r3, #20]
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	441a      	add	r2, r3
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d90f      	bls.n	800609e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	621a      	str	r2, [r3, #32]
 800609c:	e00e      	b.n	80060bc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800609e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80060ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d177      	bne.n	80061bc <USB_EPStartXfer+0x4c4>
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
 80060d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	4413      	add	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	011a      	lsls	r2, r3, #4
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4413      	add	r3, r2
 8006102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006112:	b29a      	uxth	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611c:	2b3e      	cmp	r3, #62	; 0x3e
 800611e:	d921      	bls.n	8006164 <USB_EPStartXfer+0x46c>
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	2b00      	cmp	r3, #0
 8006134:	d104      	bne.n	8006140 <USB_EPStartXfer+0x448>
 8006136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800613a:	3b01      	subs	r3, #1
 800613c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29a      	uxth	r2, r3
 8006146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800614a:	b29b      	uxth	r3, r3
 800614c:	029b      	lsls	r3, r3, #10
 800614e:	b29b      	uxth	r3, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	b29b      	uxth	r3, r3
 8006154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615c:	b29a      	uxth	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e056      	b.n	8006212 <USB_EPStartXfer+0x51a>
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <USB_EPStartXfer+0x48a>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617a:	b29a      	uxth	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e047      	b.n	8006212 <USB_EPStartXfer+0x51a>
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <USB_EPStartXfer+0x4aa>
 8006198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619c:	3301      	adds	r3, #1
 800619e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	029b      	lsls	r3, r3, #10
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	e02a      	b.n	8006212 <USB_EPStartXfer+0x51a>
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d122      	bne.n	8006212 <USB_EPStartXfer+0x51a>
 80061cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	4413      	add	r3, r2
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	011a      	lsls	r2, r3, #4
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	4413      	add	r3, r2
 8006202:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620c:	b29a      	uxth	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	891b      	ldrh	r3, [r3, #8]
 800621e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6959      	ldr	r1, [r3, #20]
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006232:	b29b      	uxth	r3, r3
 8006234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006238:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800623c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006240:	6800      	ldr	r0, [r0, #0]
 8006242:	f001 fa48 	bl	80076d6 <USB_WritePMA>
 8006246:	e3ee      	b.n	8006a26 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d177      	bne.n	8006348 <USB_EPStartXfer+0x650>
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
 8006264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006278:	4413      	add	r3, r2
 800627a:	64bb      	str	r3, [r7, #72]	; 0x48
 800627c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011a      	lsls	r2, r3, #4
 800628a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628c:	4413      	add	r3, r2
 800628e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006292:	647b      	str	r3, [r7, #68]	; 0x44
 8006294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a8:	2b3e      	cmp	r3, #62	; 0x3e
 80062aa:	d921      	bls.n	80062f0 <USB_EPStartXfer+0x5f8>
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <USB_EPStartXfer+0x5d4>
 80062c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062c6:	3b01      	subs	r3, #1
 80062c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	029b      	lsls	r3, r3, #10
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e056      	b.n	800639e <USB_EPStartXfer+0x6a6>
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <USB_EPStartXfer+0x616>
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006306:	b29a      	uxth	r2, r3
 8006308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e047      	b.n	800639e <USB_EPStartXfer+0x6a6>
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <USB_EPStartXfer+0x636>
 8006324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006328:	3301      	adds	r3, #1
 800632a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800632e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006338:	b29b      	uxth	r3, r3
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	b29b      	uxth	r3, r3
 800633e:	4313      	orrs	r3, r2
 8006340:	b29a      	uxth	r2, r3
 8006342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e02a      	b.n	800639e <USB_EPStartXfer+0x6a6>
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d122      	bne.n	800639e <USB_EPStartXfer+0x6a6>
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	653b      	str	r3, [r7, #80]	; 0x50
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006372:	b29b      	uxth	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006378:	4413      	add	r3, r2
 800637a:	653b      	str	r3, [r7, #80]	; 0x50
 800637c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	011a      	lsls	r2, r3, #4
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	4413      	add	r3, r2
 800638e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006398:	b29a      	uxth	r2, r3
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800639e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	891b      	ldrh	r3, [r3, #8]
 80063aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6959      	ldr	r1, [r3, #20]
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063cc:	6800      	ldr	r0, [r0, #0]
 80063ce:	f001 f982 	bl	80076d6 <USB_WritePMA>
            ep->xfer_buff += len;
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e2:	441a      	add	r2, r3
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d90f      	bls.n	800642c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641c:	1ad2      	subs	r2, r2, r3
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	621a      	str	r2, [r3, #32]
 800642a:	e00e      	b.n	800644a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	643b      	str	r3, [r7, #64]	; 0x40
 8006456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d177      	bne.n	8006556 <USB_EPStartXfer+0x85e>
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	4413      	add	r3, r2
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	011a      	lsls	r2, r3, #4
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	4413      	add	r3, r2
 800649c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	2b3e      	cmp	r3, #62	; 0x3e
 80064b8:	d921      	bls.n	80064fe <USB_EPStartXfer+0x806>
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <USB_EPStartXfer+0x7e2>
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	029b      	lsls	r3, r3, #10
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e050      	b.n	80065a0 <USB_EPStartXfer+0x8a8>
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <USB_EPStartXfer+0x824>
 8006506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006514:	b29a      	uxth	r2, r3
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	e041      	b.n	80065a0 <USB_EPStartXfer+0x8a8>
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <USB_EPStartXfer+0x844>
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	3301      	adds	r3, #1
 8006538:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	b29a      	uxth	r2, r3
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e024      	b.n	80065a0 <USB_EPStartXfer+0x8a8>
 8006556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d11c      	bne.n	80065a0 <USB_EPStartXfer+0x8a8>
 8006566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657a:	4413      	add	r3, r2
 800657c:	643b      	str	r3, [r7, #64]	; 0x40
 800657e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	011a      	lsls	r2, r3, #4
 800658c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658e:	4413      	add	r3, r2
 8006590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659a:	b29a      	uxth	r2, r3
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	895b      	ldrh	r3, [r3, #10]
 80065ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6959      	ldr	r1, [r3, #20]
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065ce:	6800      	ldr	r0, [r0, #0]
 80065d0:	f001 f881 	bl	80076d6 <USB_WritePMA>
 80065d4:	e227      	b.n	8006a26 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665c:	b29b      	uxth	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006662:	4413      	add	r3, r2
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	011a      	lsls	r2, r3, #4
 8006674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006676:	4413      	add	r3, r2
 8006678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667c:	65bb      	str	r3, [r7, #88]	; 0x58
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006682:	b29a      	uxth	r2, r3
 8006684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006686:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	891b      	ldrh	r3, [r3, #8]
 8006694:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6959      	ldr	r1, [r3, #20]
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066b6:	6800      	ldr	r0, [r0, #0]
 80066b8:	f001 f80d 	bl	80076d6 <USB_WritePMA>
 80066bc:	e1b3      	b.n	8006a26 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80c6 	beq.w	8006890 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	673b      	str	r3, [r7, #112]	; 0x70
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d177      	bne.n	8006810 <USB_EPStartXfer+0xb18>
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	66bb      	str	r3, [r7, #104]	; 0x68
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006740:	4413      	add	r3, r2
 8006742:	66bb      	str	r3, [r7, #104]	; 0x68
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006754:	4413      	add	r3, r2
 8006756:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800675a:	667b      	str	r3, [r7, #100]	; 0x64
 800675c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006766:	b29a      	uxth	r2, r3
 8006768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006770:	2b3e      	cmp	r3, #62	; 0x3e
 8006772:	d921      	bls.n	80067b8 <USB_EPStartXfer+0xac0>
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <USB_EPStartXfer+0xa9c>
 800678a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800678e:	3b01      	subs	r3, #1
 8006790:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800679e:	b29b      	uxth	r3, r3
 80067a0:	029b      	lsls	r3, r3, #10
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4313      	orrs	r3, r2
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e050      	b.n	800685a <USB_EPStartXfer+0xb62>
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <USB_EPStartXfer+0xade>
 80067c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d2:	801a      	strh	r2, [r3, #0]
 80067d4:	e041      	b.n	800685a <USB_EPStartXfer+0xb62>
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <USB_EPStartXfer+0xafe>
 80067ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067f0:	3301      	adds	r3, #1
 80067f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006800:	b29b      	uxth	r3, r3
 8006802:	029b      	lsls	r3, r3, #10
 8006804:	b29b      	uxth	r3, r3
 8006806:	4313      	orrs	r3, r2
 8006808:	b29a      	uxth	r2, r3
 800680a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	e024      	b.n	800685a <USB_EPStartXfer+0xb62>
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d11c      	bne.n	800685a <USB_EPStartXfer+0xb62>
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800682e:	b29b      	uxth	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006834:	4413      	add	r3, r2
 8006836:	673b      	str	r3, [r7, #112]	; 0x70
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006848:	4413      	add	r3, r2
 800684a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800684e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006854:	b29a      	uxth	r2, r3
 8006856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006858:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	895b      	ldrh	r3, [r3, #10]
 8006866:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6959      	ldr	r1, [r3, #20]
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687a:	b29b      	uxth	r3, r3
 800687c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006880:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006884:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006888:	6800      	ldr	r0, [r0, #0]
 800688a:	f000 ff24 	bl	80076d6 <USB_WritePMA>
 800688e:	e0ca      	b.n	8006a26 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d177      	bne.n	8006990 <USB_EPStartXfer+0xc98>
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068c0:	4413      	add	r3, r2
 80068c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	011a      	lsls	r2, r3, #4
 80068d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068da:	67bb      	str	r3, [r7, #120]	; 0x78
 80068dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f0:	2b3e      	cmp	r3, #62	; 0x3e
 80068f2:	d921      	bls.n	8006938 <USB_EPStartXfer+0xc40>
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <USB_EPStartXfer+0xc1c>
 800690a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800690e:	3b01      	subs	r3, #1
 8006910:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29a      	uxth	r2, r3
 800691a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800691e:	b29b      	uxth	r3, r3
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	b29b      	uxth	r3, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e05c      	b.n	80069f2 <USB_EPStartXfer+0xcfa>
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <USB_EPStartXfer+0xc5e>
 8006940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694e:	b29a      	uxth	r2, r3
 8006950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e04d      	b.n	80069f2 <USB_EPStartXfer+0xcfa>
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <USB_EPStartXfer+0xc7e>
 800696c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006970:	3301      	adds	r3, #1
 8006972:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29a      	uxth	r2, r3
 800697c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006980:	b29b      	uxth	r3, r3
 8006982:	029b      	lsls	r3, r3, #10
 8006984:	b29b      	uxth	r3, r3
 8006986:	4313      	orrs	r3, r2
 8006988:	b29a      	uxth	r2, r3
 800698a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e030      	b.n	80069f2 <USB_EPStartXfer+0xcfa>
 8006990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d128      	bne.n	80069f2 <USB_EPStartXfer+0xcfa>
 80069a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069bc:	b29b      	uxth	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069c4:	4413      	add	r3, r2
 80069c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	011a      	lsls	r2, r3, #4
 80069d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069dc:	4413      	add	r3, r2
 80069de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	891b      	ldrh	r3, [r3, #8]
 80069fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6959      	ldr	r1, [r3, #20]
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a20:	6800      	ldr	r0, [r0, #0]
 8006a22:	f000 fe58 	bl	80076d6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	817b      	strh	r3, [r7, #10]
 8006a4e:	897b      	ldrh	r3, [r7, #10]
 8006a50:	f083 0310 	eor.w	r3, r3, #16
 8006a54:	817b      	strh	r3, [r7, #10]
 8006a56:	897b      	ldrh	r3, [r7, #10]
 8006a58:	f083 0320 	eor.w	r3, r3, #32
 8006a5c:	817b      	strh	r3, [r7, #10]
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	897b      	ldrh	r3, [r7, #10]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	f000 bcde 	b.w	800744e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	7b1b      	ldrb	r3, [r3, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 80bb 	bne.w	8006c1a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d917      	bls.n	8006af0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae0:	1ad2      	subs	r2, r2, r3
 8006ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	619a      	str	r2, [r3, #24]
 8006aee:	e00e      	b.n	8006b0e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b32:	4413      	add	r3, r2
 8006b34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	011a      	lsls	r2, r3, #4
 8006b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b6e:	d924      	bls.n	8006bba <USB_EPStartXfer+0xec2>
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <USB_EPStartXfer+0xe98>
 8006b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	029b      	lsls	r3, r3, #10
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	f000 bc10 	b.w	80073da <USB_EPStartXfer+0x16e2>
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10c      	bne.n	8006bdc <USB_EPStartXfer+0xee4>
 8006bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e3fe      	b.n	80073da <USB_EPStartXfer+0x16e2>
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <USB_EPStartXfer+0xf04>
 8006bf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	029b      	lsls	r3, r3, #10
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e3df      	b.n	80073da <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	78db      	ldrb	r3, [r3, #3]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	f040 8218 	bne.w	800705c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 809d 	bne.w	8006d78 <USB_EPStartXfer+0x1080>
 8006c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c62:	4413      	add	r3, r2
 8006c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	011a      	lsls	r2, r3, #4
 8006c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca6:	d92b      	bls.n	8006d00 <USB_EPStartXfer+0x1008>
 8006ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <USB_EPStartXfer+0xfe0>
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	029b      	lsls	r3, r3, #10
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	e070      	b.n	8006de2 <USB_EPStartXfer+0x10ea>
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10c      	bne.n	8006d2a <USB_EPStartXfer+0x1032>
 8006d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	e05b      	b.n	8006de2 <USB_EPStartXfer+0x10ea>
 8006d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <USB_EPStartXfer+0x1062>
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	3301      	adds	r3, #1
 8006d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	e034      	b.n	8006de2 <USB_EPStartXfer+0x10ea>
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d12c      	bne.n	8006de2 <USB_EPStartXfer+0x10ea>
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dac:	4413      	add	r3, r2
 8006dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	011a      	lsls	r2, r3, #4
 8006dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 809d 	bne.w	8006f3c <USB_EPStartXfer+0x1244>
 8006e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e26:	4413      	add	r3, r2
 8006e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	011a      	lsls	r2, r3, #4
 8006e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e3e:	4413      	add	r3, r2
 8006e40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b3e      	cmp	r3, #62	; 0x3e
 8006e6a:	d92b      	bls.n	8006ec4 <USB_EPStartXfer+0x11cc>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <USB_EPStartXfer+0x11a4>
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	029b      	lsls	r3, r3, #10
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e069      	b.n	8006f98 <USB_EPStartXfer+0x12a0>
 8006ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10c      	bne.n	8006eee <USB_EPStartXfer+0x11f6>
 8006ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e054      	b.n	8006f98 <USB_EPStartXfer+0x12a0>
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <USB_EPStartXfer+0x1226>
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f18:	3301      	adds	r3, #1
 8006f1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	e02d      	b.n	8006f98 <USB_EPStartXfer+0x12a0>
 8006f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d125      	bne.n	8006f98 <USB_EPStartXfer+0x12a0>
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f62:	4413      	add	r3, r2
 8006f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	011a      	lsls	r2, r3, #4
 8006f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8218 	beq.w	80073da <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <USB_EPStartXfer+0x12ea>
 8006fd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10d      	bne.n	8006ffe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fe2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f040 81f5 	bne.w	80073da <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ff0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 81ee 	bne.w	80073da <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007024:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
 800705a:	e1be      	b.n	80073da <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	78db      	ldrb	r3, [r3, #3]
 8007068:	2b01      	cmp	r3, #1
 800706a:	f040 81b4 	bne.w	80073d6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	429a      	cmp	r2, r3
 8007088:	d917      	bls.n	80070ba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800708a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	619a      	str	r2, [r3, #24]
 80070b8:	e00e      	b.n	80070d8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80070ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2200      	movs	r2, #0
 80070d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 8085 	bne.w	80071f4 <USB_EPStartXfer+0x14fc>
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800710e:	4413      	add	r3, r2
 8007110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007126:	4413      	add	r3, r2
 8007128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800712c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007148:	2b3e      	cmp	r3, #62	; 0x3e
 800714a:	d923      	bls.n	8007194 <USB_EPStartXfer+0x149c>
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	2b00      	cmp	r3, #0
 8007160:	d104      	bne.n	800716c <USB_EPStartXfer+0x1474>
 8007162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007166:	3b01      	subs	r3, #1
 8007168:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800716c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e060      	b.n	8007256 <USB_EPStartXfer+0x155e>
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10c      	bne.n	80071b6 <USB_EPStartXfer+0x14be>
 800719c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	e04f      	b.n	8007256 <USB_EPStartXfer+0x155e>
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <USB_EPStartXfer+0x14de>
 80071cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d0:	3301      	adds	r3, #1
 80071d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	029b      	lsls	r3, r3, #10
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4313      	orrs	r3, r2
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e030      	b.n	8007256 <USB_EPStartXfer+0x155e>
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d128      	bne.n	8007256 <USB_EPStartXfer+0x155e>
 8007204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007228:	4413      	add	r3, r2
 800722a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800722e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	011a      	lsls	r2, r3, #4
 800723c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007240:	4413      	add	r3, r2
 8007242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007246:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 8085 	bne.w	8007380 <USB_EPStartXfer+0x1688>
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800729a:	4413      	add	r3, r2
 800729c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	011a      	lsls	r2, r3, #4
 80072ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d4:	2b3e      	cmp	r3, #62	; 0x3e
 80072d6:	d923      	bls.n	8007320 <USB_EPStartXfer+0x1628>
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <USB_EPStartXfer+0x1600>
 80072ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072f2:	3b01      	subs	r3, #1
 80072f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29a      	uxth	r2, r3
 8007300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007304:	b29b      	uxth	r3, r3
 8007306:	029b      	lsls	r3, r3, #10
 8007308:	b29b      	uxth	r3, r3
 800730a:	4313      	orrs	r3, r2
 800730c:	b29b      	uxth	r3, r3
 800730e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007316:	b29a      	uxth	r2, r3
 8007318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	e05c      	b.n	80073da <USB_EPStartXfer+0x16e2>
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <USB_EPStartXfer+0x164a>
 8007328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007338:	b29a      	uxth	r2, r3
 800733a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800733e:	801a      	strh	r2, [r3, #0]
 8007340:	e04b      	b.n	80073da <USB_EPStartXfer+0x16e2>
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <USB_EPStartXfer+0x166a>
 8007358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800735c:	3301      	adds	r3, #1
 800735e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e02c      	b.n	80073da <USB_EPStartXfer+0x16e2>
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	785b      	ldrb	r3, [r3, #1]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d124      	bne.n	80073da <USB_EPStartXfer+0x16e2>
 8007390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073a6:	4413      	add	r3, r2
 80073a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073be:	4413      	add	r3, r2
 80073c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e001      	b.n	80073da <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e03a      	b.n	8007450 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007400:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007404:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007408:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800740c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007410:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007414:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007418:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d020      	beq.n	80074ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007482:	81bb      	strh	r3, [r7, #12]
 8007484:	89bb      	ldrh	r3, [r7, #12]
 8007486:	f083 0310 	eor.w	r3, r3, #16
 800748a:	81bb      	strh	r3, [r7, #12]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	89bb      	ldrh	r3, [r7, #12]
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]
 80074ac:	e01f      	b.n	80074ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c4:	81fb      	strh	r3, [r7, #14]
 80074c6:	89fb      	ldrh	r3, [r7, #14]
 80074c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074cc:	81fb      	strh	r3, [r7, #14]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	441a      	add	r2, r3
 80074d8:	89fb      	ldrh	r3, [r7, #14]
 80074da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	7b1b      	ldrb	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 809d 	bne.w	8007648 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d04c      	beq.n	80075b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	823b      	strh	r3, [r7, #16]
 8007524:	8a3b      	ldrh	r3, [r7, #16]
 8007526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01b      	beq.n	8007566 <USB_EPClearStall+0x6c>
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	81fb      	strh	r3, [r7, #14]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	441a      	add	r2, r3
 8007550:	89fb      	ldrh	r3, [r7, #14]
 8007552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007562:	b29b      	uxth	r3, r3
 8007564:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	78db      	ldrb	r3, [r3, #3]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d06c      	beq.n	8007648 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007584:	81bb      	strh	r3, [r7, #12]
 8007586:	89bb      	ldrh	r3, [r7, #12]
 8007588:	f083 0320 	eor.w	r3, r3, #32
 800758c:	81bb      	strh	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	89bb      	ldrh	r3, [r7, #12]
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]
 80075ae:	e04b      	b.n	8007648 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	82fb      	strh	r3, [r7, #22]
 80075be:	8afb      	ldrh	r3, [r7, #22]
 80075c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01b      	beq.n	8007600 <USB_EPClearStall+0x106>
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075de:	82bb      	strh	r3, [r7, #20]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	8abb      	ldrh	r3, [r7, #20]
 80075ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	827b      	strh	r3, [r7, #18]
 8007618:	8a7b      	ldrh	r3, [r7, #18]
 800761a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800761e:	827b      	strh	r3, [r7, #18]
 8007620:	8a7b      	ldrh	r3, [r7, #18]
 8007622:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007626:	827b      	strh	r3, [r7, #18]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	8a7b      	ldrh	r3, [r7, #18]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr

08007654 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2280      	movs	r2, #128	; 0x80
 800766a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076b4:	68fb      	ldr	r3, [r7, #12]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr

080076c0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b08b      	sub	sp, #44	; 0x2c
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	4611      	mov	r1, r2
 80076e2:	461a      	mov	r2, r3
 80076e4:	460b      	mov	r3, r1
 80076e6:	80fb      	strh	r3, [r7, #6]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076ec:	88bb      	ldrh	r3, [r7, #4]
 80076ee:	3301      	adds	r3, #1
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	005a      	lsls	r2, r3, #1
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007708:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
 800770e:	e01e      	b.n	800774e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	3301      	adds	r3, #1
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	b21a      	sxth	r2, r3
 8007720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007724:	4313      	orrs	r3, r2
 8007726:	b21b      	sxth	r3, r3
 8007728:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	8a7a      	ldrh	r2, [r7, #18]
 800772e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	3302      	adds	r3, #2
 8007734:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	3302      	adds	r3, #2
 800773a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	3301      	adds	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	3b01      	subs	r3, #1
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1dd      	bne.n	8007710 <USB_WritePMA+0x3a>
  }
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	372c      	adds	r7, #44	; 0x2c
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr

08007760 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007760:	b480      	push	{r7}
 8007762:	b08b      	sub	sp, #44	; 0x2c
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	460b      	mov	r3, r1
 8007770:	80fb      	strh	r3, [r7, #6]
 8007772:	4613      	mov	r3, r2
 8007774:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007776:	88bb      	ldrh	r3, [r7, #4]
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	005a      	lsls	r2, r3, #1
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007792:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
 8007798:	e01b      	b.n	80077d2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	3302      	adds	r3, #2
 80077a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	3302      	adds	r3, #2
 80077ca:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	3b01      	subs	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e0      	bne.n	800779a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077d8:	88bb      	ldrh	r3, [r7, #4]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	701a      	strb	r2, [r3, #0]
  }
}
 80077f4:	bf00      	nop
 80077f6:	372c      	adds	r7, #44	; 0x2c
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7c1b      	ldrb	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d115      	bne.n	8007842 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800781a:	2202      	movs	r2, #2
 800781c:	2181      	movs	r1, #129	; 0x81
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fee7 	bl	80095f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800782a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782e:	2202      	movs	r2, #2
 8007830:	2101      	movs	r1, #1
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fedd 	bl	80095f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007840:	e012      	b.n	8007868 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	2202      	movs	r2, #2
 8007846:	2181      	movs	r1, #129	; 0x81
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fed2 	bl	80095f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	2202      	movs	r2, #2
 8007858:	2101      	movs	r1, #1
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fec9 	bl	80095f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007868:	2308      	movs	r3, #8
 800786a:	2203      	movs	r2, #3
 800786c:	2182      	movs	r1, #130	; 0x82
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 febf 	bl	80095f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800787a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800787e:	f001 ffdf 	bl	8009840 <USBD_static_malloc>
 8007882:	4602      	mov	r2, r0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007894:	2301      	movs	r3, #1
 8007896:	73fb      	strb	r3, [r7, #15]
 8007898:	e026      	b.n	80078e8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	7c1b      	ldrb	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ce:	2101      	movs	r1, #1
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 ff7f 	bl	80097d4 <USBD_LL_PrepareReceive>
 80078d6:	e007      	b.n	80078e8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	2101      	movs	r1, #1
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 ff76 	bl	80097d4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007902:	2181      	movs	r1, #129	; 0x81
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fe9a 	bl	800963e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fe93 	bl	800963e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007920:	2182      	movs	r1, #130	; 0x82
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 fe8b 	bl	800963e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007948:	4618      	mov	r0, r3
 800794a:	f001 ff85 	bl	8009858 <USBD_static_free>
    pdev->pClassData = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007970:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007986:	2b00      	cmp	r3, #0
 8007988:	d039      	beq.n	80079fe <USBD_CDC_Setup+0x9e>
 800798a:	2b20      	cmp	r3, #32
 800798c:	d17f      	bne.n	8007a8e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88db      	ldrh	r3, [r3, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d029      	beq.n	80079ea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b25b      	sxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	da11      	bge.n	80079c4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	88d2      	ldrh	r2, [r2, #6]
 80079b2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079b4:	6939      	ldr	r1, [r7, #16]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	88db      	ldrh	r3, [r3, #6]
 80079ba:	461a      	mov	r2, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 fa0a 	bl	8008dd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079c2:	e06b      	b.n	8007a9c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	785a      	ldrb	r2, [r3, #1]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079da:	6939      	ldr	r1, [r7, #16]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fa25 	bl	8008e32 <USBD_CtlPrepareRx>
      break;
 80079e8:	e058      	b.n	8007a9c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	7850      	ldrb	r0, [r2, #1]
 80079f6:	2200      	movs	r2, #0
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	4798      	blx	r3
      break;
 80079fc:	e04e      	b.n	8007a9c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b0b      	cmp	r3, #11
 8007a04:	d02e      	beq.n	8007a64 <USBD_CDC_Setup+0x104>
 8007a06:	2b0b      	cmp	r3, #11
 8007a08:	dc38      	bgt.n	8007a7c <USBD_CDC_Setup+0x11c>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <USBD_CDC_Setup+0xb4>
 8007a0e:	2b0a      	cmp	r3, #10
 8007a10:	d014      	beq.n	8007a3c <USBD_CDC_Setup+0xdc>
 8007a12:	e033      	b.n	8007a7c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d107      	bne.n	8007a2e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a1e:	f107 030c 	add.w	r3, r7, #12
 8007a22:	2202      	movs	r2, #2
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f9d5 	bl	8008dd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a2c:	e02e      	b.n	8007a8c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f966 	bl	8008d02 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a36:	2302      	movs	r3, #2
 8007a38:	75fb      	strb	r3, [r7, #23]
          break;
 8007a3a:	e027      	b.n	8007a8c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d107      	bne.n	8007a56 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a46:	f107 030f 	add.w	r3, r7, #15
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f9c1 	bl	8008dd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a54:	e01a      	b.n	8007a8c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f952 	bl	8008d02 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	75fb      	strb	r3, [r7, #23]
          break;
 8007a62:	e013      	b.n	8007a8c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d00d      	beq.n	8007a8a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f946 	bl	8008d02 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a7a:	e006      	b.n	8007a8a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f93f 	bl	8008d02 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a84:	2302      	movs	r3, #2
 8007a86:	75fb      	strb	r3, [r7, #23]
          break;
 8007a88:	e000      	b.n	8007a8c <USBD_CDC_Setup+0x12c>
          break;
 8007a8a:	bf00      	nop
      }
      break;
 8007a8c:	e006      	b.n	8007a9c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f936 	bl	8008d02 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a96:	2302      	movs	r3, #2
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	bf00      	nop
  }

  return ret;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ac0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03a      	beq.n	8007b42 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	440b      	add	r3, r1
 8007ada:	331c      	adds	r3, #28
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d029      	beq.n	8007b36 <USBD_CDC_DataIn+0x90>
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	331c      	adds	r3, #28
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	78f9      	ldrb	r1, [r7, #3]
 8007af6:	68b8      	ldr	r0, [r7, #8]
 8007af8:	460b      	mov	r3, r1
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4403      	add	r3, r0
 8007b02:	3338      	adds	r3, #56	; 0x38
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b0a:	fb01 f303 	mul.w	r3, r1, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d110      	bne.n	8007b36 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	331c      	adds	r3, #28
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b28:	78f9      	ldrb	r1, [r7, #3]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fe2d 	bl	800978e <USBD_LL_Transmit>
 8007b34:	e003      	b.n	8007b3e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e000      	b.n	8007b44 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b42:	2302      	movs	r3, #2
  }
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fe58 	bl	800981a <USBD_LL_GetRxDataSize>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00d      	beq.n	8007b98 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b90:	4611      	mov	r1, r2
 8007b92:	4798      	blx	r3

    return USBD_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e000      	b.n	8007b9a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b98:	2302      	movs	r3, #2
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <USBD_CDC_EP0_RxReady+0x46>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007bc2:	2bff      	cmp	r3, #255	; 0xff
 8007bc4:	d010      	beq.n	8007be8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007bd4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	22ff      	movs	r2, #255	; 0xff
 8007be4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2243      	movs	r2, #67	; 0x43
 8007c00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c02:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000094 	.word	0x20000094

08007c14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2243      	movs	r2, #67	; 0x43
 8007c20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20000050 	.word	0x20000050

08007c34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2243      	movs	r2, #67	; 0x43
 8007c40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	200000d8 	.word	0x200000d8

08007c54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	220a      	movs	r2, #10
 8007c60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c62:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	2000000c 	.word	0x2000000c

08007c74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr

08007ca0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	4613      	mov	r3, r2
 8007cac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr

08007cd2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01c      	beq.n	8007d4c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d115      	bne.n	8007d48 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2181      	movs	r1, #129	; 0x81
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 fd25 	bl	800978e <USBD_LL_Transmit>

      return USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e002      	b.n	8007d4e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d4c:	2302      	movs	r3, #2
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d017      	beq.n	8007da0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	7c1b      	ldrb	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d82:	2101      	movs	r1, #1
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fd25 	bl	80097d4 <USBD_LL_PrepareReceive>
 8007d8a:	e007      	b.n	8007d9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d92:	2340      	movs	r3, #64	; 0x40
 8007d94:	2101      	movs	r1, #1
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fd1c 	bl	80097d4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e000      	b.n	8007da2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007da0:	2302      	movs	r3, #2
  }
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	4613      	mov	r3, r2
 8007db6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e01a      	b.n	8007df8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	79fa      	ldrb	r2, [r7, #7]
 8007dee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f001 fb89 	bl	8009508 <USBD_LL_Init>

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e001      	b.n	8007e26 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e22:	2302      	movs	r3, #2
 8007e24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 fbbe 	bl	80095bc <USBD_LL_Start>

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00c      	beq.n	8007e92 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	4611      	mov	r1, r2
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fed8 	bl	8008c8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ee8:	461a      	mov	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d016      	beq.n	8007f2c <USBD_LL_SetupStage+0x6a>
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d81c      	bhi.n	8007f3c <USBD_LL_SetupStage+0x7a>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <USBD_LL_SetupStage+0x4a>
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d008      	beq.n	8007f1c <USBD_LL_SetupStage+0x5a>
 8007f0a:	e017      	b.n	8007f3c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f9cb 	bl	80082b0 <USBD_StdDevReq>
      break;
 8007f1a:	e01a      	b.n	8007f52 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa2d 	bl	8008384 <USBD_StdItfReq>
      break;
 8007f2a:	e012      	b.n	8007f52 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa6d 	bl	8008414 <USBD_StdEPReq>
      break;
 8007f3a:	e00a      	b.n	8007f52 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fb96 	bl	800967c <USBD_LL_StallEP>
      break;
 8007f50:	bf00      	nop
  }

  return USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	460b      	mov	r3, r1
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d14b      	bne.n	8008008 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d134      	bne.n	8007fec <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d919      	bls.n	8007fc2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d203      	bcs.n	8007fb0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	e002      	b.n	8007fb6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 ff57 	bl	8008e6e <USBD_CtlContinueRx>
 8007fc0:	e038      	b.n	8008034 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d105      	bne.n	8007fe4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 ff54 	bl	8008e92 <USBD_CtlSendStatus>
 8007fea:	e023      	b.n	8008034 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	d11e      	bne.n	8008034 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 fb3b 	bl	800967c <USBD_LL_StallEP>
 8008006:	e015      	b.n	8008034 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00d      	beq.n	8008030 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800801a:	2b03      	cmp	r3, #3
 800801c:	d108      	bne.n	8008030 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	7afa      	ldrb	r2, [r7, #11]
 8008028:	4611      	mov	r1, r2
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	4798      	blx	r3
 800802e:	e001      	b.n	8008034 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008030:	2302      	movs	r3, #2
 8008032:	e000      	b.n	8008036 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b086      	sub	sp, #24
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	460b      	mov	r3, r1
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800804c:	7afb      	ldrb	r3, [r7, #11]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d17f      	bne.n	8008152 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3314      	adds	r3, #20
 8008056:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800805e:	2b02      	cmp	r3, #2
 8008060:	d15c      	bne.n	800811c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	429a      	cmp	r2, r3
 800806c:	d915      	bls.n	800809a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	b29b      	uxth	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fec1 	bl	8008e0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800808c:	2300      	movs	r3, #0
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f001 fb9e 	bl	80097d4 <USBD_LL_PrepareReceive>
 8008098:	e04e      	b.n	8008138 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	6912      	ldr	r2, [r2, #16]
 80080a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80080a6:	fb01 f202 	mul.w	r2, r1, r2
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d11c      	bne.n	80080ea <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d316      	bcc.n	80080ea <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d20f      	bcs.n	80080ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fe9d 	bl	8008e0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f001 fb76 	bl	80097d4 <USBD_LL_PrepareReceive>
 80080e8:	e026      	b.n	8008138 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d105      	bne.n	800810c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800810c:	2180      	movs	r1, #128	; 0x80
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 fab4 	bl	800967c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 fecf 	bl	8008eb8 <USBD_CtlReceiveStatus>
 800811a:	e00d      	b.n	8008138 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008122:	2b04      	cmp	r3, #4
 8008124:	d004      	beq.n	8008130 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008130:	2180      	movs	r1, #128	; 0x80
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f001 faa2 	bl	800967c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800813e:	2b01      	cmp	r3, #1
 8008140:	d11d      	bne.n	800817e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff fe81 	bl	8007e4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008150:	e015      	b.n	800817e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008164:	2b03      	cmp	r3, #3
 8008166:	d108      	bne.n	800817a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	7afa      	ldrb	r2, [r7, #11]
 8008172:	4611      	mov	r1, r2
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	4798      	blx	r3
 8008178:	e001      	b.n	800817e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800817a:	2302      	movs	r3, #2
 800817c:	e000      	b.n	8008180 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008190:	2340      	movs	r3, #64	; 0x40
 8008192:	2200      	movs	r2, #0
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fa2b 	bl	80095f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2240      	movs	r2, #64	; 0x40
 80081a8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081ac:	2340      	movs	r3, #64	; 0x40
 80081ae:	2200      	movs	r2, #0
 80081b0:	2180      	movs	r1, #128	; 0x80
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fa1d 	bl	80095f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2240      	movs	r2, #64	; 0x40
 80081c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6852      	ldr	r2, [r2, #4]
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	4611      	mov	r1, r2
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
  }

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	78fa      	ldrb	r2, [r7, #3]
 800821a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2204      	movs	r2, #4
 8008240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr

08008250 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825e:	2b04      	cmp	r3, #4
 8008260:	d105      	bne.n	800826e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008288:	2b03      	cmp	r3, #3
 800828a:	d10b      	bne.n	80082a4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d005      	beq.n	80082d6 <USBD_StdDevReq+0x26>
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d84f      	bhi.n	800836e <USBD_StdDevReq+0xbe>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <USBD_StdDevReq+0x36>
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d14b      	bne.n	800836e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
      break;
 80082e4:	e048      	b.n	8008378 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	2b09      	cmp	r3, #9
 80082ec:	d839      	bhi.n	8008362 <USBD_StdDevReq+0xb2>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBD_StdDevReq+0x44>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008345 	.word	0x08008345
 80082f8:	08008359 	.word	0x08008359
 80082fc:	08008363 	.word	0x08008363
 8008300:	0800834f 	.word	0x0800834f
 8008304:	08008363 	.word	0x08008363
 8008308:	08008327 	.word	0x08008327
 800830c:	0800831d 	.word	0x0800831d
 8008310:	08008363 	.word	0x08008363
 8008314:	0800833b 	.word	0x0800833b
 8008318:	08008331 	.word	0x08008331
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9dc 	bl	80086dc <USBD_GetDescriptor>
          break;
 8008324:	e022      	b.n	800836c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb3f 	bl	80089ac <USBD_SetAddress>
          break;
 800832e:	e01d      	b.n	800836c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb7e 	bl	8008a34 <USBD_SetConfig>
          break;
 8008338:	e018      	b.n	800836c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc07 	bl	8008b50 <USBD_GetConfig>
          break;
 8008342:	e013      	b.n	800836c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fc37 	bl	8008bba <USBD_GetStatus>
          break;
 800834c:	e00e      	b.n	800836c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fc65 	bl	8008c20 <USBD_SetFeature>
          break;
 8008356:	e009      	b.n	800836c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fc74 	bl	8008c48 <USBD_ClrFeature>
          break;
 8008360:	e004      	b.n	800836c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fccc 	bl	8008d02 <USBD_CtlError>
          break;
 800836a:	bf00      	nop
      }
      break;
 800836c:	e004      	b.n	8008378 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fcc6 	bl	8008d02 <USBD_CtlError>
      break;
 8008376:	bf00      	nop
  }

  return ret;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop

08008384 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	d005      	beq.n	80083aa <USBD_StdItfReq+0x26>
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d82e      	bhi.n	8008400 <USBD_StdItfReq+0x7c>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <USBD_StdItfReq+0x26>
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d12a      	bne.n	8008400 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b0:	3b01      	subs	r3, #1
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d81d      	bhi.n	80083f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	889b      	ldrh	r3, [r3, #4]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d813      	bhi.n	80083e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88db      	ldrh	r3, [r3, #6]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d110      	bne.n	80083fc <USBD_StdItfReq+0x78>
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10d      	bne.n	80083fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fd56 	bl	8008e92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083e6:	e009      	b.n	80083fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fc89 	bl	8008d02 <USBD_CtlError>
          break;
 80083f0:	e004      	b.n	80083fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc84 	bl	8008d02 <USBD_CtlError>
          break;
 80083fa:	e000      	b.n	80083fe <USBD_StdItfReq+0x7a>
          break;
 80083fc:	bf00      	nop
      }
      break;
 80083fe:	e004      	b.n	800840a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc7d 	bl	8008d02 <USBD_CtlError>
      break;
 8008408:	bf00      	nop
  }

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	889b      	ldrh	r3, [r3, #4]
 8008426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d007      	beq.n	8008444 <USBD_StdEPReq+0x30>
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	f200 8146 	bhi.w	80086c6 <USBD_StdEPReq+0x2b2>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <USBD_StdEPReq+0x40>
 800843e:	2b20      	cmp	r3, #32
 8008440:	f040 8141 	bne.w	80086c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
      break;
 8008452:	e13d      	b.n	80086d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845c:	2b20      	cmp	r3, #32
 800845e:	d10a      	bne.n	8008476 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	e12d      	b.n	80086d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b03      	cmp	r3, #3
 800847c:	d007      	beq.n	800848e <USBD_StdEPReq+0x7a>
 800847e:	2b03      	cmp	r3, #3
 8008480:	f300 811b 	bgt.w	80086ba <USBD_StdEPReq+0x2a6>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d072      	beq.n	800856e <USBD_StdEPReq+0x15a>
 8008488:	2b01      	cmp	r3, #1
 800848a:	d03a      	beq.n	8008502 <USBD_StdEPReq+0xee>
 800848c:	e115      	b.n	80086ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	2b02      	cmp	r3, #2
 8008496:	d002      	beq.n	800849e <USBD_StdEPReq+0x8a>
 8008498:	2b03      	cmp	r3, #3
 800849a:	d015      	beq.n	80084c8 <USBD_StdEPReq+0xb4>
 800849c:	e02b      	b.n	80084f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00c      	beq.n	80084be <USBD_StdEPReq+0xaa>
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b80      	cmp	r3, #128	; 0x80
 80084a8:	d009      	beq.n	80084be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f8e4 	bl	800967c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80084b4:	2180      	movs	r1, #128	; 0x80
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f8e0 	bl	800967c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084bc:	e020      	b.n	8008500 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc1e 	bl	8008d02 <USBD_CtlError>
              break;
 80084c6:	e01b      	b.n	8008500 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	885b      	ldrh	r3, [r3, #2]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10e      	bne.n	80084ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <USBD_StdEPReq+0xda>
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b80      	cmp	r3, #128	; 0x80
 80084da:	d008      	beq.n	80084ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 f8c7 	bl	800967c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fccf 	bl	8008e92 <USBD_CtlSendStatus>

              break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc02 	bl	8008d02 <USBD_CtlError>
              break;
 80084fe:	bf00      	nop
          }
          break;
 8008500:	e0e0      	b.n	80086c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	2b02      	cmp	r3, #2
 800850a:	d002      	beq.n	8008512 <USBD_StdEPReq+0xfe>
 800850c:	2b03      	cmp	r3, #3
 800850e:	d015      	beq.n	800853c <USBD_StdEPReq+0x128>
 8008510:	e026      	b.n	8008560 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00c      	beq.n	8008532 <USBD_StdEPReq+0x11e>
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b80      	cmp	r3, #128	; 0x80
 800851c:	d009      	beq.n	8008532 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 f8aa 	bl	800967c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 f8a6 	bl	800967c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008530:	e01c      	b.n	800856c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fbe4 	bl	8008d02 <USBD_CtlError>
              break;
 800853a:	e017      	b.n	800856c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	885b      	ldrh	r3, [r3, #2]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d112      	bne.n	800856a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 f8b1 	bl	80096ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fc9a 	bl	8008e92 <USBD_CtlSendStatus>
              }
              break;
 800855e:	e004      	b.n	800856a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fbcd 	bl	8008d02 <USBD_CtlError>
              break;
 8008568:	e000      	b.n	800856c <USBD_StdEPReq+0x158>
              break;
 800856a:	bf00      	nop
          }
          break;
 800856c:	e0aa      	b.n	80086c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008574:	2b02      	cmp	r3, #2
 8008576:	d002      	beq.n	800857e <USBD_StdEPReq+0x16a>
 8008578:	2b03      	cmp	r3, #3
 800857a:	d032      	beq.n	80085e2 <USBD_StdEPReq+0x1ce>
 800857c:	e097      	b.n	80086ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <USBD_StdEPReq+0x180>
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d004      	beq.n	8008594 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fbb8 	bl	8008d02 <USBD_CtlError>
                break;
 8008592:	e091      	b.n	80086b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008598:	2b00      	cmp	r3, #0
 800859a:	da0b      	bge.n	80085b4 <USBD_StdEPReq+0x1a0>
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	3310      	adds	r3, #16
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	4413      	add	r3, r2
 80085b0:	3304      	adds	r3, #4
 80085b2:	e00b      	b.n	80085cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	3304      	adds	r3, #4
 80085cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2202      	movs	r2, #2
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fbfb 	bl	8008dd6 <USBD_CtlSendData>
              break;
 80085e0:	e06a      	b.n	80086b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	da11      	bge.n	800860e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	f003 020f 	and.w	r2, r3, #15
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	3318      	adds	r3, #24
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d117      	bne.n	8008634 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fb7b 	bl	8008d02 <USBD_CtlError>
                  break;
 800860c:	e054      	b.n	80086b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d104      	bne.n	8008634 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fb68 	bl	8008d02 <USBD_CtlError>
                  break;
 8008632:	e041      	b.n	80086b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	da0b      	bge.n	8008654 <USBD_StdEPReq+0x240>
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	3310      	adds	r3, #16
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4413      	add	r3, r2
 8008650:	3304      	adds	r3, #4
 8008652:	e00b      	b.n	800866c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <USBD_StdEPReq+0x266>
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b80      	cmp	r3, #128	; 0x80
 8008678:	d103      	bne.n	8008682 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	e00e      	b.n	80086a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f836 	bl	80096f8 <USBD_LL_IsStallEP>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2201      	movs	r2, #1
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e002      	b.n	80086a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2202      	movs	r2, #2
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fb95 	bl	8008dd6 <USBD_CtlSendData>
              break;
 80086ac:	e004      	b.n	80086b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fb26 	bl	8008d02 <USBD_CtlError>
              break;
 80086b6:	bf00      	nop
          }
          break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb20 	bl	8008d02 <USBD_CtlError>
          break;
 80086c2:	bf00      	nop
      }
      break;
 80086c4:	e004      	b.n	80086d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb1a 	bl	8008d02 <USBD_CtlError>
      break;
 80086ce:	bf00      	nop
  }

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	2b06      	cmp	r3, #6
 80086fe:	f200 8128 	bhi.w	8008952 <USBD_GetDescriptor+0x276>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USBD_GetDescriptor+0x2c>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008725 	.word	0x08008725
 800870c:	0800873d 	.word	0x0800873d
 8008710:	0800877d 	.word	0x0800877d
 8008714:	08008953 	.word	0x08008953
 8008718:	08008953 	.word	0x08008953
 800871c:	080088f3 	.word	0x080088f3
 8008720:	0800891f 	.word	0x0800891f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c12      	ldrb	r2, [r2, #16]
 8008730:	f107 0108 	add.w	r1, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
      break;
 800873a:	e112      	b.n	8008962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7c1b      	ldrb	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10d      	bne.n	8008760 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	f107 0208 	add.w	r2, r7, #8
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
 8008754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	2202      	movs	r2, #2
 800875c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800875e:	e100      	b.n	8008962 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	f107 0208 	add.w	r2, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	2202      	movs	r2, #2
 8008778:	701a      	strb	r2, [r3, #0]
      break;
 800877a:	e0f2      	b.n	8008962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	885b      	ldrh	r3, [r3, #2]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b05      	cmp	r3, #5
 8008784:	f200 80ac 	bhi.w	80088e0 <USBD_GetDescriptor+0x204>
 8008788:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <USBD_GetDescriptor+0xb4>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087a9 	.word	0x080087a9
 8008794:	080087dd 	.word	0x080087dd
 8008798:	08008811 	.word	0x08008811
 800879c:	08008845 	.word	0x08008845
 80087a0:	08008879 	.word	0x08008879
 80087a4:	080088ad 	.word	0x080088ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00b      	beq.n	80087cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	7c12      	ldrb	r2, [r2, #16]
 80087c0:	f107 0108 	add.w	r1, r7, #8
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
 80087c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ca:	e091      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa97 	bl	8008d02 <USBD_CtlError>
            err++;
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	3301      	adds	r3, #1
 80087d8:	72fb      	strb	r3, [r7, #11]
          break;
 80087da:	e089      	b.n	80088f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	7c12      	ldrb	r2, [r2, #16]
 80087f4:	f107 0108 	add.w	r1, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087fe:	e077      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa7d 	bl	8008d02 <USBD_CtlError>
            err++;
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	3301      	adds	r3, #1
 800880c:	72fb      	strb	r3, [r7, #11]
          break;
 800880e:	e06f      	b.n	80088f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00b      	beq.n	8008834 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008832:	e05d      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa63 	bl	8008d02 <USBD_CtlError>
            err++;
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	3301      	adds	r3, #1
 8008840:	72fb      	strb	r3, [r7, #11]
          break;
 8008842:	e055      	b.n	80088f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	7c12      	ldrb	r2, [r2, #16]
 800885c:	f107 0108 	add.w	r1, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008866:	e043      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa49 	bl	8008d02 <USBD_CtlError>
            err++;
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	3301      	adds	r3, #1
 8008874:	72fb      	strb	r3, [r7, #11]
          break;
 8008876:	e03b      	b.n	80088f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889a:	e029      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fa2f 	bl	8008d02 <USBD_CtlError>
            err++;
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	3301      	adds	r3, #1
 80088a8:	72fb      	strb	r3, [r7, #11]
          break;
 80088aa:	e021      	b.n	80088f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7c12      	ldrb	r2, [r2, #16]
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ce:	e00f      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa15 	bl	8008d02 <USBD_CtlError>
            err++;
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	3301      	adds	r3, #1
 80088dc:	72fb      	strb	r3, [r7, #11]
          break;
 80088de:	e007      	b.n	80088f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa0d 	bl	8008d02 <USBD_CtlError>
          err++;
 80088e8:	7afb      	ldrb	r3, [r7, #11]
 80088ea:	3301      	adds	r3, #1
 80088ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80088ee:	e038      	b.n	8008962 <USBD_GetDescriptor+0x286>
 80088f0:	e037      	b.n	8008962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7c1b      	ldrb	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008902:	f107 0208 	add.w	r2, r7, #8
 8008906:	4610      	mov	r0, r2
 8008908:	4798      	blx	r3
 800890a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800890c:	e029      	b.n	8008962 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9f6 	bl	8008d02 <USBD_CtlError>
        err++;
 8008916:	7afb      	ldrb	r3, [r7, #11]
 8008918:	3301      	adds	r3, #1
 800891a:	72fb      	strb	r3, [r7, #11]
      break;
 800891c:	e021      	b.n	8008962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	7c1b      	ldrb	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10d      	bne.n	8008942 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f107 0208 	add.w	r2, r7, #8
 8008932:	4610      	mov	r0, r2
 8008934:	4798      	blx	r3
 8008936:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	2207      	movs	r2, #7
 800893e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008940:	e00f      	b.n	8008962 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f9dc 	bl	8008d02 <USBD_CtlError>
        err++;
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	3301      	adds	r3, #1
 800894e:	72fb      	strb	r3, [r7, #11]
      break;
 8008950:	e007      	b.n	8008962 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f9d4 	bl	8008d02 <USBD_CtlError>
      err++;
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	3301      	adds	r3, #1
 800895e:	72fb      	strb	r3, [r7, #11]
      break;
 8008960:	bf00      	nop
  }

  if (err != 0U)
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d11c      	bne.n	80089a2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008968:	893b      	ldrh	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d011      	beq.n	8008992 <USBD_GetDescriptor+0x2b6>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00d      	beq.n	8008992 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	88da      	ldrh	r2, [r3, #6]
 800897a:	893b      	ldrh	r3, [r7, #8]
 800897c:	4293      	cmp	r3, r2
 800897e:	bf28      	it	cs
 8008980:	4613      	movcs	r3, r2
 8008982:	b29b      	uxth	r3, r3
 8008984:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008986:	893b      	ldrh	r3, [r7, #8]
 8008988:	461a      	mov	r2, r3
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fa22 	bl	8008dd6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa79 	bl	8008e92 <USBD_CtlSendStatus>
 80089a0:	e000      	b.n	80089a4 <USBD_GetDescriptor+0x2c8>
    return;
 80089a2:	bf00      	nop
    }
  }
}
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop

080089ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	889b      	ldrh	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d130      	bne.n	8008a20 <USBD_SetAddress+0x74>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	88db      	ldrh	r3, [r3, #6]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d12c      	bne.n	8008a20 <USBD_SetAddress+0x74>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	885b      	ldrh	r3, [r3, #2]
 80089ca:	2b7f      	cmp	r3, #127	; 0x7f
 80089cc:	d828      	bhi.n	8008a20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d104      	bne.n	80089ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f98b 	bl	8008d02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ec:	e01d      	b.n	8008a2a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7bfa      	ldrb	r2, [r7, #15]
 80089f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fea8 	bl	8009750 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa46 	bl	8008e92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a14:	e009      	b.n	8008a2a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1e:	e004      	b.n	8008a2a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f96d 	bl	8008d02 <USBD_CtlError>
  }
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	885b      	ldrh	r3, [r3, #2]
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	4b41      	ldr	r3, [pc, #260]	; (8008b4c <USBD_SetConfig+0x118>)
 8008a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a48:	4b40      	ldr	r3, [pc, #256]	; (8008b4c <USBD_SetConfig+0x118>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d904      	bls.n	8008a5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f955 	bl	8008d02 <USBD_CtlError>
 8008a58:	e075      	b.n	8008b46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d002      	beq.n	8008a6a <USBD_SetConfig+0x36>
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d023      	beq.n	8008ab0 <USBD_SetConfig+0x7c>
 8008a68:	e062      	b.n	8008b30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a6a:	4b38      	ldr	r3, [pc, #224]	; (8008b4c <USBD_SetConfig+0x118>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01a      	beq.n	8008aa8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a72:	4b36      	ldr	r3, [pc, #216]	; (8008b4c <USBD_SetConfig+0x118>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2203      	movs	r2, #3
 8008a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a84:	4b31      	ldr	r3, [pc, #196]	; (8008b4c <USBD_SetConfig+0x118>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff f9e7 	bl	8007e5e <USBD_SetClassConfig>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d104      	bne.n	8008aa0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f932 	bl	8008d02 <USBD_CtlError>
            return;
 8008a9e:	e052      	b.n	8008b46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f9f6 	bl	8008e92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008aa6:	e04e      	b.n	8008b46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f9f2 	bl	8008e92 <USBD_CtlSendStatus>
        break;
 8008aae:	e04a      	b.n	8008b46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ab0:	4b26      	ldr	r3, [pc, #152]	; (8008b4c <USBD_SetConfig+0x118>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d112      	bne.n	8008ade <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008ac0:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <USBD_SetConfig+0x118>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008aca:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <USBD_SetConfig+0x118>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff f9e3 	bl	8007e9c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f9db 	bl	8008e92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008adc:	e033      	b.n	8008b46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008ade:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <USBD_SetConfig+0x118>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d01d      	beq.n	8008b28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff f9d1 	bl	8007e9c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008afa:	4b14      	ldr	r3, [pc, #80]	; (8008b4c <USBD_SetConfig+0x118>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b04:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <USBD_SetConfig+0x118>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff f9a7 	bl	8007e5e <USBD_SetClassConfig>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d104      	bne.n	8008b20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8f2 	bl	8008d02 <USBD_CtlError>
            return;
 8008b1e:	e012      	b.n	8008b46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f9b6 	bl	8008e92 <USBD_CtlSendStatus>
        break;
 8008b26:	e00e      	b.n	8008b46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f9b2 	bl	8008e92 <USBD_CtlSendStatus>
        break;
 8008b2e:	e00a      	b.n	8008b46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f8e5 	bl	8008d02 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <USBD_SetConfig+0x118>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7ff f9ac 	bl	8007e9c <USBD_ClrClassConfig>
        break;
 8008b44:	bf00      	nop
    }
  }
}
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20000660 	.word	0x20000660

08008b50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d004      	beq.n	8008b6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f8cc 	bl	8008d02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b6a:	e022      	b.n	8008bb2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	dc02      	bgt.n	8008b7c <USBD_GetConfig+0x2c>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dc03      	bgt.n	8008b82 <USBD_GetConfig+0x32>
 8008b7a:	e015      	b.n	8008ba8 <USBD_GetConfig+0x58>
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d00b      	beq.n	8008b98 <USBD_GetConfig+0x48>
 8008b80:	e012      	b.n	8008ba8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f920 	bl	8008dd6 <USBD_CtlSendData>
        break;
 8008b96:	e00c      	b.n	8008bb2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f918 	bl	8008dd6 <USBD_CtlSendData>
        break;
 8008ba6:	e004      	b.n	8008bb2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f8a9 	bl	8008d02 <USBD_CtlError>
        break;
 8008bb0:	bf00      	nop
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d81e      	bhi.n	8008c0e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	88db      	ldrh	r3, [r3, #6]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d004      	beq.n	8008be2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f891 	bl	8008d02 <USBD_CtlError>
        break;
 8008be0:	e01a      	b.n	8008c18 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f043 0202 	orr.w	r2, r3, #2
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	330c      	adds	r3, #12
 8008c02:	2202      	movs	r2, #2
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f8e5 	bl	8008dd6 <USBD_CtlSendData>
      break;
 8008c0c:	e004      	b.n	8008c18 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f876 	bl	8008d02 <USBD_CtlError>
      break;
 8008c16:	bf00      	nop
  }
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d106      	bne.n	8008c40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f929 	bl	8008e92 <USBD_CtlSendStatus>
  }
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d80b      	bhi.n	8008c76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d10c      	bne.n	8008c80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f90f 	bl	8008e92 <USBD_CtlSendStatus>
      }
      break;
 8008c74:	e004      	b.n	8008c80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f842 	bl	8008d02 <USBD_CtlError>
      break;
 8008c7e:	e000      	b.n	8008c82 <USBD_ClrFeature+0x3a>
      break;
 8008c80:	bf00      	nop
  }
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781a      	ldrb	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	785a      	ldrb	r2, [r3, #1]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	3303      	adds	r3, #3
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4413      	add	r3, r2
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	3305      	adds	r3, #5
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	3306      	adds	r3, #6
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	3307      	adds	r3, #7
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	80da      	strh	r2, [r3, #6]

}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d0c:	2180      	movs	r1, #128	; 0x80
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fcb4 	bl	800967c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d14:	2100      	movs	r1, #0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fcb0 	bl	800967c <USBD_LL_StallEP>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d032      	beq.n	8008da0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f834 	bl	8008da8 <USBD_GetLen>
 8008d40:	4603      	mov	r3, r0
 8008d42:	3301      	adds	r3, #1
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	75fa      	strb	r2, [r7, #23]
 8008d54:	461a      	mov	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	4413      	add	r3, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	7812      	ldrb	r2, [r2, #0]
 8008d5e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	75fa      	strb	r2, [r7, #23]
 8008d66:	461a      	mov	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d70:	e012      	b.n	8008d98 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	60fa      	str	r2, [r7, #12]
 8008d78:	7dfa      	ldrb	r2, [r7, #23]
 8008d7a:	1c51      	adds	r1, r2, #1
 8008d7c:	75f9      	strb	r1, [r7, #23]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	440a      	add	r2, r1
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	75fa      	strb	r2, [r7, #23]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4413      	add	r3, r2
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e8      	bne.n	8008d72 <USBD_GetString+0x4e>
    }
  }
}
 8008da0:	bf00      	nop
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008db4:	e005      	b.n	8008dc2 <USBD_GetLen+0x1a>
  {
    len++;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	3301      	adds	r3, #1
 8008dba:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1f5      	bne.n	8008db6 <USBD_GetLen+0xe>
  }

  return len;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr

08008dd6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	4613      	mov	r3, r2
 8008de2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008df8:	88fb      	ldrh	r3, [r7, #6]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fcc5 	bl	800978e <USBD_LL_Transmit>

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	2100      	movs	r1, #0
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fcb3 	bl	800978e <USBD_LL_Transmit>

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2203      	movs	r2, #3
 8008e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e48:	88fa      	ldrh	r2, [r7, #6]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fcb8 	bl	80097d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	2100      	movs	r1, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fca6 	bl	80097d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc70 	bl	800978e <USBD_LL_Transmit>

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2205      	movs	r2, #5
 8008ec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fc80 	bl	80097d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4912      	ldr	r1, [pc, #72]	; (8008f30 <MX_USB_DEVICE_Init+0x50>)
 8008ee8:	4812      	ldr	r0, [pc, #72]	; (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fe ff5e 	bl	8007daa <USBD_Init>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ef4:	f7f8 f834 	bl	8000f60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ef8:	490f      	ldr	r1, [pc, #60]	; (8008f38 <MX_USB_DEVICE_Init+0x58>)
 8008efa:	480e      	ldr	r0, [pc, #56]	; (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008efc:	f7fe ff80 	bl	8007e00 <USBD_RegisterClass>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f06:	f7f8 f82b 	bl	8000f60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f0a:	490c      	ldr	r1, [pc, #48]	; (8008f3c <MX_USB_DEVICE_Init+0x5c>)
 8008f0c:	4809      	ldr	r0, [pc, #36]	; (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008f0e:	f7fe feb1 	bl	8007c74 <USBD_CDC_RegisterInterface>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f18:	f7f8 f822 	bl	8000f60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f1c:	4805      	ldr	r0, [pc, #20]	; (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008f1e:	f7fe ff88 	bl	8007e32 <USBD_Start>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f28:	f7f8 f81a 	bl	8000f60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f2c:	bf00      	nop
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	2000012c 	.word	0x2000012c
 8008f34:	20000664 	.word	0x20000664
 8008f38:	20000018 	.word	0x20000018
 8008f3c:	2000011c 	.word	0x2000011c

08008f40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f44:	2200      	movs	r2, #0
 8008f46:	4905      	ldr	r1, [pc, #20]	; (8008f5c <CDC_Init_FS+0x1c>)
 8008f48:	4805      	ldr	r0, [pc, #20]	; (8008f60 <CDC_Init_FS+0x20>)
 8008f4a:	f7fe fea9 	bl	8007ca0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f4e:	4905      	ldr	r1, [pc, #20]	; (8008f64 <CDC_Init_FS+0x24>)
 8008f50:	4803      	ldr	r0, [pc, #12]	; (8008f60 <CDC_Init_FS+0x20>)
 8008f52:	f7fe febe 	bl	8007cd2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20000a28 	.word	0x20000a28
 8008f60:	20000664 	.word	0x20000664
 8008f64:	20000928 	.word	0x20000928

08008f68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr
	...

08008f78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	6039      	str	r1, [r7, #0]
 8008f82:	71fb      	strb	r3, [r7, #7]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	2b23      	cmp	r3, #35	; 0x23
 8008f8c:	f200 808c 	bhi.w	80090a8 <CDC_Control_FS+0x130>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <CDC_Control_FS+0x20>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	080090a9 	.word	0x080090a9
 8008f9c:	080090a9 	.word	0x080090a9
 8008fa0:	080090a9 	.word	0x080090a9
 8008fa4:	080090a9 	.word	0x080090a9
 8008fa8:	080090a9 	.word	0x080090a9
 8008fac:	080090a9 	.word	0x080090a9
 8008fb0:	080090a9 	.word	0x080090a9
 8008fb4:	080090a9 	.word	0x080090a9
 8008fb8:	080090a9 	.word	0x080090a9
 8008fbc:	080090a9 	.word	0x080090a9
 8008fc0:	080090a9 	.word	0x080090a9
 8008fc4:	080090a9 	.word	0x080090a9
 8008fc8:	080090a9 	.word	0x080090a9
 8008fcc:	080090a9 	.word	0x080090a9
 8008fd0:	080090a9 	.word	0x080090a9
 8008fd4:	080090a9 	.word	0x080090a9
 8008fd8:	080090a9 	.word	0x080090a9
 8008fdc:	080090a9 	.word	0x080090a9
 8008fe0:	080090a9 	.word	0x080090a9
 8008fe4:	080090a9 	.word	0x080090a9
 8008fe8:	080090a9 	.word	0x080090a9
 8008fec:	080090a9 	.word	0x080090a9
 8008ff0:	080090a9 	.word	0x080090a9
 8008ff4:	080090a9 	.word	0x080090a9
 8008ff8:	080090a9 	.word	0x080090a9
 8008ffc:	080090a9 	.word	0x080090a9
 8009000:	080090a9 	.word	0x080090a9
 8009004:	080090a9 	.word	0x080090a9
 8009008:	080090a9 	.word	0x080090a9
 800900c:	080090a9 	.word	0x080090a9
 8009010:	080090a9 	.word	0x080090a9
 8009014:	080090a9 	.word	0x080090a9
 8009018:	08009029 	.word	0x08009029
 800901c:	08009063 	.word	0x08009063
 8009020:	080090a9 	.word	0x080090a9
 8009024:	080090a9 	.word	0x080090a9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	myLineCodeBuf[0] = pbuf[0];
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	4b22      	ldr	r3, [pc, #136]	; (80090b8 <CDC_Control_FS+0x140>)
 800902e:	701a      	strb	r2, [r3, #0]
    	myLineCodeBuf[1] = pbuf[1];
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	785a      	ldrb	r2, [r3, #1]
 8009034:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <CDC_Control_FS+0x140>)
 8009036:	705a      	strb	r2, [r3, #1]
    	myLineCodeBuf[2] = pbuf[2];
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	789a      	ldrb	r2, [r3, #2]
 800903c:	4b1e      	ldr	r3, [pc, #120]	; (80090b8 <CDC_Control_FS+0x140>)
 800903e:	709a      	strb	r2, [r3, #2]
    	myLineCodeBuf[3] = pbuf[3];
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	78da      	ldrb	r2, [r3, #3]
 8009044:	4b1c      	ldr	r3, [pc, #112]	; (80090b8 <CDC_Control_FS+0x140>)
 8009046:	70da      	strb	r2, [r3, #3]
    	myLineCodeBuf[4] = pbuf[4];
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	791a      	ldrb	r2, [r3, #4]
 800904c:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <CDC_Control_FS+0x140>)
 800904e:	711a      	strb	r2, [r3, #4]
    	myLineCodeBuf[5] = pbuf[5];
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	795a      	ldrb	r2, [r3, #5]
 8009054:	4b18      	ldr	r3, [pc, #96]	; (80090b8 <CDC_Control_FS+0x140>)
 8009056:	715a      	strb	r2, [r3, #5]
    	myLineCodeBuf[6] = pbuf[6];
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	799a      	ldrb	r2, [r3, #6]
 800905c:	4b16      	ldr	r3, [pc, #88]	; (80090b8 <CDC_Control_FS+0x140>)
 800905e:	719a      	strb	r2, [r3, #6]
    break;
 8009060:	e023      	b.n	80090aa <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = myLineCodeBuf[0];
 8009062:	4b15      	ldr	r3, [pc, #84]	; (80090b8 <CDC_Control_FS+0x140>)
 8009064:	781a      	ldrb	r2, [r3, #0]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = myLineCodeBuf[1];
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	3301      	adds	r3, #1
 800906e:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <CDC_Control_FS+0x140>)
 8009070:	7852      	ldrb	r2, [r2, #1]
 8009072:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = myLineCodeBuf[2];
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	3302      	adds	r3, #2
 8009078:	4a0f      	ldr	r2, [pc, #60]	; (80090b8 <CDC_Control_FS+0x140>)
 800907a:	7892      	ldrb	r2, [r2, #2]
 800907c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = myLineCodeBuf[3];
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	3303      	adds	r3, #3
 8009082:	4a0d      	ldr	r2, [pc, #52]	; (80090b8 <CDC_Control_FS+0x140>)
 8009084:	78d2      	ldrb	r2, [r2, #3]
 8009086:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = myLineCodeBuf[4];
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	3304      	adds	r3, #4
 800908c:	4a0a      	ldr	r2, [pc, #40]	; (80090b8 <CDC_Control_FS+0x140>)
 800908e:	7912      	ldrb	r2, [r2, #4]
 8009090:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = myLineCodeBuf[5];
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	3305      	adds	r3, #5
 8009096:	4a08      	ldr	r2, [pc, #32]	; (80090b8 <CDC_Control_FS+0x140>)
 8009098:	7952      	ldrb	r2, [r2, #5]
 800909a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = myLineCodeBuf[6];
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	3306      	adds	r3, #6
 80090a0:	4a05      	ldr	r2, [pc, #20]	; (80090b8 <CDC_Control_FS+0x140>)
 80090a2:	7992      	ldrb	r2, [r2, #6]
 80090a4:	701a      	strb	r2, [r3, #0]
    break;
 80090a6:	e000      	b.n	80090aa <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090a8:	bf00      	nop
  }

  return (USBD_OK);
 80090aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000b28 	.word	0x20000b28

080090bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(aPtrFunRx != NULL)
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <CDC_Receive_FS+0x3c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <CDC_Receive_FS+0x3c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	6812      	ldr	r2, [r2, #0]
 80090d6:	b292      	uxth	r2, r2
 80090d8:	4611      	mov	r1, r2
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);		//Creado por el mismo programa
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4806      	ldr	r0, [pc, #24]	; (80090fc <CDC_Receive_FS+0x40>)
 80090e2:	f7fe fdf6 	bl	8007cd2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <CDC_Receive_FS+0x40>)
 80090e8:	f7fe fe35 	bl	8007d56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80090ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000b30 	.word	0x20000b30
 80090fc:	20000664 	.word	0x20000664

08009100 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009110:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <CDC_Transmit_FS+0x48>)
 8009112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009116:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009122:	2301      	movs	r3, #1
 8009124:	e00b      	b.n	800913e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009126:	887b      	ldrh	r3, [r7, #2]
 8009128:	461a      	mov	r2, r3
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4806      	ldr	r0, [pc, #24]	; (8009148 <CDC_Transmit_FS+0x48>)
 800912e:	f7fe fdb7 	bl	8007ca0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009132:	4805      	ldr	r0, [pc, #20]	; (8009148 <CDC_Transmit_FS+0x48>)
 8009134:	f7fe fde0 	bl	8007cf8 <USBD_CDC_TransmitPacket>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000664 	.word	0x20000664

0800914c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_AttachRxData(void(*ptrRxAttach)(uint8_t *buf, uint16_t len)) { //Sirve para que siempre se utilice aPtrFunRx para la transmision
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;											//En lugar de la funcion que mandas desde el main
 8009154:	4a03      	ldr	r2, [pc, #12]	; (8009164 <CDC_AttachRxData+0x18>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6013      	str	r3, [r2, #0]
}																		//Modularizando el codigo
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	bc80      	pop	{r7}
 8009162:	4770      	bx	lr
 8009164:	20000b30 	.word	0x20000b30

08009168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	6039      	str	r1, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2212      	movs	r2, #18
 8009178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800917a:	4b03      	ldr	r3, [pc, #12]	; (8009188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	20000148 	.word	0x20000148

0800918c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2204      	movs	r2, #4
 800919c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800919e:	4b03      	ldr	r3, [pc, #12]	; (80091ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	2000015c 	.word	0x2000015c

080091b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4907      	ldr	r1, [pc, #28]	; (80091e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80091c6:	4808      	ldr	r0, [pc, #32]	; (80091e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80091c8:	f7ff fdac 	bl	8008d24 <USBD_GetString>
 80091cc:	e004      	b.n	80091d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4904      	ldr	r1, [pc, #16]	; (80091e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80091d4:	f7ff fda6 	bl	8008d24 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000b34 	.word	0x20000b34
 80091e8:	08009948 	.word	0x08009948

080091ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	4904      	ldr	r1, [pc, #16]	; (800920c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091fc:	4804      	ldr	r0, [pc, #16]	; (8009210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091fe:	f7ff fd91 	bl	8008d24 <USBD_GetString>
  return USBD_StrDesc;
 8009202:	4b02      	ldr	r3, [pc, #8]	; (800920c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000b34 	.word	0x20000b34
 8009210:	08009960 	.word	0x08009960

08009214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	6039      	str	r1, [r7, #0]
 800921e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	221a      	movs	r2, #26
 8009224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009226:	f000 f843 	bl	80092b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800922a:	4b02      	ldr	r3, [pc, #8]	; (8009234 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	20000160 	.word	0x20000160

08009238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	6039      	str	r1, [r7, #0]
 8009242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d105      	bne.n	8009256 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4907      	ldr	r1, [pc, #28]	; (800926c <USBD_FS_ConfigStrDescriptor+0x34>)
 800924e:	4808      	ldr	r0, [pc, #32]	; (8009270 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009250:	f7ff fd68 	bl	8008d24 <USBD_GetString>
 8009254:	e004      	b.n	8009260 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	4904      	ldr	r1, [pc, #16]	; (800926c <USBD_FS_ConfigStrDescriptor+0x34>)
 800925a:	4805      	ldr	r0, [pc, #20]	; (8009270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800925c:	f7ff fd62 	bl	8008d24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009260:	4b02      	ldr	r3, [pc, #8]	; (800926c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000b34 	.word	0x20000b34
 8009270:	08009974 	.word	0x08009974

08009274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d105      	bne.n	8009292 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4907      	ldr	r1, [pc, #28]	; (80092a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800928a:	4808      	ldr	r0, [pc, #32]	; (80092ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800928c:	f7ff fd4a 	bl	8008d24 <USBD_GetString>
 8009290:	e004      	b.n	800929c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	4904      	ldr	r1, [pc, #16]	; (80092a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009296:	4805      	ldr	r0, [pc, #20]	; (80092ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009298:	f7ff fd44 	bl	8008d24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800929c:	4b02      	ldr	r3, [pc, #8]	; (80092a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000b34 	.word	0x20000b34
 80092ac:	08009980 	.word	0x08009980

080092b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <Get_SerialNum+0x44>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092bc:	4b0e      	ldr	r3, [pc, #56]	; (80092f8 <Get_SerialNum+0x48>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <Get_SerialNum+0x4c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092d6:	2208      	movs	r2, #8
 80092d8:	4909      	ldr	r1, [pc, #36]	; (8009300 <Get_SerialNum+0x50>)
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f814 	bl	8009308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092e0:	2204      	movs	r2, #4
 80092e2:	4908      	ldr	r1, [pc, #32]	; (8009304 <Get_SerialNum+0x54>)
 80092e4:	68b8      	ldr	r0, [r7, #8]
 80092e6:	f000 f80f 	bl	8009308 <IntToUnicode>
  }
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	1ffff7e8 	.word	0x1ffff7e8
 80092f8:	1ffff7ec 	.word	0x1ffff7ec
 80092fc:	1ffff7f0 	.word	0x1ffff7f0
 8009300:	20000162 	.word	0x20000162
 8009304:	20000172 	.word	0x20000172

08009308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4613      	mov	r3, r2
 8009314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800931a:	2300      	movs	r3, #0
 800931c:	75fb      	strb	r3, [r7, #23]
 800931e:	e027      	b.n	8009370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	0f1b      	lsrs	r3, r3, #28
 8009324:	2b09      	cmp	r3, #9
 8009326:	d80b      	bhi.n	8009340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	0f1b      	lsrs	r3, r3, #28
 800932c:	b2da      	uxtb	r2, r3
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	4619      	mov	r1, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	440b      	add	r3, r1
 8009338:	3230      	adds	r2, #48	; 0x30
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	e00a      	b.n	8009356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0f1b      	lsrs	r3, r3, #28
 8009344:	b2da      	uxtb	r2, r3
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4619      	mov	r1, r3
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	440b      	add	r3, r1
 8009350:	3237      	adds	r2, #55	; 0x37
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	005b      	lsls	r3, r3, #1
 8009360:	3301      	adds	r3, #1
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	4413      	add	r3, r2
 8009366:	2200      	movs	r2, #0
 8009368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	3301      	adds	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
 8009370:	7dfa      	ldrb	r2, [r7, #23]
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	429a      	cmp	r2, r3
 8009376:	d3d3      	bcc.n	8009320 <IntToUnicode+0x18>
  }
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr

08009384 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a0d      	ldr	r2, [pc, #52]	; (80093c8 <HAL_PCD_MspInit+0x44>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d113      	bne.n	80093be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009396:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <HAL_PCD_MspInit+0x48>)
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	4a0c      	ldr	r2, [pc, #48]	; (80093cc <HAL_PCD_MspInit+0x48>)
 800939c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093a0:	61d3      	str	r3, [r2, #28]
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <HAL_PCD_MspInit+0x48>)
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	2014      	movs	r0, #20
 80093b4:	f7f8 f831 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80093b8:	2014      	movs	r0, #20
 80093ba:	f7f8 f84a 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40005c00 	.word	0x40005c00
 80093cc:	40021000 	.word	0x40021000

080093d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80093e4:	4619      	mov	r1, r3
 80093e6:	4610      	mov	r0, r2
 80093e8:	f7fe fd6b 	bl	8007ec2 <USBD_LL_SetupStage>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009406:	78fa      	ldrb	r2, [r7, #3]
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	440b      	add	r3, r1
 8009414:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	4619      	mov	r1, r3
 800941e:	f7fe fd9d 	bl	8007f5c <USBD_LL_DataOutStage>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	460b      	mov	r3, r1
 8009434:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	4613      	mov	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	440b      	add	r3, r1
 800944a:	333c      	adds	r3, #60	; 0x3c
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	4619      	mov	r1, r3
 8009452:	f7fe fdf4 	bl	800803e <USBD_LL_DataInStage>
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe ff04 	bl	800827a <USBD_LL_SOF>
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009482:	2301      	movs	r3, #1
 8009484:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b02      	cmp	r3, #2
 800948c:	d001      	beq.n	8009492 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800948e:	f7f7 fd67 	bl	8000f60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009498:	7bfa      	ldrb	r2, [r7, #15]
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe feb4 	bl	800820a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fe6d 	bl	8008188 <USBD_LL_Reset>
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe feae 	bl	8008228 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094d4:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <HAL_PCD_SuspendCallback+0x30>)
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	4a03      	ldr	r2, [pc, #12]	; (80094e8 <HAL_PCD_SuspendCallback+0x30>)
 80094da:	f043 0306 	orr.w	r3, r3, #6
 80094de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	e000ed00 	.word	0xe000ed00

080094ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe fea8 	bl	8008250 <USBD_LL_Resume>
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009510:	4a28      	ldr	r2, [pc, #160]	; (80095b4 <USBD_LL_Init+0xac>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a26      	ldr	r2, [pc, #152]	; (80095b4 <USBD_LL_Init+0xac>)
 800951c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009520:	4b24      	ldr	r3, [pc, #144]	; (80095b4 <USBD_LL_Init+0xac>)
 8009522:	4a25      	ldr	r2, [pc, #148]	; (80095b8 <USBD_LL_Init+0xb0>)
 8009524:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009526:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <USBD_LL_Init+0xac>)
 8009528:	2208      	movs	r2, #8
 800952a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800952c:	4b21      	ldr	r3, [pc, #132]	; (80095b4 <USBD_LL_Init+0xac>)
 800952e:	2202      	movs	r2, #2
 8009530:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009532:	4b20      	ldr	r3, [pc, #128]	; (80095b4 <USBD_LL_Init+0xac>)
 8009534:	2200      	movs	r2, #0
 8009536:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009538:	4b1e      	ldr	r3, [pc, #120]	; (80095b4 <USBD_LL_Init+0xac>)
 800953a:	2200      	movs	r2, #0
 800953c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800953e:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <USBD_LL_Init+0xac>)
 8009540:	2200      	movs	r2, #0
 8009542:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009544:	481b      	ldr	r0, [pc, #108]	; (80095b4 <USBD_LL_Init+0xac>)
 8009546:	f7f8 fa04 	bl	8001952 <HAL_PCD_Init>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009550:	f7f7 fd06 	bl	8000f60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800955a:	2318      	movs	r3, #24
 800955c:	2200      	movs	r2, #0
 800955e:	2100      	movs	r1, #0
 8009560:	f7f9 ff23 	bl	80033aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800956a:	2358      	movs	r3, #88	; 0x58
 800956c:	2200      	movs	r2, #0
 800956e:	2180      	movs	r1, #128	; 0x80
 8009570:	f7f9 ff1b 	bl	80033aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800957a:	23c0      	movs	r3, #192	; 0xc0
 800957c:	2200      	movs	r2, #0
 800957e:	2181      	movs	r1, #129	; 0x81
 8009580:	f7f9 ff13 	bl	80033aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800958a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800958e:	2200      	movs	r2, #0
 8009590:	2101      	movs	r1, #1
 8009592:	f7f9 ff0a 	bl	80033aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800959c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a0:	2200      	movs	r2, #0
 80095a2:	2182      	movs	r1, #130	; 0x82
 80095a4:	f7f9 ff01 	bl	80033aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000d34 	.word	0x20000d34
 80095b8:	40005c00 	.word	0x40005c00

080095bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f8 fabc 	bl	8001b50 <HAL_PCD_Start>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f94e 	bl	8009880 <USBD_Get_USB_Status>
 80095e4:	4603      	mov	r3, r0
 80095e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	4608      	mov	r0, r1
 80095fc:	4611      	mov	r1, r2
 80095fe:	461a      	mov	r2, r3
 8009600:	4603      	mov	r3, r0
 8009602:	70fb      	strb	r3, [r7, #3]
 8009604:	460b      	mov	r3, r1
 8009606:	70bb      	strb	r3, [r7, #2]
 8009608:	4613      	mov	r3, r2
 800960a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800961a:	78bb      	ldrb	r3, [r7, #2]
 800961c:	883a      	ldrh	r2, [r7, #0]
 800961e:	78f9      	ldrb	r1, [r7, #3]
 8009620:	f7f8 fc11 	bl	8001e46 <HAL_PCD_EP_Open>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f928 	bl	8009880 <USBD_Get_USB_Status>
 8009630:	4603      	mov	r3, r0
 8009632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009634:	7bbb      	ldrb	r3, [r7, #14]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	460b      	mov	r3, r1
 8009648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f7f8 fc4f 	bl	8001f00 <HAL_PCD_EP_Close>
 8009662:	4603      	mov	r3, r0
 8009664:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	4618      	mov	r0, r3
 800966a:	f000 f909 	bl	8009880 <USBD_Get_USB_Status>
 800966e:	4603      	mov	r3, r0
 8009670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009672:	7bbb      	ldrb	r3, [r7, #14]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7f8 fcf7 	bl	800208e <HAL_PCD_EP_SetStall>
 80096a0:	4603      	mov	r3, r0
 80096a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 f8ea 	bl	8009880 <USBD_Get_USB_Status>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f8 fd38 	bl	800214e <HAL_PCD_EP_ClrStall>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f8cb 	bl	8009880 <USBD_Get_USB_Status>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800970a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800970c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009710:	2b00      	cmp	r3, #0
 8009712:	da0c      	bge.n	800972e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	440b      	add	r3, r1
 8009728:	3302      	adds	r3, #2
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	e00b      	b.n	8009746 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800972e:	78fb      	ldrb	r3, [r7, #3]
 8009730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009734:	68f9      	ldr	r1, [r7, #12]
 8009736:	4613      	mov	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	440b      	add	r3, r1
 8009740:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009744:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr

08009750 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7f8 fb44 	bl	8001dfc <HAL_PCD_SetAddress>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f880 	bl	8009880 <USBD_Get_USB_Status>
 8009780:	4603      	mov	r3, r0
 8009782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009784:	7bbb      	ldrb	r3, [r7, #14]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b086      	sub	sp, #24
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	461a      	mov	r2, r3
 800979a:	460b      	mov	r3, r1
 800979c:	72fb      	strb	r3, [r7, #11]
 800979e:	4613      	mov	r3, r2
 80097a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097b0:	893b      	ldrh	r3, [r7, #8]
 80097b2:	7af9      	ldrb	r1, [r7, #11]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	f7f8 fc33 	bl	8002020 <HAL_PCD_EP_Transmit>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 f85d 	bl	8009880 <USBD_Get_USB_Status>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	461a      	mov	r2, r3
 80097e0:	460b      	mov	r3, r1
 80097e2:	72fb      	strb	r3, [r7, #11]
 80097e4:	4613      	mov	r3, r2
 80097e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097f6:	893b      	ldrh	r3, [r7, #8]
 80097f8:	7af9      	ldrb	r1, [r7, #11]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	f7f8 fbc8 	bl	8001f90 <HAL_PCD_EP_Receive>
 8009800:	4603      	mov	r3, r0
 8009802:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f83a 	bl	8009880 <USBD_Get_USB_Status>
 800980c:	4603      	mov	r3, r0
 800980e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009810:	7dbb      	ldrb	r3, [r7, #22]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f7f8 fbde 	bl	8001ff2 <HAL_PCD_EP_GetRxCount>
 8009836:	4603      	mov	r3, r0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009848:	4b02      	ldr	r3, [pc, #8]	; (8009854 <USBD_static_malloc+0x14>)
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	bc80      	pop	{r7}
 8009852:	4770      	bx	lr
 8009854:	20001024 	.word	0x20001024

08009858 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]

}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	bc80      	pop	{r7}
 8009868:	4770      	bx	lr

0800986a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr

08009880 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800988e:	79fb      	ldrb	r3, [r7, #7]
 8009890:	2b03      	cmp	r3, #3
 8009892:	d817      	bhi.n	80098c4 <USBD_Get_USB_Status+0x44>
 8009894:	a201      	add	r2, pc, #4	; (adr r2, 800989c <USBD_Get_USB_Status+0x1c>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	080098ad 	.word	0x080098ad
 80098a0:	080098b3 	.word	0x080098b3
 80098a4:	080098b9 	.word	0x080098b9
 80098a8:	080098bf 	.word	0x080098bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
    break;
 80098b0:	e00b      	b.n	80098ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098b2:	2302      	movs	r3, #2
 80098b4:	73fb      	strb	r3, [r7, #15]
    break;
 80098b6:	e008      	b.n	80098ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098b8:	2301      	movs	r3, #1
 80098ba:	73fb      	strb	r3, [r7, #15]
    break;
 80098bc:	e005      	b.n	80098ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098be:	2302      	movs	r3, #2
 80098c0:	73fb      	strb	r3, [r7, #15]
    break;
 80098c2:	e002      	b.n	80098ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80098c4:	2302      	movs	r3, #2
 80098c6:	73fb      	strb	r3, [r7, #15]
    break;
 80098c8:	bf00      	nop
  }
  return usb_status;
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bc80      	pop	{r7}
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop

080098d8 <memset>:
 80098d8:	4603      	mov	r3, r0
 80098da:	4402      	add	r2, r0
 80098dc:	4293      	cmp	r3, r2
 80098de:	d100      	bne.n	80098e2 <memset+0xa>
 80098e0:	4770      	bx	lr
 80098e2:	f803 1b01 	strb.w	r1, [r3], #1
 80098e6:	e7f9      	b.n	80098dc <memset+0x4>

080098e8 <__libc_init_array>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	2600      	movs	r6, #0
 80098ec:	4d0c      	ldr	r5, [pc, #48]	; (8009920 <__libc_init_array+0x38>)
 80098ee:	4c0d      	ldr	r4, [pc, #52]	; (8009924 <__libc_init_array+0x3c>)
 80098f0:	1b64      	subs	r4, r4, r5
 80098f2:	10a4      	asrs	r4, r4, #2
 80098f4:	42a6      	cmp	r6, r4
 80098f6:	d109      	bne.n	800990c <__libc_init_array+0x24>
 80098f8:	f000 f81a 	bl	8009930 <_init>
 80098fc:	2600      	movs	r6, #0
 80098fe:	4d0a      	ldr	r5, [pc, #40]	; (8009928 <__libc_init_array+0x40>)
 8009900:	4c0a      	ldr	r4, [pc, #40]	; (800992c <__libc_init_array+0x44>)
 8009902:	1b64      	subs	r4, r4, r5
 8009904:	10a4      	asrs	r4, r4, #2
 8009906:	42a6      	cmp	r6, r4
 8009908:	d105      	bne.n	8009916 <__libc_init_array+0x2e>
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009910:	4798      	blx	r3
 8009912:	3601      	adds	r6, #1
 8009914:	e7ee      	b.n	80098f4 <__libc_init_array+0xc>
 8009916:	f855 3b04 	ldr.w	r3, [r5], #4
 800991a:	4798      	blx	r3
 800991c:	3601      	adds	r6, #1
 800991e:	e7f2      	b.n	8009906 <__libc_init_array+0x1e>
 8009920:	080099bc 	.word	0x080099bc
 8009924:	080099bc 	.word	0x080099bc
 8009928:	080099bc 	.word	0x080099bc
 800992c:	080099c0 	.word	0x080099c0

08009930 <_init>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr

0800993c <_fini>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr
